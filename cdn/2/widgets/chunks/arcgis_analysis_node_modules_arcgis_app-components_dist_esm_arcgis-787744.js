"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-787744"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-image-collection-explorer.entry.js":
/*!***********************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-image-collection-explorer.entry.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_image_collection_explorer: () => (/* binding */ ArcgisImageCollectionExplorer)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./layer-9a7593aa.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/layer-9a7593aa.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */








const arcgisImageCollectionExplorerCss = ":host{display:flex;flex:1 1 auto;overflow:hidden}.switch-button-wrapper{padding:0.5rem 0}.apply-button-wrapper{display:flex;justify-content:center}.image-item-preview-wrapper{width:100%;height:300px}.image-item-card-list{width:100%;padding:0;overflow-y:auto;list-style:none}.image-item-card-content-wrapper{display:flex;gap:1rem}.image-item-card-content-wrapper>img{height:70px;width:70px}.image-collection-item-card-list-header{display:flex;justify-content:space-between;align-items:center}.image-item-count-chip{display:inline-block;padding:0.375rem;border-radius:9999px;background-color:var(--calcite-color-foreground-3)}.image-item-count-chip.selected{background-color:var(--calcite-color-brand);color:var(--calcite-color-text-inverse)}.image-item-card:hover{border:1px solid var(--calcite-color-status-info)}.image-item-inspect-button-group{text-align:start}.image-item-select-wrapper{display:flex;align-items:center;padding:0 2rem}.image-item-select-block{padding:10px;padding-bottom:0}.image-item-card-displayed-field-list{list-style-type:none;padding:0;margin:0;word-break:break-word}.aoi-select-button{border:1px solid var(--calcite-color-border-input)}.aoi-select-opt-wrapper{display:flex;flex-direction:column}.image-item-info-table-wrapper{display:block;overflow-x:auto}.dropdown-container{display:flex;justify-content:space-between;gap:1rem}";

const ArcgisImageCollectionExplorer = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisImageItemExplorerDismissedChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisImageItemExplorerDismissedChange", 7);
        // --------------------------------------------------------------------------
        //
        //  Private methods
        //
        // --------------------------------------------------------------------------
        this.handleCloseClick = () => {
            this.arcgisImageItemExplorerDismissedChange.emit();
        };
        this.handleActiveTabChange = (activeTab) => {
            this.activeTab = activeTab;
        };
        this.handleImageItemQueryApplied = async () => {
            var _a, _b, _c, _d;
            this.isShowingFilteredImageItemResultsPane = true;
            const { view, layer, selectedAOI, activeQueryField, isOverviewsIncluded, selectedQueryFieldValues } = this;
            this.isQueryingImageItems = true;
            this.clearImageItemSelection();
            this.imageItemCardDisplayedFieldNames = [];
            const layerQuery = (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.b)(layer, activeQueryField, selectedQueryFieldValues, selectedAOI, isOverviewsIncluded, view.extent);
            let imageItemCount;
            let imageItems;
            try {
                if (selectedAOI === _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.A.Visible) {
                    imageItems = await (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.g)(layer, view, layerQuery);
                    imageItemCount = (_b = (_a = imageItems === null || imageItems === void 0 ? void 0 : imageItems.features) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
                }
                else {
                    imageItemCount = await (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.a)(layer, layerQuery);
                    imageItems = await (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.c)(layer, layerQuery);
                }
                this.totalImageItemCount = imageItemCount;
            }
            catch (_e) {
                this.totalImageItemCount = 0;
                this.imageItems = null;
                // throw out error
            }
            finally {
                this.isQueryingImageItems = false;
            }
            if (!Array.isArray(imageItems === null || imageItems === void 0 ? void 0 : imageItems.features)) {
                this.imageItems = null;
                this.inspectImageItemObjectId = null;
                return;
            }
            const objectIdFieldName = layer.objectIdField;
            const firstImageItemObjectId = ((_c = this.selectedImageItemObjectIds) === null || _c === void 0 ? void 0 : _c.length) > 0
                ? this.selectedImageItemObjectIds[0]
                : (_d = imageItems.features[0]) === null || _d === void 0 ? void 0 : _d.attributes[objectIdFieldName];
            this.imageItems = imageItems;
            this.inspectImageItemObjectId = firstImageItemObjectId;
            this.handleDisplayedFieldsInImageItemCardChange(activeQueryField.name);
            this.refreshImageItemInfo(firstImageItemObjectId);
        };
        this.handleSelectedImageItemChange = (selectedImageItemObjectId) => {
            this.inspectImageItemObjectId = selectedImageItemObjectId;
            this.refreshImageItemInfo(selectedImageItemObjectId);
        };
        this.handleSelectNextImageItem = () => {
            const { selectedImageItemObjectIds, inspectImageItemObjectId, imageItems, layer } = this;
            const objectIdFieldName = layer.objectIdField;
            const inspectImageItemObjectIds = selectedImageItemObjectIds.length > 0
                ? selectedImageItemObjectIds
                : imageItems.features.map((f) => f.attributes[objectIdFieldName]);
            const currentObjectIdIndex = inspectImageItemObjectIds.findIndex((oid) => oid === inspectImageItemObjectId);
            const newObjectIdIndex = currentObjectIdIndex + 1 === inspectImageItemObjectIds.length ? 0 : currentObjectIdIndex + 1;
            const newImageItemObjectId = inspectImageItemObjectIds[newObjectIdIndex];
            this.inspectImageItemObjectId = newImageItemObjectId;
            this.refreshImageItemInfo(newImageItemObjectId);
        };
        this.handleSelectPrevImageItem = () => {
            const { selectedImageItemObjectIds, inspectImageItemObjectId, imageItems, layer } = this;
            const objectIdFieldName = layer.objectIdField;
            const inspectRasterItemObjectIds = selectedImageItemObjectIds.length > 0
                ? selectedImageItemObjectIds
                : imageItems.features.map((f) => f.attributes[objectIdFieldName]);
            const currentObjectIdIndex = inspectRasterItemObjectIds.findIndex((oid) => oid === inspectImageItemObjectId);
            const newObjectIdIndex = currentObjectIdIndex - 1 < 0
                ? inspectRasterItemObjectIds.length - 1
                : currentObjectIdIndex - 1;
            const newRasterItemObjectId = inspectRasterItemObjectIds[newObjectIdIndex];
            this.inspectImageItemObjectId = newRasterItemObjectId;
            this.refreshImageItemInfo(newRasterItemObjectId);
        };
        this.refreshImageItemInfo = async (imageItemObjectId) => {
            const { layer } = this;
            const imageItemInfo = await layer.getCatalogItemRasterInfo(imageItemObjectId);
            this.imageItemInfo = imageItemInfo;
        };
        this.handleDisplayedFieldsInImageItemCardChange = (fieldName) => {
            const { imageItemCardDisplayedFieldNames, layer, activeQueryField } = this;
            let newDisplayFieldNames = [];
            if (!imageItemCardDisplayedFieldNames.includes(fieldName)) {
                newDisplayFieldNames = [...imageItemCardDisplayedFieldNames, fieldName];
            }
            const defaultDisplayFields = (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.d)(layer, activeQueryField);
            defaultDisplayFields.forEach((field) => {
                if (!newDisplayFieldNames.includes(field.name)) {
                    newDisplayFieldNames.push(field.name);
                }
            });
            this.imageItemCardDisplayedFieldNames = newDisplayFieldNames;
        };
        this.handleOpenConfigResultsModal = () => {
            const { isShowingConfigResultsModal } = this;
            this.isShowingConfigResultsModal = !isShowingConfigResultsModal;
        };
        this.handleImageItemCardMouseOver = async (imageItemGeometry) => {
            const { view, imageItemExtentGraphic, imageItemExtentGraphicLayer, modules } = this;
            const { Color, Graphic, GraphicsLayer, SimpleFillSymbol } = modules;
            if (!imageItemExtentGraphicLayer) {
                const graphicsLayer = new GraphicsLayer();
                view.map.add(graphicsLayer);
                this.imageItemExtentGraphicLayer = graphicsLayer;
            }
            if (this.imageItemExtentGraphic) {
                this.imageItemExtentGraphicLayer.removeAll();
                imageItemExtentGraphic.geometry = imageItemGeometry;
                this.imageItemExtentGraphicLayer.add(imageItemExtentGraphic);
            }
            else {
                const symbol = new SimpleFillSymbol({
                    outline: {
                        color: new Color([214, 137, 16]),
                        width: 2
                    },
                    color: new Color([249, 231, 159, 0.5])
                });
                const imageItemExtGraphic = new Graphic({ geometry: imageItemGeometry, symbol });
                this.imageItemExtentGraphic = imageItemExtGraphic;
                this.imageItemExtentGraphicLayer.add(imageItemExtGraphic);
            }
        };
        this.handleImageItemCardMouseOut = () => {
            var _a;
            this.imageItemExtentGraphic = null;
            (_a = this.imageItemExtentGraphicLayer) === null || _a === void 0 ? void 0 : _a.removeAll();
        };
        this.getLayerAttributeValues = async (fieldName) => {
            var _a, _b;
            const { layer, view, selectedAOI, fetchAbortController } = this;
            if (fetchAbortController) {
                fetchAbortController.abort();
            }
            let uniqueVals = [];
            try {
                this.fetchAbortController = new AbortController();
                this.isQueryingFieldValues = true;
                this.fieldValuesForInput = [];
                this.selectedQueryFieldValues = [];
                const [minValue, maxValue] = await (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.e)(layer, fieldName, selectedAOI, view.extent, (_a = this.fetchAbortController) === null || _a === void 0 ? void 0 : _a.signal);
                this.fieldMinMaxValuesForInput = [minValue, maxValue];
                uniqueVals = await (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.f)(layer, fieldName, selectedAOI, view.extent, (_b = this.fetchAbortController) === null || _b === void 0 ? void 0 : _b.signal);
                this.isQueryingFieldValues = false;
            }
            catch (err) {
                // `abort error` indicates there is another ongoing request
                this.isQueryingFieldValues = (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.i)(err) ? true : false;
            }
            this.fieldValuesForInput = uniqueVals;
        };
        this.clearImageItemSelection = () => {
            this.selectedImageItemObjectIds = [];
        };
        this.showTooltip = (props) => {
            this.dismissTooltip();
            this.tooltipEl = document.createElement("calcite-tooltip");
            this.tooltipEl.placement = "auto";
            this.tooltipEl.referenceElement = props.referenceElement;
            this.tooltipEl.overlayPositioning = "fixed";
            this.tooltipEl.innerHTML = props.innerHTML;
            this.tooltipEl.open = true;
            this.hostElement.parentElement.appendChild(this.tooltipEl);
        };
        this.dismissTooltip = () => {
            var _a;
            if ((_a = this.tooltipEl) === null || _a === void 0 ? void 0 : _a.parentNode) {
                this.tooltipEl.parentNode.removeChild(this.tooltipEl);
                this.tooltipEl = undefined;
            }
        };
        this.jsapiUrl = undefined;
        this.portal = undefined;
        this.layer = undefined;
        this.view = undefined;
        this.activeTab = _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.N.Select;
        this.activeQueryField = undefined;
        this.selectedAOI = _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.A.Visible;
        this.totalImageItemCount = 0;
        this.imageItems = undefined;
        this.selectedImageItemObjectIds = [];
        this.inspectImageItemObjectId = undefined;
        this.imageItemInfo = undefined;
        this.imageItemCardDisplayedFieldNames = [];
        this.isShowingFilteredImageItemResultsPane = false;
        this.isShowingConfigResultsModal = false;
        this.isShowingThumbnails = false;
        this.isOverviewsIncluded = false;
        this.isQueryingImageItems = false;
        this.isQueryingFieldValues = false;
        this.selectedQueryFieldValues = [];
        this.fieldValuesForInput = [];
        this.fieldMinMaxValuesForInput = [];
        this.isRangeValueModeSelected = true;
    }
    handleConfigCardResultsModalClosed() {
        this.isShowingConfigResultsModal = false;
    }
    handleConfigCardResultsModalSaved(e) {
        const { selectedFieldNames, isShowingThumbnails } = e.detail;
        this.isShowingThumbnails = isShowingThumbnails;
        this.imageItemCardDisplayedFieldNames = selectedFieldNames;
    }
    //--------------------------------------------------------------------------
    //
    //  public calls
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.refCloseButtonNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        var _a;
        [this.strings] = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_1__.g)(this.hostElement);
        const [Color, IdentityManager, Graphic, GraphicsLayer, SimpleFillSymbol] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__.l)([
            "esri/Color",
            "esri/identity/IdentityManager",
            "esri/Graphic",
            "esri/layers/GraphicsLayer",
            "esri/symbols/SimpleFillSymbol"
        ]);
        this.modules = {
            Color,
            IdentityManager,
            Graphic,
            GraphicsLayer,
            SimpleFillSymbol
        };
        const supportedLayerFields = (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.h)((_a = this.layer) === null || _a === void 0 ? void 0 : _a.fields);
        const defaultField = (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.j)(supportedLayerFields);
        const selectedField = this.activeQueryField || defaultField;
        this.activeQueryField = selectedField;
        this.getLayerAttributeValues(selectedField.name);
    }
    // --------------------------------------------------------------------------
    //
    //  Render methods
    //
    // --------------------------------------------------------------------------
    render() {
        const { activeTab, strings, inspectImageItemObjectId, imageItemInfo, imageItemCardDisplayedFieldNames, isShowingFilteredImageItemResultsPane, isShowingThumbnails, layer } = this;
        const rtl = (0,_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.g)(this.hostElement) === "rtl";
        const loading = !(layer === null || layer === void 0 ? void 0 : layer.loaded);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-panel", { loading: loading, heading: strings.imageCollectionExplorer, class: {
                panel: true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_2__.C.rtl]: rtl
            } }, this.renderClose(), this.renderActionGroup(), activeTab === _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.N.Select && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderSelectInput(), isShowingFilteredImageItemResultsPane && this.renderSelectResults(), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-config-image-item-card-results-modal", { open: this.isShowingConfigResultsModal, fields: layer.fields, preSelectedFieldNames: imageItemCardDisplayedFieldNames, isShowingThumbnails: isShowingThumbnails }))), activeTab === _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.N.Inspect &&
            (inspectImageItemObjectId && inspectImageItemObjectId > 0 ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderImageItemSelectDropdown(), this.renderImageItemPreviewView(), imageItemInfo && this.renderImageItemInfoTables())) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, strings.noSelectedItemToInspectCoachMessage))))));
    }
    renderClose() {
        const { strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { text: strings.close, icon: "x", slot: "header-actions-end", onClick: this.handleCloseClick, ref: (node) => (this.refCloseButtonNode = node) }));
    }
    renderActionGroup() {
        const { strings, activeTab } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action-group", { layout: "grid", scale: "l", columns: 2 }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { "data-label": _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.N.Select, active: activeTab === _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.N.Select, text: strings.select, textEnabled: true, alignment: "center", onClick: () => this.handleActiveTabChange(_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.N.Select) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { "data-label": _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.N.Inspect, active: activeTab === _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.N.Inspect, text: strings.inspect, textEnabled: true, alignment: "center", onClick: () => this.handleActiveTabChange(_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.N.Inspect) })));
    }
    renderSelectInput() {
        const { strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, heading: strings.filters, open: true }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderAOISelectDropdown(), this.renderAttributeSelectDropdown(), this.renderAttributeInputField(), this.renderIncludeOverviewSwitchButton(), this.renderApplyButton())));
    }
    renderAOISelectDropdown() {
        const { strings, selectedAOI } = this;
        const aoiOptions = [
            { name: _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.A.Visible, label: strings.visible, description: strings.visibleDesc },
            {
                name: _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.A.DisplayExtent,
                label: strings.displayExtent,
                description: strings.displayExtentDesc
            },
            { name: _layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.A.All, label: strings.all, description: strings.allDesc }
        ];
        const selectedAOIOpt = aoiOptions.find((opt) => opt.name === selectedAOI);
        const aoiDropdownItems = aoiOptions.map((opt) => {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { "data-value": opt.name, selected: opt.name === selectedAOIOpt.name }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("strong", null, opt.label), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, opt.description)));
        });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.areaOfInterest, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { widthScale: "m", placement: "bottom", onCalciteDropdownSelect: (event) => {
                var _a, _b;
                const dropdown = event.currentTarget;
                const selectedAOIOpt = (_b = (_a = dropdown === null || dropdown === void 0 ? void 0 : dropdown.selectedItems) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.getAttribute("data-value");
                this.selectedAOI = selectedAOIOpt;
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "aoi-select-button", slot: "trigger", alignment: "space-between", "icon-end": "chevron-down", appearance: "transparent", kind: "neutral", width: "full" }, selectedAOIOpt.label), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, aoiDropdownItems))));
    }
    renderAttributeSelectDropdown() {
        const { strings, activeQueryField, layer } = this;
        const supportedLayerFields = (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.h)(layer === null || layer === void 0 ? void 0 : layer.fields);
        const layerAttributeOptions = supportedLayerFields.map((field) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: field.name, label: field.alias, selected: field.name === activeQueryField.name })));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.attribute, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: strings.attribute, onCalciteSelectChange: (event) => {
                const selectedFieldName = event.currentTarget
                    .selectedOption.value;
                this.activeQueryField = supportedLayerFields.find((f) => f.name === selectedFieldName);
                this.getLayerAttributeValues(selectedFieldName);
            } }, layerAttributeOptions)));
    }
    renderAttributeInputField() {
        const { activeQueryField } = this;
        const fieldType = activeQueryField.type;
        if ((0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.k)(fieldType) || fieldType === "date") {
            return this.renderAttributeSliderInput();
        }
        return this.renderAttributeDropdownInput();
    }
    renderSliderSelectedVals() {
        const { selectedQueryFieldValues, fieldMinMaxValuesForInput, activeQueryField } = this;
        const rangeVals = selectedQueryFieldValues.length > 0 ? selectedQueryFieldValues : fieldMinMaxValuesForInput;
        let startVal;
        let endVal;
        if (rangeVals.length === 2) {
            [startVal, endVal] = rangeVals;
            if (activeQueryField.type === "date") {
                startVal = (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.l)(startVal);
                endVal = (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.l)(endVal);
            }
            return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, `${startVal} - ${endVal}`);
        }
        if (rangeVals.length === 1) {
            [startVal] = rangeVals;
            if (activeQueryField.type === "date") {
                startVal = (0,_layer_9a7593aa_js__WEBPACK_IMPORTED_MODULE_4__.l)(startVal);
            }
            return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, `${startVal}`);
        }
        return null;
    }
    renderAttributeSliderInput() {
        var _a;
        const { strings, fieldMinMaxValuesForInput, isRangeValueModeSelected } = this;
        const validMinMaxVals = fieldMinMaxValuesForInput.filter((val) => typeof val === "number");
        const isShowingSlider = validMinMaxVals.length === 2 && validMinMaxVals[0] !== validMinMaxVals[1];
        const isShowingDropdown = validMinMaxVals.length === 2 && validMinMaxVals[0] === validMinMaxVals[1];
        if (isShowingDropdown) {
            const [value] = validMinMaxVals;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: strings.select, onCalciteSelectChange: (event) => {
                    const selectedOptValue = event.currentTarget
                        .selectedOption.value;
                    this.selectedQueryFieldValues = [selectedOptValue];
                } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: value.toString(), label: value.toString(), selected: ((_a = this.selectedQueryFieldValues) === null || _a === void 0 ? void 0 : _a.length) > 0 &&
                    value.toString() === this.selectedQueryFieldValues[0].toString() })));
        }
        if (isShowingSlider) {
            const minVal = validMinMaxVals[0];
            const maxVal = validMinMaxVals[1];
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderRangeModeSwitchButton(), this.renderSliderSelectedVals(), isRangeValueModeSelected ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { minValue: minVal, maxValue: maxVal, min: minVal, max: maxVal, snap: true, precise: true, onCalciteSliderChange: (event) => {
                    const slider = event.target;
                    if (Array.isArray(slider.value)) {
                        this.selectedQueryFieldValues = [slider.value[0], slider.value[1]];
                    }
                    else {
                        this.selectedQueryFieldValues = [slider.value];
                    }
                } })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { value: validMinMaxVals[1], min: validMinMaxVals[0], max: validMinMaxVals[1], snap: true, precise: true, onCalciteSliderChange: (event) => {
                    const slider = event.target;
                    if (Array.isArray(slider.value)) {
                        this.selectedQueryFieldValues = [slider.value[0], slider.value[1]];
                    }
                    else {
                        this.selectedQueryFieldValues = [slider.value];
                    }
                } }))));
        }
    }
    renderAttributeDropdownInput() {
        const { strings, fieldValuesForInput, isQueryingFieldValues } = this;
        const fieldValueOptions = fieldValuesForInput.map((val) => {
            var _a;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: val.toString(), label: val.toString(), selected: ((_a = this.selectedQueryFieldValues) === null || _a === void 0 ? void 0 : _a.length) > 0 &&
                    val.toString() === this.selectedQueryFieldValues[0].toString() }));
        });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { label: strings.select, disabled: isQueryingFieldValues, width: "full", onCalciteSelectChange: (event) => {
                let selectedVal = event.currentTarget.selectedOption.value;
                this.selectedQueryFieldValues = [selectedVal];
            } }, fieldValueOptions));
    }
    renderRangeModeSwitchButton() {
        const { strings, isRangeValueModeSelected, fieldMinMaxValuesForInput } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "switch-button-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline", scale: "m", style: { width: "100%" } }, strings.rangeMode, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: "information", scale: "s", text: strings.rangeMode, ref: (node) => (this.rangeModeHelpIconActionEl = node), onMouseOver: () => this.showTooltip({
                referenceElement: this.rangeModeHelpIconActionEl,
                innerHTML: strings.rangeModelHelpMessage
            }), onMouseOut: () => this.dismissTooltip(), onClick: (event) => {
                event.stopPropagation();
            }, id: "rangeMode" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: { marginInlineStart: "auto" } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { checked: isRangeValueModeSelected, scale: "m", onCalciteSwitchChange: (event) => {
                const checked = event.target.checked;
                this.isRangeValueModeSelected = checked;
                const validMinMaxVals = fieldMinMaxValuesForInput.filter((val) => typeof val === "number");
                this.selectedQueryFieldValues = checked
                    ? [validMinMaxVals[0], validMinMaxVals[1]]
                    : [validMinMaxVals[0]];
            } })))));
    }
    renderIncludeOverviewSwitchButton() {
        const { strings, isOverviewsIncluded } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "include-overviews-switch-button-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline", scale: "m", style: { width: "100%" } }, strings.includeOverviews, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { icon: "information", scale: "s", text: strings.includeOverviewsHelpMessage, ref: (node) => (this.isIncludeOverviewsHelpIconActionEl = node), onMouseOver: () => this.showTooltip({
                referenceElement: this.isIncludeOverviewsHelpIconActionEl,
                innerHTML: strings.includeOverviewsHelpMessage
            }), onMouseOut: () => this.dismissTooltip(), onClick: (event) => {
                event.stopPropagation();
            }, id: "includeOverviews" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: { marginInlineStart: "auto" } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { checked: isOverviewsIncluded, scale: "m", onCalciteSwitchChange: (event) => {
                const checked = event.target.checked;
                this.isOverviewsIncluded = checked;
            } })))));
    }
    renderApplyButton() {
        const { strings, isQueryingFieldValues, isQueryingImageItems } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "apply-button-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { label: strings.apply, onClick: this.handleImageItemQueryApplied, appearance: "solid", width: "half", disabled: isQueryingFieldValues || isQueryingImageItems }, strings.apply)));
    }
    renderSelectResults() {
        const { strings, isQueryingImageItems, totalImageItemCount, imageItems } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.results }, isQueryingImageItems ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-loader", { label: strings.loading, scale: "m" })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, !(totalImageItemCount > 0) && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, strings.emptyList), totalImageItemCount > 0 ? this.renderImageItemListButtonGroup() : null, imageItems ? this.renderImageItemCardList() : null))));
    }
    renderSelectedImageItemCount() {
        const { strings, totalImageItemCount, selectedImageItemObjectIds } = this;
        const selectedImageItemCount = selectedImageItemObjectIds.length;
        const selectedAndTotalImageCountStr = strings.selectedAndTotalImageItemCountInfo
            .replace("${totalCount}", totalImageItemCount.toString())
            .replace("${selectedCount}", selectedImageItemCount.toString());
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `image-item-count-chip ${selectedImageItemCount > 0 ? "selected" : ""}` }, selectedAndTotalImageCountStr, selectedImageItemCount > 0 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "solid", kind: "brand", "icon-start": "x", scale: "s", onClick: () => this.clearImageItemSelection() }))));
    }
    renderImageItemListButtonGroup() {
        const { strings, selectedImageItemObjectIds } = this;
        const hasImageSelected = selectedImageItemObjectIds.length > 0;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-collection-item-card-list-header" }, this.renderSelectedImageItemCount(), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { style: { display: "flex" } }, hasImageSelected && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { "aria-label": strings.lockItems, appearance: "transparent", "icon-start": "lock", kind: "neutral", scale: "s" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { "aria-label": strings.unlockItems, appearance: "transparent", "icon-start": "unlock", kind: "neutral", scale: "s" }))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { "aria-label": strings.configureResults, appearance: "transparent", "icon-start": "sliders-horizontal", kind: "neutral", scale: "s", onClick: this.handleOpenConfigResultsModal }))));
    }
    renderImageItemCardList() {
        const { imageItems, selectedImageItemObjectIds, layer, isShowingThumbnails } = this;
        if (!(imageItems === null || imageItems === void 0 ? void 0 : imageItems.features)) {
            return null;
        }
        const objectIdFieldName = layer.objectIdField;
        const imageItemCards = imageItems.features.map((feature) => {
            const itemObjectId = feature.attributes[objectIdFieldName];
            const isItemSelected = this.selectedImageItemObjectIds.includes(itemObjectId);
            const imageItemGeometry = feature.geometry;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", { onMouseOver: () => this.handleImageItemCardMouseOver(imageItemGeometry), onMouseOut: () => this.handleImageItemCardMouseOut() }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-card", { class: "image-item-card", selectable: true, selected: isItemSelected, onCalciteCardSelect: () => {
                    const newSelectedItemOIds = isItemSelected
                        ? selectedImageItemObjectIds.filter((oid) => oid !== itemObjectId)
                        : [...selectedImageItemObjectIds, itemObjectId];
                    this.selectedImageItemObjectIds = newSelectedItemOIds.sort();
                } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-card-content-wrapper" }, isShowingThumbnails ? this.renderPreviewThumbnail(itemObjectId) : null, this.renderFeatureAttributesInImageItemCard(feature)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer-start" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "footer-end" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { kind: "neutral", "icon-start": "add-layer", appearance: "transparent" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { kind: "neutral", "icon-start": "lock", appearance: "transparent" })))));
        });
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { class: "image-item-card-list" }, imageItemCards);
    }
    renderImageItemSelectDropdown() {
        var _a;
        const { strings, layer, imageItems, inspectImageItemObjectId, selectedImageItemObjectIds } = this;
        const objectIdFieldName = layer.objectIdField;
        const imageItemFeatures = selectedImageItemObjectIds.length > 0
            ? imageItems === null || imageItems === void 0 ? void 0 : imageItems.features.filter((f) => selectedImageItemObjectIds.includes(f.attributes[objectIdFieldName])).map((f) => f.attributes)
            : (_a = imageItems === null || imageItems === void 0 ? void 0 : imageItems.features.map((f) => f.attributes)) !== null && _a !== void 0 ? _a : [];
        const imageItemOptions = imageItemFeatures.map((f) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: f[objectIdFieldName].toString(), label: `${f[objectIdFieldName]}: ${f.Name}`, selected: f[objectIdFieldName] === inspectImageItemObjectId })));
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-select-block" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.selectedImages, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-select-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "chevron-left", onClick: this.handleSelectPrevImageItem }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", label: strings.selectedImages, onCalciteSelectChange: (event) => {
                const selectedImageItemObjectId = event.currentTarget
                    .selectedOption.value;
                this.handleSelectedImageItemChange(Number(selectedImageItemObjectId));
            } }, imageItemOptions), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "chevron-right", onClick: this.handleSelectNextImageItem })))));
    }
    renderImageItemPreviewView() {
        const { strings, layer, jsapiUrl, inspectImageItemObjectId } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.preview }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-preview-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-item-preview", { jsapiUrl: jsapiUrl, previewLayerUrl: layer.url, previewImageItemObjectId: inspectImageItemObjectId }))));
    }
    renderImageItemInfoTables() {
        const { imageItemInfo } = this;
        const { extent, statistics } = imageItemInfo || {};
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, imageItemInfo ? this.renderImageItemInspectButtonGroup() : null, imageItemInfo ? this.renderImageItemRasterInformationTable() : null, imageItemInfo ? this.renderImageItemRasterMetadataTable() : null, extent ? this.renderImageItemExtentInfoTable() : null, imageItemInfo ? this.renderImageItemSpatialReferenceTable() : null, statistics ? this.renderImageItemStatisticsInfoTable() : null));
    }
    renderImageItemRasterInformationTable() {
        const { strings, imageItemInfo } = this;
        const tableColumns = [
            { accessor: "property", header: strings.property },
            { accessor: "value", header: strings.value }
        ];
        const { bandCount, height, width, pixelType, pixelSize, dataType, colormap } = imageItemInfo;
        const rasterInfoData = [
            { property: strings.columns, value: width },
            { property: strings.rows, value: height },
            { property: strings.bandNumber, value: bandCount },
            { property: strings.cellSizeX, value: pixelSize === null || pixelSize === void 0 ? void 0 : pixelSize.x },
            { property: strings.cellSizeY, value: pixelSize === null || pixelSize === void 0 ? void 0 : pixelSize.y },
            { property: strings.sourceType, value: dataType },
            { property: strings.pixelType, value: pixelType },
            { property: strings.pixelDepth, value: bandCount },
            { property: strings.colormap, value: colormap }
        ].filter((info) => !!info.value);
        const hasRasterInfoData = rasterInfoData.length > 0;
        return (hasRasterInfoData && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.rasterInformation }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-info-table-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-item-info-table", { columns: tableColumns, data: rasterInfoData })))));
    }
    renderImageItemRasterMetadataTable() {
        const { strings, imageItemInfo } = this;
        const tableColumns = [
            { accessor: "property", header: strings.property },
            { accessor: "value", header: strings.value }
        ];
        const { SensorName, ProductName, CloudCover, AcquisitionDate, SunAzimuth, SunElevation, ELLIPSOID } = imageItemInfo.keyProperties || {};
        const formattedDate = AcquisitionDate
            ? `${new Date(AcquisitionDate).toLocaleDateString()} ${new Date(AcquisitionDate).toLocaleTimeString()}`
            : null;
        const rasterMetaData = [
            { property: strings.sensorName, value: SensorName },
            { property: strings.productName, value: ProductName },
            { property: strings.acquisitionDate, value: formattedDate },
            { property: strings.cloudCover, value: CloudCover },
            { property: strings.sunAzimuth, value: SunAzimuth },
            { property: strings.sunElevation, value: SunElevation },
            { property: strings.spheroid, value: ELLIPSOID }
        ].filter((info) => !!info.value);
        const hasRasterMetaData = rasterMetaData.length > 0;
        return (hasRasterMetaData && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.rasterMetadata }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-info-table-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-item-info-table", { columns: tableColumns, data: rasterMetaData })))));
    }
    renderImageItemExtentInfoTable() {
        const { strings, imageItemInfo } = this;
        const tableColumns = [
            { accessor: "property", header: strings.property },
            { accessor: "value", header: strings.value }
        ];
        const { extent } = imageItemInfo;
        const { xmin, xmax, ymin, ymax } = extent;
        const rasterExtentData = [
            { property: strings.top, value: ymax },
            { property: strings.bottom, value: ymin },
            { property: strings.left, value: xmin },
            { property: strings.right, value: xmax }
        ].filter((info) => !!info.value);
        const hasRasterExtentData = rasterExtentData.length > 0;
        return (hasRasterExtentData && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.extent }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-item-info-table", { columns: tableColumns, data: rasterExtentData }))));
    }
    renderImageItemStatisticsInfoTable() {
        const { strings, imageItemInfo } = this;
        const tableColumns = [
            { accessor: "bandName", header: strings.bandName },
            { accessor: "min", header: strings.min },
            { accessor: "max", header: strings.max },
            { accessor: "avg", header: strings.mean },
            { accessor: "stddev", header: strings.std }
        ];
        const { bandInfos, statistics } = imageItemInfo;
        const bandStatsData = bandInfos.map((bandInfo, index) => {
            const bandStats = statistics[index];
            return Object.assign({ bandName: bandInfo.name }, bandStats);
        });
        const hasBandStatsData = bandStatsData.length > 0;
        return (hasBandStatsData && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.statistics }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-info-table-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-item-info-table", { columns: tableColumns, data: bandStatsData })))));
    }
    renderImageItemSpatialReferenceTable() {
        const { strings, imageItemInfo } = this;
        const tableColumns = [
            { accessor: "property", header: strings.property },
            { accessor: "value", header: strings.value }
        ];
        const { keyProperties, spatialReference } = imageItemInfo;
        const spatialReferenceData = [
            { property: strings.projectedCoordinateSystem, value: "" },
            { property: strings.projection, value: "" },
            { property: strings.wkid, value: spatialReference === null || spatialReference === void 0 ? void 0 : spatialReference.wkid },
            { property: strings.datum, value: keyProperties === null || keyProperties === void 0 ? void 0 : keyProperties.DATUM },
            { property: strings.spheroid, value: keyProperties === null || keyProperties === void 0 ? void 0 : keyProperties.ELLIPSOID }
        ].filter((info) => !!info.value);
        const hasValidSpatialReferenceData = spatialReferenceData.length > 0;
        return (hasValidSpatialReferenceData && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { collapsible: true, open: true, heading: strings.spatialReference }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-info-table-wrapper" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-image-item-info-table", { columns: tableColumns, data: spatialReferenceData })))));
    }
    renderImageItemInspectButtonGroup() {
        const { strings } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "image-item-inspect-button-group" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { "aria-label": strings.addLayer, appearance: "transparent", "icon-start": "add-layer", kind: "neutral", scale: "s" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { "aria-label": strings.zoomToItem, appearance: "transparent", "icon-start": "layer-zoom-to", kind: "neutral", scale: "s" })));
    }
    renderPreviewThumbnail(imageItemObjectId) {
        const { layer, modules } = this;
        const { IdentityManager } = modules;
        const layerCredential = IdentityManager.findCredential(layer.url);
        const { token } = layerCredential || {};
        const thumbnailImgSrcStr = `${layer.url}/${imageItemObjectId}/thumbnail${token ? `?token=${token}` : ""}`;
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", { slot: "thumbnail", src: thumbnailImgSrcStr });
    }
    renderFeatureAttributesInImageItemCard(feature) {
        const { imageItemCardDisplayedFieldNames } = this;
        const displayedAttributesList = imageItemCardDisplayedFieldNames.map((field) => {
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("li", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("strong", null, field), `: ${feature.attributes[field]}`));
        });
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("ul", { class: "image-item-card-displayed-field-list" }, displayedAttributesList);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisImageCollectionExplorer.style = arcgisImageCollectionExplorerCss;



//# sourceMappingURL=arcgis-image-collection-explorer.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js":
/*!******************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CSS_UTILITY),
/* harmony export */   a: () => (/* binding */ formatDate),
/* harmony export */   b: () => (/* binding */ formatPlural),
/* harmony export */   f: () => (/* binding */ formatNumber),
/* harmony export */   g: () => (/* binding */ getElementDir),
/* harmony export */   l: () => (/* binding */ languageMap)
/* harmony export */ });
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const languageMap = new Map([
    ["ar", "ar"],
    ["bg", "bg"],
    ["bs", "bs"],
    ["ca", "ca"],
    ["cs", "cs"],
    ["da", "da"],
    ["de", "de"],
    ["el", "el"],
    ["en", "en"],
    ["es", "es"],
    ["et", "et"],
    ["fi", "fi"],
    ["fr", "fr"],
    ["he", "he"],
    ["hr", "hr"],
    ["hu", "hu"],
    ["id", "id"],
    ["it", "it"],
    ["ja", "ja"],
    ["ko", "ko"],
    ["lt", "lt"],
    ["lv", "lv"],
    ["nb", "nb"],
    ["nl", "nl"],
    ["pl", "pl"],
    ["pt-br", "pt-BR"],
    ["pt-pt", "pt-PT"],
    ["ro", "ro"],
    ["ru", "ru"],
    ["sk", "sk"],
    ["sl", "sl"],
    ["sr", "sr"],
    ["sv", "sv"],
    ["th", "th"],
    ["tr", "tr"],
    ["uk", "uk"],
    ["vi", "vi"],
    ["zh-cn", "zh-CN"],
    ["zh-hk", "zh-HK"],
    ["zh-tw", "zh-TW"]
]);
// rtl
function getElementDir(el) {
    return getElementProp(el, "dir", "ltr");
}
function getElementProp(el, prop, value) {
    const closestWithProp = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_1__.c)(el, `[${prop}]`);
    return closestWithProp ? closestWithProp.getAttribute(prop) : value;
}
// css
const CSS_UTILITY = {
    rtl: "arcgis--rtl"
};
async function formatNumber(number, options) {
    const { api, type, places } = options || {};
    if (api === 4) {
        const [intl] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["esri/intl"]);
        const numberFormatIntlOptions = intl.convertNumberFormatToIntlOptions({
            places,
            style: type,
            digitSeparator: true
        });
        return intl.formatNumber(number, Object.assign(Object.assign({}, numberFormatIntlOptions), { style: type }));
    }
    const [dojoNumber] = await (0,_loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_0__.l)(["dojo/number"]);
    return dojoNumber.format(number, {
        type,
        places,
        pattern: options === null || options === void 0 ? void 0 : options.pattern
    });
}
const cache = {};
function formatDate(date) {
    const lang = document.documentElement.lang;
    const dayShortMonthYear = {
        year: "numeric",
        month: "short",
        day: "numeric"
    };
    if (!cache[lang]) {
        cache[lang] = new Intl.DateTimeFormat(document.documentElement.lang, dayShortMonthYear);
    }
    return cache[lang].format(date);
}
function formatPlural(lang, stringObj, number) {
    const singles = ["id", "ja", "ko", "th", "vi", "zh-cn", "zh-hk", "zh-tw"];
    const likeEnglish = [
        "en",
        "ca",
        "da",
        "de",
        "el",
        "es",
        "et",
        "fi",
        "hi",
        "hu",
        "it",
        "nb",
        "nl",
        "pt-pt",
        "sv",
        "tr"
    ];
    const locale = lang !== null && lang !== void 0 ? lang : "en";
    // if the number is one, or it is a "simple" language, return the 1 string
    if (number === 1 || singles.includes(locale)) {
        return stringObj.single.replace("${number}", "1");
    }
    // if the number is not 1 and the language uses the same pluralization strategy as english,
    // return the multiple string
    if (number !== 1 && likeEnglish.includes(locale)) {
        return stringObj.multiple.replace("${number}", `${number}`);
    }
    // if none of the above worked, return the "unknown" string
    return stringObj.unknown.replace("${number}", `${number}`);
}



//# sourceMappingURL=languageUtil-ef0e54b2.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getComponentClosestLanguage),
/* harmony export */   g: () => (/* binding */ getLocaleComponentStrings)
/* harmony export */ });
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




// https://medium.com/stencil-tricks/implementing-internationalisation-i18n-with-stencil-5e6559554117
function getComponentClosestLanguage(element) {
    var _a, _b, _c;
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        // "ru-RU" maps to "ru" use case
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang.slice(0, 2));
        }
        else {
            return "en";
        }
    }
}
function getComponentClosestLanguageIntl(element) {
    var _a, _b, _c;
    // it's OK if we don't have the 4 letter language file for it
    // 4 letter language code needed for formatting numbers
    const closestElement = (_a = (0,_dom_4d367677_js__WEBPACK_IMPORTED_MODULE_0__.c)(element, "[lang]")) !== null && _a !== void 0 ? _a : (_c = (_b = element.shadowRoot) === null || _b === void 0 ? void 0 : _b.ownerDocument) === null || _c === void 0 ? void 0 : _c.documentElement;
    // language set by the calling application or browser. defaults to english.
    const lang = ((closestElement === null || closestElement === void 0 ? void 0 : closestElement.lang) || (navigator === null || navigator === void 0 ? void 0 : navigator.language) || "en").toLowerCase();
    if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang)) {
        return _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.get(lang);
    }
    else {
        if (_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_1__.l.has(lang.slice(0, 2))) {
            // we support the 2 letter coded language
            // e.g. it-CH vs it
            return lang;
        }
        else {
            return "en";
        }
    }
}
function fetchLocaleStringsForComponent(componentName, locale) {
    return new Promise((resolve, reject) => {
        fetch((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_2__.a)(`../arcgis-app-assets/i18n/${componentName}.i18n.${locale}.json`)).then((result) => {
            if (result.ok)
                resolve(result.json());
            else
                reject();
        }, () => reject());
    });
}
const stringCache = {};
function fetchLocaleStringsFromCache(componentName, locale) {
    const id = `${componentName}${locale}`;
    if (!stringCache[id]) {
        stringCache[id] = fetchLocaleStringsForComponent(componentName, locale);
    }
    return stringCache[id];
}
/**
 * Get strings and language codes.
 * This method returns 2 language codes.
 * The first one returns a code that's also supported as a language file.
 * The second one returns a code where there is support for the first 2 letters of the code as part of a language file,
 * but will return the original 4 letter code from the page.
 * E.g. For "it-ch" it will return "it" as the first language code and "it-ch" as the second.
 * The second one is required for esri.intl.setLocale() to get the correct formatting.
 *
 * If a tagName is provided it will overwite the element's tagName
 *
 *  @return [ strings, first language code, second language code]
 */
async function getLocaleComponentStrings(element, tagName) {
    const componentName = tagName || element.tagName.toLowerCase();
    const componentLanguage = getComponentClosestLanguage(element);
    const componentLanguageIntl = getComponentClosestLanguageIntl(element);
    let strings;
    try {
        strings = await fetchLocaleStringsFromCache(componentName, componentLanguage);
    }
    catch (e) {
        console.warn(`no locale for ${componentName} (${componentLanguage}) loading default locale en.`);
        strings = await fetchLocaleStringsFromCache(componentName, "en");
    }
    return [strings, componentLanguage, componentLanguageIntl];
}



//# sourceMappingURL=locale-050b6db9.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy9jaHVua3MvYXJjZ2lzX2FuYWx5c2lzX25vZGVfbW9kdWxlc19hcmNnaXNfYXBwLWNvbXBvbmVudHNfZGlzdF9lc21fYXJjZ2lzLTc4Nzc0NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQzZHO0FBQ3ZDO0FBQ1k7QUFDckI7QUFDcVg7QUFDdlo7QUFDTzs7QUFFbEMsZ0RBQWdELGFBQWEsY0FBYyxnQkFBZ0IsdUJBQXVCLGlCQUFpQixzQkFBc0IsYUFBYSx1QkFBdUIsNEJBQTRCLFdBQVcsYUFBYSxzQkFBc0IsV0FBVyxVQUFVLGdCQUFnQixnQkFBZ0IsaUNBQWlDLGFBQWEsU0FBUyxxQ0FBcUMsWUFBWSxXQUFXLHdDQUF3QyxhQUFhLDhCQUE4QixtQkFBbUIsdUJBQXVCLHFCQUFxQixpQkFBaUIscUJBQXFCLG1EQUFtRCxnQ0FBZ0MsNENBQTRDLHdDQUF3Qyx1QkFBdUIsa0RBQWtELGlDQUFpQyxpQkFBaUIsMkJBQTJCLGFBQWEsbUJBQW1CLGVBQWUseUJBQXlCLGFBQWEsaUJBQWlCLHNDQUFzQyxxQkFBcUIsVUFBVSxTQUFTLHNCQUFzQixtQkFBbUIsbURBQW1ELHdCQUF3QixhQUFhLHNCQUFzQiwrQkFBK0IsY0FBYyxnQkFBZ0Isb0JBQW9CLGFBQWEsOEJBQThCLFNBQVM7O0FBRXAzQztBQUNBO0FBQ0EsUUFBUSxxREFBZ0I7QUFDeEIsc0RBQXNELHFEQUFXO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNEZBQTRGO0FBQ2hIO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixxREFBZTtBQUM5QztBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsaURBQUc7QUFDdkMsdUNBQXVDLHFEQUE0QjtBQUNuRTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMscURBQWlCO0FBQzVELHVDQUF1QyxxREFBcUI7QUFDNUQ7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LGNBQWMsUUFBUSxPQUFPO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsY0FBYyxFQUFFLE9BQU87QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGVBQWUsR0FBRyxrQkFBa0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7O0FBRTRFOztBQUU1RSIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2FyY2dpcy1pbWFnZS1jb2xsZWN0aW9uLWV4cGxvcmVyLmVudHJ5LmpzIiwid2VicGFjazovL2V4Yi1jbGllbnQvLi9leHRlbnNpb25zL3dpZGdldHMvYXJjZ2lzL2FuYWx5c2lzL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2FwcC1jb21wb25lbnRzL2Rpc3QvZXNtL2xhbmd1YWdlVXRpbC1lZjBlNTRiMi5qcyIsIndlYnBhY2s6Ly9leGItY2xpZW50Ly4vZXh0ZW5zaW9ucy93aWRnZXRzL2FyY2dpcy9hbmFseXNpcy9ub2RlX21vZHVsZXMvQGFyY2dpcy9hcHAtY29tcG9uZW50cy9kaXN0L2VzbS9sb2NhbGUtMDUwYjZkYjkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBBbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuICogdjQuMC41OFxuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGMgYXMgY3JlYXRlRXZlbnQsIGgsIEggYXMgSG9zdCwgZCBhcyBnZXRFbGVtZW50IH0gZnJvbSAnLi9pbmRleC1lM2JmN2RhNy5qcyc7XG5pbXBvcnQgeyBnIGFzIGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3MgfSBmcm9tICcuL2xvY2FsZS0wNTBiNmRiOS5qcyc7XG5pbXBvcnQgeyBnIGFzIGdldEVsZW1lbnREaXIsIEMgYXMgQ1NTX1VUSUxJVFkgfSBmcm9tICcuL2xhbmd1YWdlVXRpbC1lZjBlNTRiMi5qcyc7XG5pbXBvcnQgeyBsIGFzIGxvYWRNb2R1bGVzIH0gZnJvbSAnLi9sb2FkTW9kdWxlcy1iNGFjMTI0Ny5qcyc7XG5pbXBvcnQgeyBiIGFzIGJ1aWxkTGF5ZXJRdWVyeSwgQSBhcyBBT0ksIGcgYXMgZ2V0RmlsdGVyZWRWaXNpYmxlSW1hZ2VJdGVtcywgYSBhcyBnZXRJbWFnZUl0ZW1Db3VudCwgYyBhcyBnZXRGaWx0ZXJlZEltYWdlSXRlbXMsIGQgYXMgZ2V0RGVmYXVsdEltYWdlSXRlbUNhcmREaXNwbGF5ZWRGaWVsZHMsIGUgYXMgZ2V0TWluQW5kTWF4VmFsdWVzRm9yTGF5ZXJGaWVsZCwgZiBhcyBnZXRVbmlxdWVWYWx1ZXNGb3JMYXllckZpZWxkLCBpIGFzIGlzQWJvcnRlZEVycm9yLCBOIGFzIE5hdmlnYXRpb25UYWIsIGggYXMgZ2V0U3VwcG9ydGVkTGF5ZXJGaWVsZHMsIGogYXMgZ2V0RGVmYXVsdFNlbGVjdGVkTGF5ZXJGaWVsZCwgayBhcyBpc051bWVyaWNGaWVsZFR5cGUsIGwgYXMgZ2V0Rm9ybWF0dGVkRGF0ZVN0cmluZyB9IGZyb20gJy4vbGF5ZXItOWE3NTkzYWEuanMnO1xuaW1wb3J0ICcuL2RvbS00ZDM2NzY3Ny5qcyc7XG5pbXBvcnQgJy4vZnVuY3Rpb25hbC00NGRlOGZjZi5qcyc7XG5cbmNvbnN0IGFyY2dpc0ltYWdlQ29sbGVjdGlvbkV4cGxvcmVyQ3NzID0gXCI6aG9zdHtkaXNwbGF5OmZsZXg7ZmxleDoxIDEgYXV0bztvdmVyZmxvdzpoaWRkZW59LnN3aXRjaC1idXR0b24td3JhcHBlcntwYWRkaW5nOjAuNXJlbSAwfS5hcHBseS1idXR0b24td3JhcHBlcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uaW1hZ2UtaXRlbS1wcmV2aWV3LXdyYXBwZXJ7d2lkdGg6MTAwJTtoZWlnaHQ6MzAwcHh9LmltYWdlLWl0ZW0tY2FyZC1saXN0e3dpZHRoOjEwMCU7cGFkZGluZzowO292ZXJmbG93LXk6YXV0bztsaXN0LXN0eWxlOm5vbmV9LmltYWdlLWl0ZW0tY2FyZC1jb250ZW50LXdyYXBwZXJ7ZGlzcGxheTpmbGV4O2dhcDoxcmVtfS5pbWFnZS1pdGVtLWNhcmQtY29udGVudC13cmFwcGVyPmltZ3toZWlnaHQ6NzBweDt3aWR0aDo3MHB4fS5pbWFnZS1jb2xsZWN0aW9uLWl0ZW0tY2FyZC1saXN0LWhlYWRlcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47YWxpZ24taXRlbXM6Y2VudGVyfS5pbWFnZS1pdGVtLWNvdW50LWNoaXB7ZGlzcGxheTppbmxpbmUtYmxvY2s7cGFkZGluZzowLjM3NXJlbTtib3JkZXItcmFkaXVzOjk5OTlweDtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWNhbGNpdGUtY29sb3ItZm9yZWdyb3VuZC0zKX0uaW1hZ2UtaXRlbS1jb3VudC1jaGlwLnNlbGVjdGVke2JhY2tncm91bmQtY29sb3I6dmFyKC0tY2FsY2l0ZS1jb2xvci1icmFuZCk7Y29sb3I6dmFyKC0tY2FsY2l0ZS1jb2xvci10ZXh0LWludmVyc2UpfS5pbWFnZS1pdGVtLWNhcmQ6aG92ZXJ7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1jYWxjaXRlLWNvbG9yLXN0YXR1cy1pbmZvKX0uaW1hZ2UtaXRlbS1pbnNwZWN0LWJ1dHRvbi1ncm91cHt0ZXh0LWFsaWduOnN0YXJ0fS5pbWFnZS1pdGVtLXNlbGVjdC13cmFwcGVye2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7cGFkZGluZzowIDJyZW19LmltYWdlLWl0ZW0tc2VsZWN0LWJsb2Nre3BhZGRpbmc6MTBweDtwYWRkaW5nLWJvdHRvbTowfS5pbWFnZS1pdGVtLWNhcmQtZGlzcGxheWVkLWZpZWxkLWxpc3R7bGlzdC1zdHlsZS10eXBlOm5vbmU7cGFkZGluZzowO21hcmdpbjowO3dvcmQtYnJlYWs6YnJlYWstd29yZH0uYW9pLXNlbGVjdC1idXR0b257Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1jYWxjaXRlLWNvbG9yLWJvcmRlci1pbnB1dCl9LmFvaS1zZWxlY3Qtb3B0LXdyYXBwZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uaW1hZ2UtaXRlbS1pbmZvLXRhYmxlLXdyYXBwZXJ7ZGlzcGxheTpibG9jaztvdmVyZmxvdy14OmF1dG99LmRyb3Bkb3duLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47Z2FwOjFyZW19XCI7XG5cbmNvbnN0IEFyY2dpc0ltYWdlQ29sbGVjdGlvbkV4cGxvcmVyID0gY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICAgICAgdGhpcy5hcmNnaXNJbWFnZUl0ZW1FeHBsb3JlckRpc21pc3NlZENoYW5nZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiYXJjZ2lzSW1hZ2VJdGVtRXhwbG9yZXJEaXNtaXNzZWRDaGFuZ2VcIiwgNyk7XG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vXG4gICAgICAgIC8vICBQcml2YXRlIG1ldGhvZHNcbiAgICAgICAgLy9cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgdGhpcy5oYW5kbGVDbG9zZUNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcmNnaXNJbWFnZUl0ZW1FeHBsb3JlckRpc21pc3NlZENoYW5nZS5lbWl0KCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlQWN0aXZlVGFiQ2hhbmdlID0gKGFjdGl2ZVRhYikgPT4ge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVUYWIgPSBhY3RpdmVUYWI7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlSW1hZ2VJdGVtUXVlcnlBcHBsaWVkID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICAgICAgdGhpcy5pc1Nob3dpbmdGaWx0ZXJlZEltYWdlSXRlbVJlc3VsdHNQYW5lID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IHsgdmlldywgbGF5ZXIsIHNlbGVjdGVkQU9JLCBhY3RpdmVRdWVyeUZpZWxkLCBpc092ZXJ2aWV3c0luY2x1ZGVkLCBzZWxlY3RlZFF1ZXJ5RmllbGRWYWx1ZXMgfSA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLmlzUXVlcnlpbmdJbWFnZUl0ZW1zID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJJbWFnZUl0ZW1TZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VJdGVtQ2FyZERpc3BsYXllZEZpZWxkTmFtZXMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGxheWVyUXVlcnkgPSBidWlsZExheWVyUXVlcnkobGF5ZXIsIGFjdGl2ZVF1ZXJ5RmllbGQsIHNlbGVjdGVkUXVlcnlGaWVsZFZhbHVlcywgc2VsZWN0ZWRBT0ksIGlzT3ZlcnZpZXdzSW5jbHVkZWQsIHZpZXcuZXh0ZW50KTtcbiAgICAgICAgICAgIGxldCBpbWFnZUl0ZW1Db3VudDtcbiAgICAgICAgICAgIGxldCBpbWFnZUl0ZW1zO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRBT0kgPT09IEFPSS5WaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlSXRlbXMgPSBhd2FpdCBnZXRGaWx0ZXJlZFZpc2libGVJbWFnZUl0ZW1zKGxheWVyLCB2aWV3LCBsYXllclF1ZXJ5KTtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VJdGVtQ291bnQgPSAoX2IgPSAoX2EgPSBpbWFnZUl0ZW1zID09PSBudWxsIHx8IGltYWdlSXRlbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGltYWdlSXRlbXMuZmVhdHVyZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbWFnZUl0ZW1Db3VudCA9IGF3YWl0IGdldEltYWdlSXRlbUNvdW50KGxheWVyLCBsYXllclF1ZXJ5KTtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VJdGVtcyA9IGF3YWl0IGdldEZpbHRlcmVkSW1hZ2VJdGVtcyhsYXllciwgbGF5ZXJRdWVyeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudG90YWxJbWFnZUl0ZW1Db3VudCA9IGltYWdlSXRlbUNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbEltYWdlSXRlbUNvdW50ID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlSXRlbXMgPSBudWxsO1xuICAgICAgICAgICAgICAgIC8vIHRocm93IG91dCBlcnJvclxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1F1ZXJ5aW5nSW1hZ2VJdGVtcyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGltYWdlSXRlbXMgPT09IG51bGwgfHwgaW1hZ2VJdGVtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW1hZ2VJdGVtcy5mZWF0dXJlcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlSXRlbXMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zcGVjdEltYWdlSXRlbU9iamVjdElkID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvYmplY3RJZEZpZWxkTmFtZSA9IGxheWVyLm9iamVjdElkRmllbGQ7XG4gICAgICAgICAgICBjb25zdCBmaXJzdEltYWdlSXRlbU9iamVjdElkID0gKChfYyA9IHRoaXMuc2VsZWN0ZWRJbWFnZUl0ZW1PYmplY3RJZHMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5sZW5ndGgpID4gMFxuICAgICAgICAgICAgICAgID8gdGhpcy5zZWxlY3RlZEltYWdlSXRlbU9iamVjdElkc1swXVxuICAgICAgICAgICAgICAgIDogKF9kID0gaW1hZ2VJdGVtcy5mZWF0dXJlc1swXSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmF0dHJpYnV0ZXNbb2JqZWN0SWRGaWVsZE5hbWVdO1xuICAgICAgICAgICAgdGhpcy5pbWFnZUl0ZW1zID0gaW1hZ2VJdGVtcztcbiAgICAgICAgICAgIHRoaXMuaW5zcGVjdEltYWdlSXRlbU9iamVjdElkID0gZmlyc3RJbWFnZUl0ZW1PYmplY3RJZDtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRGlzcGxheWVkRmllbGRzSW5JbWFnZUl0ZW1DYXJkQ2hhbmdlKGFjdGl2ZVF1ZXJ5RmllbGQubmFtZSk7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hJbWFnZUl0ZW1JbmZvKGZpcnN0SW1hZ2VJdGVtT2JqZWN0SWQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZVNlbGVjdGVkSW1hZ2VJdGVtQ2hhbmdlID0gKHNlbGVjdGVkSW1hZ2VJdGVtT2JqZWN0SWQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5zcGVjdEltYWdlSXRlbU9iamVjdElkID0gc2VsZWN0ZWRJbWFnZUl0ZW1PYmplY3RJZDtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaEltYWdlSXRlbUluZm8oc2VsZWN0ZWRJbWFnZUl0ZW1PYmplY3RJZCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlU2VsZWN0TmV4dEltYWdlSXRlbSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgc2VsZWN0ZWRJbWFnZUl0ZW1PYmplY3RJZHMsIGluc3BlY3RJbWFnZUl0ZW1PYmplY3RJZCwgaW1hZ2VJdGVtcywgbGF5ZXIgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCBvYmplY3RJZEZpZWxkTmFtZSA9IGxheWVyLm9iamVjdElkRmllbGQ7XG4gICAgICAgICAgICBjb25zdCBpbnNwZWN0SW1hZ2VJdGVtT2JqZWN0SWRzID0gc2VsZWN0ZWRJbWFnZUl0ZW1PYmplY3RJZHMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgID8gc2VsZWN0ZWRJbWFnZUl0ZW1PYmplY3RJZHNcbiAgICAgICAgICAgICAgICA6IGltYWdlSXRlbXMuZmVhdHVyZXMubWFwKChmKSA9PiBmLmF0dHJpYnV0ZXNbb2JqZWN0SWRGaWVsZE5hbWVdKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRPYmplY3RJZEluZGV4ID0gaW5zcGVjdEltYWdlSXRlbU9iamVjdElkcy5maW5kSW5kZXgoKG9pZCkgPT4gb2lkID09PSBpbnNwZWN0SW1hZ2VJdGVtT2JqZWN0SWQpO1xuICAgICAgICAgICAgY29uc3QgbmV3T2JqZWN0SWRJbmRleCA9IGN1cnJlbnRPYmplY3RJZEluZGV4ICsgMSA9PT0gaW5zcGVjdEltYWdlSXRlbU9iamVjdElkcy5sZW5ndGggPyAwIDogY3VycmVudE9iamVjdElkSW5kZXggKyAxO1xuICAgICAgICAgICAgY29uc3QgbmV3SW1hZ2VJdGVtT2JqZWN0SWQgPSBpbnNwZWN0SW1hZ2VJdGVtT2JqZWN0SWRzW25ld09iamVjdElkSW5kZXhdO1xuICAgICAgICAgICAgdGhpcy5pbnNwZWN0SW1hZ2VJdGVtT2JqZWN0SWQgPSBuZXdJbWFnZUl0ZW1PYmplY3RJZDtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaEltYWdlSXRlbUluZm8obmV3SW1hZ2VJdGVtT2JqZWN0SWQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZVNlbGVjdFByZXZJbWFnZUl0ZW0gPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHNlbGVjdGVkSW1hZ2VJdGVtT2JqZWN0SWRzLCBpbnNwZWN0SW1hZ2VJdGVtT2JqZWN0SWQsIGltYWdlSXRlbXMsIGxheWVyIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3Qgb2JqZWN0SWRGaWVsZE5hbWUgPSBsYXllci5vYmplY3RJZEZpZWxkO1xuICAgICAgICAgICAgY29uc3QgaW5zcGVjdFJhc3Rlckl0ZW1PYmplY3RJZHMgPSBzZWxlY3RlZEltYWdlSXRlbU9iamVjdElkcy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgPyBzZWxlY3RlZEltYWdlSXRlbU9iamVjdElkc1xuICAgICAgICAgICAgICAgIDogaW1hZ2VJdGVtcy5mZWF0dXJlcy5tYXAoKGYpID0+IGYuYXR0cmlidXRlc1tvYmplY3RJZEZpZWxkTmFtZV0pO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudE9iamVjdElkSW5kZXggPSBpbnNwZWN0UmFzdGVySXRlbU9iamVjdElkcy5maW5kSW5kZXgoKG9pZCkgPT4gb2lkID09PSBpbnNwZWN0SW1hZ2VJdGVtT2JqZWN0SWQpO1xuICAgICAgICAgICAgY29uc3QgbmV3T2JqZWN0SWRJbmRleCA9IGN1cnJlbnRPYmplY3RJZEluZGV4IC0gMSA8IDBcbiAgICAgICAgICAgICAgICA/IGluc3BlY3RSYXN0ZXJJdGVtT2JqZWN0SWRzLmxlbmd0aCAtIDFcbiAgICAgICAgICAgICAgICA6IGN1cnJlbnRPYmplY3RJZEluZGV4IC0gMTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jhc3Rlckl0ZW1PYmplY3RJZCA9IGluc3BlY3RSYXN0ZXJJdGVtT2JqZWN0SWRzW25ld09iamVjdElkSW5kZXhdO1xuICAgICAgICAgICAgdGhpcy5pbnNwZWN0SW1hZ2VJdGVtT2JqZWN0SWQgPSBuZXdSYXN0ZXJJdGVtT2JqZWN0SWQ7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hJbWFnZUl0ZW1JbmZvKG5ld1Jhc3Rlckl0ZW1PYmplY3RJZCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVmcmVzaEltYWdlSXRlbUluZm8gPSBhc3luYyAoaW1hZ2VJdGVtT2JqZWN0SWQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgbGF5ZXIgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCBpbWFnZUl0ZW1JbmZvID0gYXdhaXQgbGF5ZXIuZ2V0Q2F0YWxvZ0l0ZW1SYXN0ZXJJbmZvKGltYWdlSXRlbU9iamVjdElkKTtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VJdGVtSW5mbyA9IGltYWdlSXRlbUluZm87XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlRGlzcGxheWVkRmllbGRzSW5JbWFnZUl0ZW1DYXJkQ2hhbmdlID0gKGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBpbWFnZUl0ZW1DYXJkRGlzcGxheWVkRmllbGROYW1lcywgbGF5ZXIsIGFjdGl2ZVF1ZXJ5RmllbGQgfSA9IHRoaXM7XG4gICAgICAgICAgICBsZXQgbmV3RGlzcGxheUZpZWxkTmFtZXMgPSBbXTtcbiAgICAgICAgICAgIGlmICghaW1hZ2VJdGVtQ2FyZERpc3BsYXllZEZpZWxkTmFtZXMuaW5jbHVkZXMoZmllbGROYW1lKSkge1xuICAgICAgICAgICAgICAgIG5ld0Rpc3BsYXlGaWVsZE5hbWVzID0gWy4uLmltYWdlSXRlbUNhcmREaXNwbGF5ZWRGaWVsZE5hbWVzLCBmaWVsZE5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdERpc3BsYXlGaWVsZHMgPSBnZXREZWZhdWx0SW1hZ2VJdGVtQ2FyZERpc3BsYXllZEZpZWxkcyhsYXllciwgYWN0aXZlUXVlcnlGaWVsZCk7XG4gICAgICAgICAgICBkZWZhdWx0RGlzcGxheUZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghbmV3RGlzcGxheUZpZWxkTmFtZXMuaW5jbHVkZXMoZmllbGQubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RGlzcGxheUZpZWxkTmFtZXMucHVzaChmaWVsZC5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VJdGVtQ2FyZERpc3BsYXllZEZpZWxkTmFtZXMgPSBuZXdEaXNwbGF5RmllbGROYW1lcztcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVPcGVuQ29uZmlnUmVzdWx0c01vZGFsID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBpc1Nob3dpbmdDb25maWdSZXN1bHRzTW9kYWwgfSA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLmlzU2hvd2luZ0NvbmZpZ1Jlc3VsdHNNb2RhbCA9ICFpc1Nob3dpbmdDb25maWdSZXN1bHRzTW9kYWw7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlSW1hZ2VJdGVtQ2FyZE1vdXNlT3ZlciA9IGFzeW5jIChpbWFnZUl0ZW1HZW9tZXRyeSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyB2aWV3LCBpbWFnZUl0ZW1FeHRlbnRHcmFwaGljLCBpbWFnZUl0ZW1FeHRlbnRHcmFwaGljTGF5ZXIsIG1vZHVsZXMgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IENvbG9yLCBHcmFwaGljLCBHcmFwaGljc0xheWVyLCBTaW1wbGVGaWxsU3ltYm9sIH0gPSBtb2R1bGVzO1xuICAgICAgICAgICAgaWYgKCFpbWFnZUl0ZW1FeHRlbnRHcmFwaGljTGF5ZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBncmFwaGljc0xheWVyID0gbmV3IEdyYXBoaWNzTGF5ZXIoKTtcbiAgICAgICAgICAgICAgICB2aWV3Lm1hcC5hZGQoZ3JhcGhpY3NMYXllcik7XG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZUl0ZW1FeHRlbnRHcmFwaGljTGF5ZXIgPSBncmFwaGljc0xheWVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaW1hZ2VJdGVtRXh0ZW50R3JhcGhpYykge1xuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VJdGVtRXh0ZW50R3JhcGhpY0xheWVyLnJlbW92ZUFsbCgpO1xuICAgICAgICAgICAgICAgIGltYWdlSXRlbUV4dGVudEdyYXBoaWMuZ2VvbWV0cnkgPSBpbWFnZUl0ZW1HZW9tZXRyeTtcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlSXRlbUV4dGVudEdyYXBoaWNMYXllci5hZGQoaW1hZ2VJdGVtRXh0ZW50R3JhcGhpYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzeW1ib2wgPSBuZXcgU2ltcGxlRmlsbFN5bWJvbCh7XG4gICAgICAgICAgICAgICAgICAgIG91dGxpbmU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBuZXcgQ29sb3IoWzIxNCwgMTM3LCAxNl0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IG5ldyBDb2xvcihbMjQ5LCAyMzEsIDE1OSwgMC41XSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbWFnZUl0ZW1FeHRHcmFwaGljID0gbmV3IEdyYXBoaWMoeyBnZW9tZXRyeTogaW1hZ2VJdGVtR2VvbWV0cnksIHN5bWJvbCB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlSXRlbUV4dGVudEdyYXBoaWMgPSBpbWFnZUl0ZW1FeHRHcmFwaGljO1xuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VJdGVtRXh0ZW50R3JhcGhpY0xheWVyLmFkZChpbWFnZUl0ZW1FeHRHcmFwaGljKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVJbWFnZUl0ZW1DYXJkTW91c2VPdXQgPSAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB0aGlzLmltYWdlSXRlbUV4dGVudEdyYXBoaWMgPSBudWxsO1xuICAgICAgICAgICAgKF9hID0gdGhpcy5pbWFnZUl0ZW1FeHRlbnRHcmFwaGljTGF5ZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmVBbGwoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5nZXRMYXllckF0dHJpYnV0ZVZhbHVlcyA9IGFzeW5jIChmaWVsZE5hbWUpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICBjb25zdCB7IGxheWVyLCB2aWV3LCBzZWxlY3RlZEFPSSwgZmV0Y2hBYm9ydENvbnRyb2xsZXIgfSA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoZmV0Y2hBYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBmZXRjaEFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHVuaXF1ZVZhbHMgPSBbXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mZXRjaEFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUXVlcnlpbmdGaWVsZFZhbHVlcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZFZhbHVlc0ZvcklucHV0ID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFF1ZXJ5RmllbGRWYWx1ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBjb25zdCBbbWluVmFsdWUsIG1heFZhbHVlXSA9IGF3YWl0IGdldE1pbkFuZE1heFZhbHVlc0ZvckxheWVyRmllbGQobGF5ZXIsIGZpZWxkTmFtZSwgc2VsZWN0ZWRBT0ksIHZpZXcuZXh0ZW50LCAoX2EgPSB0aGlzLmZldGNoQWJvcnRDb250cm9sbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2lnbmFsKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkTWluTWF4VmFsdWVzRm9ySW5wdXQgPSBbbWluVmFsdWUsIG1heFZhbHVlXTtcbiAgICAgICAgICAgICAgICB1bmlxdWVWYWxzID0gYXdhaXQgZ2V0VW5pcXVlVmFsdWVzRm9yTGF5ZXJGaWVsZChsYXllciwgZmllbGROYW1lLCBzZWxlY3RlZEFPSSwgdmlldy5leHRlbnQsIChfYiA9IHRoaXMuZmV0Y2hBYm9ydENvbnRyb2xsZXIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zaWduYWwpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNRdWVyeWluZ0ZpZWxkVmFsdWVzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgLy8gYGFib3J0IGVycm9yYCBpbmRpY2F0ZXMgdGhlcmUgaXMgYW5vdGhlciBvbmdvaW5nIHJlcXVlc3RcbiAgICAgICAgICAgICAgICB0aGlzLmlzUXVlcnlpbmdGaWVsZFZhbHVlcyA9IGlzQWJvcnRlZEVycm9yKGVycikgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZpZWxkVmFsdWVzRm9ySW5wdXQgPSB1bmlxdWVWYWxzO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNsZWFySW1hZ2VJdGVtU2VsZWN0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEltYWdlSXRlbU9iamVjdElkcyA9IFtdO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNob3dUb29sdGlwID0gKHByb3BzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRpc21pc3NUb29sdGlwKCk7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYWxjaXRlLXRvb2x0aXBcIik7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXBFbC5wbGFjZW1lbnQgPSBcImF1dG9cIjtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcEVsLnJlZmVyZW5jZUVsZW1lbnQgPSBwcm9wcy5yZWZlcmVuY2VFbGVtZW50O1xuICAgICAgICAgICAgdGhpcy50b29sdGlwRWwub3ZlcmxheVBvc2l0aW9uaW5nID0gXCJmaXhlZFwiO1xuICAgICAgICAgICAgdGhpcy50b29sdGlwRWwuaW5uZXJIVE1MID0gcHJvcHMuaW5uZXJIVE1MO1xuICAgICAgICAgICAgdGhpcy50b29sdGlwRWwub3BlbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmhvc3RFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy50b29sdGlwRWwpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRpc21pc3NUb29sdGlwID0gKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgaWYgKChfYSA9IHRoaXMudG9vbHRpcEVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy50b29sdGlwRWwpO1xuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcEVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmpzYXBpVXJsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBvcnRhbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYXllciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy52aWV3ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmFjdGl2ZVRhYiA9IE5hdmlnYXRpb25UYWIuU2VsZWN0O1xuICAgICAgICB0aGlzLmFjdGl2ZVF1ZXJ5RmllbGQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRBT0kgPSBBT0kuVmlzaWJsZTtcbiAgICAgICAgdGhpcy50b3RhbEltYWdlSXRlbUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5pbWFnZUl0ZW1zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNlbGVjdGVkSW1hZ2VJdGVtT2JqZWN0SWRzID0gW107XG4gICAgICAgIHRoaXMuaW5zcGVjdEltYWdlSXRlbU9iamVjdElkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmltYWdlSXRlbUluZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaW1hZ2VJdGVtQ2FyZERpc3BsYXllZEZpZWxkTmFtZXMgPSBbXTtcbiAgICAgICAgdGhpcy5pc1Nob3dpbmdGaWx0ZXJlZEltYWdlSXRlbVJlc3VsdHNQYW5lID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTaG93aW5nQ29uZmlnUmVzdWx0c01vZGFsID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTaG93aW5nVGh1bWJuYWlscyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzT3ZlcnZpZXdzSW5jbHVkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1F1ZXJ5aW5nSW1hZ2VJdGVtcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzUXVlcnlpbmdGaWVsZFZhbHVlcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNlbGVjdGVkUXVlcnlGaWVsZFZhbHVlcyA9IFtdO1xuICAgICAgICB0aGlzLmZpZWxkVmFsdWVzRm9ySW5wdXQgPSBbXTtcbiAgICAgICAgdGhpcy5maWVsZE1pbk1heFZhbHVlc0ZvcklucHV0ID0gW107XG4gICAgICAgIHRoaXMuaXNSYW5nZVZhbHVlTW9kZVNlbGVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaGFuZGxlQ29uZmlnQ2FyZFJlc3VsdHNNb2RhbENsb3NlZCgpIHtcbiAgICAgICAgdGhpcy5pc1Nob3dpbmdDb25maWdSZXN1bHRzTW9kYWwgPSBmYWxzZTtcbiAgICB9XG4gICAgaGFuZGxlQ29uZmlnQ2FyZFJlc3VsdHNNb2RhbFNhdmVkKGUpIHtcbiAgICAgICAgY29uc3QgeyBzZWxlY3RlZEZpZWxkTmFtZXMsIGlzU2hvd2luZ1RodW1ibmFpbHMgfSA9IGUuZGV0YWlsO1xuICAgICAgICB0aGlzLmlzU2hvd2luZ1RodW1ibmFpbHMgPSBpc1Nob3dpbmdUaHVtYm5haWxzO1xuICAgICAgICB0aGlzLmltYWdlSXRlbUNhcmREaXNwbGF5ZWRGaWVsZE5hbWVzID0gc2VsZWN0ZWRGaWVsZE5hbWVzO1xuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgcHVibGljIGNhbGxzXG4gICAgLy9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgYXN5bmMgc2V0Rm9jdXMoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdGhpcy5yZWZDbG9zZUJ1dHRvbk5vZGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRGb2N1cygpO1xuICAgIH1cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgTGlmZWN5Y2xlXG4gICAgLy9cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgYXN5bmMgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgW3RoaXMuc3RyaW5nc10gPSBhd2FpdCBnZXRMb2NhbGVDb21wb25lbnRTdHJpbmdzKHRoaXMuaG9zdEVsZW1lbnQpO1xuICAgICAgICBjb25zdCBbQ29sb3IsIElkZW50aXR5TWFuYWdlciwgR3JhcGhpYywgR3JhcGhpY3NMYXllciwgU2ltcGxlRmlsbFN5bWJvbF0gPSBhd2FpdCBsb2FkTW9kdWxlcyhbXG4gICAgICAgICAgICBcImVzcmkvQ29sb3JcIixcbiAgICAgICAgICAgIFwiZXNyaS9pZGVudGl0eS9JZGVudGl0eU1hbmFnZXJcIixcbiAgICAgICAgICAgIFwiZXNyaS9HcmFwaGljXCIsXG4gICAgICAgICAgICBcImVzcmkvbGF5ZXJzL0dyYXBoaWNzTGF5ZXJcIixcbiAgICAgICAgICAgIFwiZXNyaS9zeW1ib2xzL1NpbXBsZUZpbGxTeW1ib2xcIlxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy5tb2R1bGVzID0ge1xuICAgICAgICAgICAgQ29sb3IsXG4gICAgICAgICAgICBJZGVudGl0eU1hbmFnZXIsXG4gICAgICAgICAgICBHcmFwaGljLFxuICAgICAgICAgICAgR3JhcGhpY3NMYXllcixcbiAgICAgICAgICAgIFNpbXBsZUZpbGxTeW1ib2xcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3VwcG9ydGVkTGF5ZXJGaWVsZHMgPSBnZXRTdXBwb3J0ZWRMYXllckZpZWxkcygoX2EgPSB0aGlzLmxheWVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmllbGRzKTtcbiAgICAgICAgY29uc3QgZGVmYXVsdEZpZWxkID0gZ2V0RGVmYXVsdFNlbGVjdGVkTGF5ZXJGaWVsZChzdXBwb3J0ZWRMYXllckZpZWxkcyk7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkRmllbGQgPSB0aGlzLmFjdGl2ZVF1ZXJ5RmllbGQgfHwgZGVmYXVsdEZpZWxkO1xuICAgICAgICB0aGlzLmFjdGl2ZVF1ZXJ5RmllbGQgPSBzZWxlY3RlZEZpZWxkO1xuICAgICAgICB0aGlzLmdldExheWVyQXR0cmlidXRlVmFsdWVzKHNlbGVjdGVkRmllbGQubmFtZSk7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy9cbiAgICAvLyAgUmVuZGVyIG1ldGhvZHNcbiAgICAvL1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGFjdGl2ZVRhYiwgc3RyaW5ncywgaW5zcGVjdEltYWdlSXRlbU9iamVjdElkLCBpbWFnZUl0ZW1JbmZvLCBpbWFnZUl0ZW1DYXJkRGlzcGxheWVkRmllbGROYW1lcywgaXNTaG93aW5nRmlsdGVyZWRJbWFnZUl0ZW1SZXN1bHRzUGFuZSwgaXNTaG93aW5nVGh1bWJuYWlscywgbGF5ZXIgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHJ0bCA9IGdldEVsZW1lbnREaXIodGhpcy5ob3N0RWxlbWVudCkgPT09IFwicnRsXCI7XG4gICAgICAgIGNvbnN0IGxvYWRpbmcgPSAhKGxheWVyID09PSBudWxsIHx8IGxheWVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsYXllci5sb2FkZWQpO1xuICAgICAgICByZXR1cm4gKGgoSG9zdCwgeyBjbGFzczogXCJjYWxjaXRlLW1hdGNoLWhlaWdodFwiIH0sIGgoXCJjYWxjaXRlLXBhbmVsXCIsIHsgbG9hZGluZzogbG9hZGluZywgaGVhZGluZzogc3RyaW5ncy5pbWFnZUNvbGxlY3Rpb25FeHBsb3JlciwgY2xhc3M6IHtcbiAgICAgICAgICAgICAgICBwYW5lbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBbQ1NTX1VUSUxJVFkucnRsXTogcnRsXG4gICAgICAgICAgICB9IH0sIHRoaXMucmVuZGVyQ2xvc2UoKSwgdGhpcy5yZW5kZXJBY3Rpb25Hcm91cCgpLCBhY3RpdmVUYWIgPT09IE5hdmlnYXRpb25UYWIuU2VsZWN0ICYmIChoKFwiZGl2XCIsIG51bGwsIHRoaXMucmVuZGVyU2VsZWN0SW5wdXQoKSwgaXNTaG93aW5nRmlsdGVyZWRJbWFnZUl0ZW1SZXN1bHRzUGFuZSAmJiB0aGlzLnJlbmRlclNlbGVjdFJlc3VsdHMoKSwgaChcImFyY2dpcy1jb25maWctaW1hZ2UtaXRlbS1jYXJkLXJlc3VsdHMtbW9kYWxcIiwgeyBvcGVuOiB0aGlzLmlzU2hvd2luZ0NvbmZpZ1Jlc3VsdHNNb2RhbCwgZmllbGRzOiBsYXllci5maWVsZHMsIHByZVNlbGVjdGVkRmllbGROYW1lczogaW1hZ2VJdGVtQ2FyZERpc3BsYXllZEZpZWxkTmFtZXMsIGlzU2hvd2luZ1RodW1ibmFpbHM6IGlzU2hvd2luZ1RodW1ibmFpbHMgfSkpKSwgYWN0aXZlVGFiID09PSBOYXZpZ2F0aW9uVGFiLkluc3BlY3QgJiZcbiAgICAgICAgICAgIChpbnNwZWN0SW1hZ2VJdGVtT2JqZWN0SWQgJiYgaW5zcGVjdEltYWdlSXRlbU9iamVjdElkID4gMCA/IChoKFwiZGl2XCIsIG51bGwsIHRoaXMucmVuZGVySW1hZ2VJdGVtU2VsZWN0RHJvcGRvd24oKSwgdGhpcy5yZW5kZXJJbWFnZUl0ZW1QcmV2aWV3VmlldygpLCBpbWFnZUl0ZW1JbmZvICYmIHRoaXMucmVuZGVySW1hZ2VJdGVtSW5mb1RhYmxlcygpKSkgOiAoaChcImRpdlwiLCBudWxsLCBzdHJpbmdzLm5vU2VsZWN0ZWRJdGVtVG9JbnNwZWN0Q29hY2hNZXNzYWdlKSkpKSkpO1xuICAgIH1cbiAgICByZW5kZXJDbG9zZSgpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGgoXCJjYWxjaXRlLWFjdGlvblwiLCB7IHRleHQ6IHN0cmluZ3MuY2xvc2UsIGljb246IFwieFwiLCBzbG90OiBcImhlYWRlci1hY3Rpb25zLWVuZFwiLCBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsb3NlQ2xpY2ssIHJlZjogKG5vZGUpID0+ICh0aGlzLnJlZkNsb3NlQnV0dG9uTm9kZSA9IG5vZGUpIH0pKTtcbiAgICB9XG4gICAgcmVuZGVyQWN0aW9uR3JvdXAoKSB7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncywgYWN0aXZlVGFiIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGgoXCJjYWxjaXRlLWFjdGlvbi1ncm91cFwiLCB7IGxheW91dDogXCJncmlkXCIsIHNjYWxlOiBcImxcIiwgY29sdW1uczogMiB9LCBoKFwiY2FsY2l0ZS1hY3Rpb25cIiwgeyBcImRhdGEtbGFiZWxcIjogTmF2aWdhdGlvblRhYi5TZWxlY3QsIGFjdGl2ZTogYWN0aXZlVGFiID09PSBOYXZpZ2F0aW9uVGFiLlNlbGVjdCwgdGV4dDogc3RyaW5ncy5zZWxlY3QsIHRleHRFbmFibGVkOiB0cnVlLCBhbGlnbm1lbnQ6IFwiY2VudGVyXCIsIG9uQ2xpY2s6ICgpID0+IHRoaXMuaGFuZGxlQWN0aXZlVGFiQ2hhbmdlKE5hdmlnYXRpb25UYWIuU2VsZWN0KSB9KSwgaChcImNhbGNpdGUtYWN0aW9uXCIsIHsgXCJkYXRhLWxhYmVsXCI6IE5hdmlnYXRpb25UYWIuSW5zcGVjdCwgYWN0aXZlOiBhY3RpdmVUYWIgPT09IE5hdmlnYXRpb25UYWIuSW5zcGVjdCwgdGV4dDogc3RyaW5ncy5pbnNwZWN0LCB0ZXh0RW5hYmxlZDogdHJ1ZSwgYWxpZ25tZW50OiBcImNlbnRlclwiLCBvbkNsaWNrOiAoKSA9PiB0aGlzLmhhbmRsZUFjdGl2ZVRhYkNoYW5nZShOYXZpZ2F0aW9uVGFiLkluc3BlY3QpIH0pKSk7XG4gICAgfVxuICAgIHJlbmRlclNlbGVjdElucHV0KCkge1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAoaChcImNhbGNpdGUtYmxvY2tcIiwgeyBjb2xsYXBzaWJsZTogdHJ1ZSwgaGVhZGluZzogc3RyaW5ncy5maWx0ZXJzLCBvcGVuOiB0cnVlIH0sIGgoXCJkaXZcIiwgbnVsbCwgdGhpcy5yZW5kZXJBT0lTZWxlY3REcm9wZG93bigpLCB0aGlzLnJlbmRlckF0dHJpYnV0ZVNlbGVjdERyb3Bkb3duKCksIHRoaXMucmVuZGVyQXR0cmlidXRlSW5wdXRGaWVsZCgpLCB0aGlzLnJlbmRlckluY2x1ZGVPdmVydmlld1N3aXRjaEJ1dHRvbigpLCB0aGlzLnJlbmRlckFwcGx5QnV0dG9uKCkpKSk7XG4gICAgfVxuICAgIHJlbmRlckFPSVNlbGVjdERyb3Bkb3duKCkge1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MsIHNlbGVjdGVkQU9JIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBhb2lPcHRpb25zID0gW1xuICAgICAgICAgICAgeyBuYW1lOiBBT0kuVmlzaWJsZSwgbGFiZWw6IHN0cmluZ3MudmlzaWJsZSwgZGVzY3JpcHRpb246IHN0cmluZ3MudmlzaWJsZURlc2MgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBBT0kuRGlzcGxheUV4dGVudCxcbiAgICAgICAgICAgICAgICBsYWJlbDogc3RyaW5ncy5kaXNwbGF5RXh0ZW50LFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmdzLmRpc3BsYXlFeHRlbnREZXNjXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBuYW1lOiBBT0kuQWxsLCBsYWJlbDogc3RyaW5ncy5hbGwsIGRlc2NyaXB0aW9uOiBzdHJpbmdzLmFsbERlc2MgfVxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBzZWxlY3RlZEFPSU9wdCA9IGFvaU9wdGlvbnMuZmluZCgob3B0KSA9PiBvcHQubmFtZSA9PT0gc2VsZWN0ZWRBT0kpO1xuICAgICAgICBjb25zdCBhb2lEcm9wZG93bkl0ZW1zID0gYW9pT3B0aW9ucy5tYXAoKG9wdCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChoKFwiY2FsY2l0ZS1kcm9wZG93bi1pdGVtXCIsIHsgXCJkYXRhLXZhbHVlXCI6IG9wdC5uYW1lLCBzZWxlY3RlZDogb3B0Lm5hbWUgPT09IHNlbGVjdGVkQU9JT3B0Lm5hbWUgfSwgaChcInN0cm9uZ1wiLCBudWxsLCBvcHQubGFiZWwpLCBoKFwiZGl2XCIsIG51bGwsIG9wdC5kZXNjcmlwdGlvbikpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoaChcImNhbGNpdGUtbGFiZWxcIiwgbnVsbCwgc3RyaW5ncy5hcmVhT2ZJbnRlcmVzdCwgaChcImNhbGNpdGUtZHJvcGRvd25cIiwgeyB3aWR0aFNjYWxlOiBcIm1cIiwgcGxhY2VtZW50OiBcImJvdHRvbVwiLCBvbkNhbGNpdGVEcm9wZG93blNlbGVjdDogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICBjb25zdCBkcm9wZG93biA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRBT0lPcHQgPSAoX2IgPSAoX2EgPSBkcm9wZG93biA9PT0gbnVsbCB8fCBkcm9wZG93biA9PT0gdm9pZCAwID8gdm9pZCAwIDogZHJvcGRvd24uc2VsZWN0ZWRJdGVtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hWzBdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZ2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkQU9JID0gc2VsZWN0ZWRBT0lPcHQ7XG4gICAgICAgICAgICB9IH0sIGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IGNsYXNzOiBcImFvaS1zZWxlY3QtYnV0dG9uXCIsIHNsb3Q6IFwidHJpZ2dlclwiLCBhbGlnbm1lbnQ6IFwic3BhY2UtYmV0d2VlblwiLCBcImljb24tZW5kXCI6IFwiY2hldnJvbi1kb3duXCIsIGFwcGVhcmFuY2U6IFwidHJhbnNwYXJlbnRcIiwga2luZDogXCJuZXV0cmFsXCIsIHdpZHRoOiBcImZ1bGxcIiB9LCBzZWxlY3RlZEFPSU9wdC5sYWJlbCksIGgoXCJjYWxjaXRlLWRyb3Bkb3duLWdyb3VwXCIsIG51bGwsIGFvaURyb3Bkb3duSXRlbXMpKSkpO1xuICAgIH1cbiAgICByZW5kZXJBdHRyaWJ1dGVTZWxlY3REcm9wZG93bigpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzLCBhY3RpdmVRdWVyeUZpZWxkLCBsYXllciB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc3VwcG9ydGVkTGF5ZXJGaWVsZHMgPSBnZXRTdXBwb3J0ZWRMYXllckZpZWxkcyhsYXllciA9PT0gbnVsbCB8fCBsYXllciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGF5ZXIuZmllbGRzKTtcbiAgICAgICAgY29uc3QgbGF5ZXJBdHRyaWJ1dGVPcHRpb25zID0gc3VwcG9ydGVkTGF5ZXJGaWVsZHMubWFwKChmaWVsZCkgPT4gKGgoXCJjYWxjaXRlLW9wdGlvblwiLCB7IHZhbHVlOiBmaWVsZC5uYW1lLCBsYWJlbDogZmllbGQuYWxpYXMsIHNlbGVjdGVkOiBmaWVsZC5uYW1lID09PSBhY3RpdmVRdWVyeUZpZWxkLm5hbWUgfSkpKTtcbiAgICAgICAgcmV0dXJuIChoKFwiY2FsY2l0ZS1sYWJlbFwiLCBudWxsLCBzdHJpbmdzLmF0dHJpYnV0ZSwgaChcImNhbGNpdGUtc2VsZWN0XCIsIHsgbGFiZWw6IHN0cmluZ3MuYXR0cmlidXRlLCBvbkNhbGNpdGVTZWxlY3RDaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkRmllbGROYW1lID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgICAgICAgICAgICAgICAuc2VsZWN0ZWRPcHRpb24udmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVRdWVyeUZpZWxkID0gc3VwcG9ydGVkTGF5ZXJGaWVsZHMuZmluZCgoZikgPT4gZi5uYW1lID09PSBzZWxlY3RlZEZpZWxkTmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRMYXllckF0dHJpYnV0ZVZhbHVlcyhzZWxlY3RlZEZpZWxkTmFtZSk7XG4gICAgICAgICAgICB9IH0sIGxheWVyQXR0cmlidXRlT3B0aW9ucykpKTtcbiAgICB9XG4gICAgcmVuZGVyQXR0cmlidXRlSW5wdXRGaWVsZCgpIHtcbiAgICAgICAgY29uc3QgeyBhY3RpdmVRdWVyeUZpZWxkIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBmaWVsZFR5cGUgPSBhY3RpdmVRdWVyeUZpZWxkLnR5cGU7XG4gICAgICAgIGlmIChpc051bWVyaWNGaWVsZFR5cGUoZmllbGRUeXBlKSB8fCBmaWVsZFR5cGUgPT09IFwiZGF0ZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJBdHRyaWJ1dGVTbGlkZXJJbnB1dCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlckF0dHJpYnV0ZURyb3Bkb3duSW5wdXQoKTtcbiAgICB9XG4gICAgcmVuZGVyU2xpZGVyU2VsZWN0ZWRWYWxzKCkge1xuICAgICAgICBjb25zdCB7IHNlbGVjdGVkUXVlcnlGaWVsZFZhbHVlcywgZmllbGRNaW5NYXhWYWx1ZXNGb3JJbnB1dCwgYWN0aXZlUXVlcnlGaWVsZCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgcmFuZ2VWYWxzID0gc2VsZWN0ZWRRdWVyeUZpZWxkVmFsdWVzLmxlbmd0aCA+IDAgPyBzZWxlY3RlZFF1ZXJ5RmllbGRWYWx1ZXMgOiBmaWVsZE1pbk1heFZhbHVlc0ZvcklucHV0O1xuICAgICAgICBsZXQgc3RhcnRWYWw7XG4gICAgICAgIGxldCBlbmRWYWw7XG4gICAgICAgIGlmIChyYW5nZVZhbHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICBbc3RhcnRWYWwsIGVuZFZhbF0gPSByYW5nZVZhbHM7XG4gICAgICAgICAgICBpZiAoYWN0aXZlUXVlcnlGaWVsZC50eXBlID09PSBcImRhdGVcIikge1xuICAgICAgICAgICAgICAgIHN0YXJ0VmFsID0gZ2V0Rm9ybWF0dGVkRGF0ZVN0cmluZyhzdGFydFZhbCk7XG4gICAgICAgICAgICAgICAgZW5kVmFsID0gZ2V0Rm9ybWF0dGVkRGF0ZVN0cmluZyhlbmRWYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGgoXCJkaXZcIiwgbnVsbCwgYCR7c3RhcnRWYWx9IC0gJHtlbmRWYWx9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhbmdlVmFscy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIFtzdGFydFZhbF0gPSByYW5nZVZhbHM7XG4gICAgICAgICAgICBpZiAoYWN0aXZlUXVlcnlGaWVsZC50eXBlID09PSBcImRhdGVcIikge1xuICAgICAgICAgICAgICAgIHN0YXJ0VmFsID0gZ2V0Rm9ybWF0dGVkRGF0ZVN0cmluZyhzdGFydFZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaChcImRpdlwiLCBudWxsLCBgJHtzdGFydFZhbH1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmVuZGVyQXR0cmlidXRlU2xpZGVySW5wdXQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzLCBmaWVsZE1pbk1heFZhbHVlc0ZvcklucHV0LCBpc1JhbmdlVmFsdWVNb2RlU2VsZWN0ZWQgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHZhbGlkTWluTWF4VmFscyA9IGZpZWxkTWluTWF4VmFsdWVzRm9ySW5wdXQuZmlsdGVyKCh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIpO1xuICAgICAgICBjb25zdCBpc1Nob3dpbmdTbGlkZXIgPSB2YWxpZE1pbk1heFZhbHMubGVuZ3RoID09PSAyICYmIHZhbGlkTWluTWF4VmFsc1swXSAhPT0gdmFsaWRNaW5NYXhWYWxzWzFdO1xuICAgICAgICBjb25zdCBpc1Nob3dpbmdEcm9wZG93biA9IHZhbGlkTWluTWF4VmFscy5sZW5ndGggPT09IDIgJiYgdmFsaWRNaW5NYXhWYWxzWzBdID09PSB2YWxpZE1pbk1heFZhbHNbMV07XG4gICAgICAgIGlmIChpc1Nob3dpbmdEcm9wZG93bikge1xuICAgICAgICAgICAgY29uc3QgW3ZhbHVlXSA9IHZhbGlkTWluTWF4VmFscztcbiAgICAgICAgICAgIHJldHVybiAoaChcImNhbGNpdGUtc2VsZWN0XCIsIHsgbGFiZWw6IHN0cmluZ3Muc2VsZWN0LCBvbkNhbGNpdGVTZWxlY3RDaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZE9wdFZhbHVlID0gZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNlbGVjdGVkT3B0aW9uLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUXVlcnlGaWVsZFZhbHVlcyA9IFtzZWxlY3RlZE9wdFZhbHVlXTtcbiAgICAgICAgICAgICAgICB9IH0sIGgoXCJjYWxjaXRlLW9wdGlvblwiLCB7IHZhbHVlOiB2YWx1ZS50b1N0cmluZygpLCBsYWJlbDogdmFsdWUudG9TdHJpbmcoKSwgc2VsZWN0ZWQ6ICgoX2EgPSB0aGlzLnNlbGVjdGVkUXVlcnlGaWVsZFZhbHVlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgPiAwICYmXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLnRvU3RyaW5nKCkgPT09IHRoaXMuc2VsZWN0ZWRRdWVyeUZpZWxkVmFsdWVzWzBdLnRvU3RyaW5nKCkgfSkpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTaG93aW5nU2xpZGVyKSB7XG4gICAgICAgICAgICBjb25zdCBtaW5WYWwgPSB2YWxpZE1pbk1heFZhbHNbMF07XG4gICAgICAgICAgICBjb25zdCBtYXhWYWwgPSB2YWxpZE1pbk1heFZhbHNbMV07XG4gICAgICAgICAgICByZXR1cm4gKGgoXCJkaXZcIiwgbnVsbCwgdGhpcy5yZW5kZXJSYW5nZU1vZGVTd2l0Y2hCdXR0b24oKSwgdGhpcy5yZW5kZXJTbGlkZXJTZWxlY3RlZFZhbHMoKSwgaXNSYW5nZVZhbHVlTW9kZVNlbGVjdGVkID8gKGgoXCJjYWxjaXRlLXNsaWRlclwiLCB7IG1pblZhbHVlOiBtaW5WYWwsIG1heFZhbHVlOiBtYXhWYWwsIG1pbjogbWluVmFsLCBtYXg6IG1heFZhbCwgc25hcDogdHJ1ZSwgcHJlY2lzZTogdHJ1ZSwgb25DYWxjaXRlU2xpZGVyQ2hhbmdlOiAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2xpZGVyID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzbGlkZXIudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUXVlcnlGaWVsZFZhbHVlcyA9IFtzbGlkZXIudmFsdWVbMF0sIHNsaWRlci52YWx1ZVsxXV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUXVlcnlGaWVsZFZhbHVlcyA9IFtzbGlkZXIudmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSB9KSkgOiAoaChcImNhbGNpdGUtc2xpZGVyXCIsIHsgdmFsdWU6IHZhbGlkTWluTWF4VmFsc1sxXSwgbWluOiB2YWxpZE1pbk1heFZhbHNbMF0sIG1heDogdmFsaWRNaW5NYXhWYWxzWzFdLCBzbmFwOiB0cnVlLCBwcmVjaXNlOiB0cnVlLCBvbkNhbGNpdGVTbGlkZXJDaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzbGlkZXIgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNsaWRlci52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRRdWVyeUZpZWxkVmFsdWVzID0gW3NsaWRlci52YWx1ZVswXSwgc2xpZGVyLnZhbHVlWzFdXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRRdWVyeUZpZWxkVmFsdWVzID0gW3NsaWRlci52YWx1ZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IH0pKSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbmRlckF0dHJpYnV0ZURyb3Bkb3duSW5wdXQoKSB7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncywgZmllbGRWYWx1ZXNGb3JJbnB1dCwgaXNRdWVyeWluZ0ZpZWxkVmFsdWVzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBmaWVsZFZhbHVlT3B0aW9ucyA9IGZpZWxkVmFsdWVzRm9ySW5wdXQubWFwKCh2YWwpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAoaChcImNhbGNpdGUtb3B0aW9uXCIsIHsgdmFsdWU6IHZhbC50b1N0cmluZygpLCBsYWJlbDogdmFsLnRvU3RyaW5nKCksIHNlbGVjdGVkOiAoKF9hID0gdGhpcy5zZWxlY3RlZFF1ZXJ5RmllbGRWYWx1ZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICB2YWwudG9TdHJpbmcoKSA9PT0gdGhpcy5zZWxlY3RlZFF1ZXJ5RmllbGRWYWx1ZXNbMF0udG9TdHJpbmcoKSB9KSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gKGgoXCJjYWxjaXRlLXNlbGVjdFwiLCB7IGxhYmVsOiBzdHJpbmdzLnNlbGVjdCwgZGlzYWJsZWQ6IGlzUXVlcnlpbmdGaWVsZFZhbHVlcywgd2lkdGg6IFwiZnVsbFwiLCBvbkNhbGNpdGVTZWxlY3RDaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBzZWxlY3RlZFZhbCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuc2VsZWN0ZWRPcHRpb24udmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFF1ZXJ5RmllbGRWYWx1ZXMgPSBbc2VsZWN0ZWRWYWxdO1xuICAgICAgICAgICAgfSB9LCBmaWVsZFZhbHVlT3B0aW9ucykpO1xuICAgIH1cbiAgICByZW5kZXJSYW5nZU1vZGVTd2l0Y2hCdXR0b24oKSB7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncywgaXNSYW5nZVZhbHVlTW9kZVNlbGVjdGVkLCBmaWVsZE1pbk1heFZhbHVlc0ZvcklucHV0IH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczogXCJzd2l0Y2gtYnV0dG9uLXdyYXBwZXJcIiB9LCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCB7IGxheW91dDogXCJpbmxpbmVcIiwgc2NhbGU6IFwibVwiLCBzdHlsZTogeyB3aWR0aDogXCIxMDAlXCIgfSB9LCBzdHJpbmdzLnJhbmdlTW9kZSwgaChcImNhbGNpdGUtYWN0aW9uXCIsIHsgaWNvbjogXCJpbmZvcm1hdGlvblwiLCBzY2FsZTogXCJzXCIsIHRleHQ6IHN0cmluZ3MucmFuZ2VNb2RlLCByZWY6IChub2RlKSA9PiAodGhpcy5yYW5nZU1vZGVIZWxwSWNvbkFjdGlvbkVsID0gbm9kZSksIG9uTW91c2VPdmVyOiAoKSA9PiB0aGlzLnNob3dUb29sdGlwKHtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VFbGVtZW50OiB0aGlzLnJhbmdlTW9kZUhlbHBJY29uQWN0aW9uRWwsXG4gICAgICAgICAgICAgICAgaW5uZXJIVE1MOiBzdHJpbmdzLnJhbmdlTW9kZWxIZWxwTWVzc2FnZVxuICAgICAgICAgICAgfSksIG9uTW91c2VPdXQ6ICgpID0+IHRoaXMuZGlzbWlzc1Rvb2x0aXAoKSwgb25DbGljazogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9LCBpZDogXCJyYW5nZU1vZGVcIiB9KSwgaChcImRpdlwiLCB7IHN0eWxlOiB7IG1hcmdpbklubGluZVN0YXJ0OiBcImF1dG9cIiB9IH0sIGgoXCJjYWxjaXRlLXN3aXRjaFwiLCB7IGNoZWNrZWQ6IGlzUmFuZ2VWYWx1ZU1vZGVTZWxlY3RlZCwgc2NhbGU6IFwibVwiLCBvbkNhbGNpdGVTd2l0Y2hDaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmFuZ2VWYWx1ZU1vZGVTZWxlY3RlZCA9IGNoZWNrZWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWRNaW5NYXhWYWxzID0gZmllbGRNaW5NYXhWYWx1ZXNGb3JJbnB1dC5maWx0ZXIoKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFF1ZXJ5RmllbGRWYWx1ZXMgPSBjaGVja2VkXG4gICAgICAgICAgICAgICAgICAgID8gW3ZhbGlkTWluTWF4VmFsc1swXSwgdmFsaWRNaW5NYXhWYWxzWzFdXVxuICAgICAgICAgICAgICAgICAgICA6IFt2YWxpZE1pbk1heFZhbHNbMF1dO1xuICAgICAgICAgICAgfSB9KSkpKSk7XG4gICAgfVxuICAgIHJlbmRlckluY2x1ZGVPdmVydmlld1N3aXRjaEJ1dHRvbigpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzLCBpc092ZXJ2aWV3c0luY2x1ZGVkIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczogXCJpbmNsdWRlLW92ZXJ2aWV3cy1zd2l0Y2gtYnV0dG9uLXdyYXBwZXJcIiB9LCBoKFwiY2FsY2l0ZS1sYWJlbFwiLCB7IGxheW91dDogXCJpbmxpbmVcIiwgc2NhbGU6IFwibVwiLCBzdHlsZTogeyB3aWR0aDogXCIxMDAlXCIgfSB9LCBzdHJpbmdzLmluY2x1ZGVPdmVydmlld3MsIGgoXCJjYWxjaXRlLWFjdGlvblwiLCB7IGljb246IFwiaW5mb3JtYXRpb25cIiwgc2NhbGU6IFwic1wiLCB0ZXh0OiBzdHJpbmdzLmluY2x1ZGVPdmVydmlld3NIZWxwTWVzc2FnZSwgcmVmOiAobm9kZSkgPT4gKHRoaXMuaXNJbmNsdWRlT3ZlcnZpZXdzSGVscEljb25BY3Rpb25FbCA9IG5vZGUpLCBvbk1vdXNlT3ZlcjogKCkgPT4gdGhpcy5zaG93VG9vbHRpcCh7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlRWxlbWVudDogdGhpcy5pc0luY2x1ZGVPdmVydmlld3NIZWxwSWNvbkFjdGlvbkVsLFxuICAgICAgICAgICAgICAgIGlubmVySFRNTDogc3RyaW5ncy5pbmNsdWRlT3ZlcnZpZXdzSGVscE1lc3NhZ2VcbiAgICAgICAgICAgIH0pLCBvbk1vdXNlT3V0OiAoKSA9PiB0aGlzLmRpc21pc3NUb29sdGlwKCksIG9uQ2xpY2s6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfSwgaWQ6IFwiaW5jbHVkZU92ZXJ2aWV3c1wiIH0pLCBoKFwiZGl2XCIsIHsgc3R5bGU6IHsgbWFyZ2luSW5saW5lU3RhcnQ6IFwiYXV0b1wiIH0gfSwgaChcImNhbGNpdGUtc3dpdGNoXCIsIHsgY2hlY2tlZDogaXNPdmVydmlld3NJbmNsdWRlZCwgc2NhbGU6IFwibVwiLCBvbkNhbGNpdGVTd2l0Y2hDaGFuZ2U6IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcbiAgICAgICAgICAgICAgICB0aGlzLmlzT3ZlcnZpZXdzSW5jbHVkZWQgPSBjaGVja2VkO1xuICAgICAgICAgICAgfSB9KSkpKSk7XG4gICAgfVxuICAgIHJlbmRlckFwcGx5QnV0dG9uKCkge1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MsIGlzUXVlcnlpbmdGaWVsZFZhbHVlcywgaXNRdWVyeWluZ0ltYWdlSXRlbXMgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImFwcGx5LWJ1dHRvbi13cmFwcGVyXCIgfSwgaChcImNhbGNpdGUtYnV0dG9uXCIsIHsgbGFiZWw6IHN0cmluZ3MuYXBwbHksIG9uQ2xpY2s6IHRoaXMuaGFuZGxlSW1hZ2VJdGVtUXVlcnlBcHBsaWVkLCBhcHBlYXJhbmNlOiBcInNvbGlkXCIsIHdpZHRoOiBcImhhbGZcIiwgZGlzYWJsZWQ6IGlzUXVlcnlpbmdGaWVsZFZhbHVlcyB8fCBpc1F1ZXJ5aW5nSW1hZ2VJdGVtcyB9LCBzdHJpbmdzLmFwcGx5KSkpO1xuICAgIH1cbiAgICByZW5kZXJTZWxlY3RSZXN1bHRzKCkge1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MsIGlzUXVlcnlpbmdJbWFnZUl0ZW1zLCB0b3RhbEltYWdlSXRlbUNvdW50LCBpbWFnZUl0ZW1zIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGgoXCJjYWxjaXRlLWJsb2NrXCIsIHsgY29sbGFwc2libGU6IHRydWUsIG9wZW46IHRydWUsIGhlYWRpbmc6IHN0cmluZ3MucmVzdWx0cyB9LCBpc1F1ZXJ5aW5nSW1hZ2VJdGVtcyA/IChoKFwiY2FsY2l0ZS1sb2FkZXJcIiwgeyBsYWJlbDogc3RyaW5ncy5sb2FkaW5nLCBzY2FsZTogXCJtXCIgfSkpIDogKGgoXCJkaXZcIiwgbnVsbCwgISh0b3RhbEltYWdlSXRlbUNvdW50ID4gMCkgJiYgaChcImRpdlwiLCBudWxsLCBzdHJpbmdzLmVtcHR5TGlzdCksIHRvdGFsSW1hZ2VJdGVtQ291bnQgPiAwID8gdGhpcy5yZW5kZXJJbWFnZUl0ZW1MaXN0QnV0dG9uR3JvdXAoKSA6IG51bGwsIGltYWdlSXRlbXMgPyB0aGlzLnJlbmRlckltYWdlSXRlbUNhcmRMaXN0KCkgOiBudWxsKSkpKTtcbiAgICB9XG4gICAgcmVuZGVyU2VsZWN0ZWRJbWFnZUl0ZW1Db3VudCgpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzLCB0b3RhbEltYWdlSXRlbUNvdW50LCBzZWxlY3RlZEltYWdlSXRlbU9iamVjdElkcyB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRJbWFnZUl0ZW1Db3VudCA9IHNlbGVjdGVkSW1hZ2VJdGVtT2JqZWN0SWRzLmxlbmd0aDtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRBbmRUb3RhbEltYWdlQ291bnRTdHIgPSBzdHJpbmdzLnNlbGVjdGVkQW5kVG90YWxJbWFnZUl0ZW1Db3VudEluZm9cbiAgICAgICAgICAgIC5yZXBsYWNlKFwiJHt0b3RhbENvdW50fVwiLCB0b3RhbEltYWdlSXRlbUNvdW50LnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAucmVwbGFjZShcIiR7c2VsZWN0ZWRDb3VudH1cIiwgc2VsZWN0ZWRJbWFnZUl0ZW1Db3VudC50b1N0cmluZygpKTtcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IGBpbWFnZS1pdGVtLWNvdW50LWNoaXAgJHtzZWxlY3RlZEltYWdlSXRlbUNvdW50ID4gMCA/IFwic2VsZWN0ZWRcIiA6IFwiXCJ9YCB9LCBzZWxlY3RlZEFuZFRvdGFsSW1hZ2VDb3VudFN0ciwgc2VsZWN0ZWRJbWFnZUl0ZW1Db3VudCA+IDAgJiYgKGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IGFwcGVhcmFuY2U6IFwic29saWRcIiwga2luZDogXCJicmFuZFwiLCBcImljb24tc3RhcnRcIjogXCJ4XCIsIHNjYWxlOiBcInNcIiwgb25DbGljazogKCkgPT4gdGhpcy5jbGVhckltYWdlSXRlbVNlbGVjdGlvbigpIH0pKSkpO1xuICAgIH1cbiAgICByZW5kZXJJbWFnZUl0ZW1MaXN0QnV0dG9uR3JvdXAoKSB7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncywgc2VsZWN0ZWRJbWFnZUl0ZW1PYmplY3RJZHMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGhhc0ltYWdlU2VsZWN0ZWQgPSBzZWxlY3RlZEltYWdlSXRlbU9iamVjdElkcy5sZW5ndGggPiAwO1xuICAgICAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczogXCJpbWFnZS1jb2xsZWN0aW9uLWl0ZW0tY2FyZC1saXN0LWhlYWRlclwiIH0sIHRoaXMucmVuZGVyU2VsZWN0ZWRJbWFnZUl0ZW1Db3VudCgpLCBoKFwiZGl2XCIsIHsgc3R5bGU6IHsgZGlzcGxheTogXCJmbGV4XCIgfSB9LCBoYXNJbWFnZVNlbGVjdGVkICYmIChoKFwiZGl2XCIsIG51bGwsIGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IFwiYXJpYS1sYWJlbFwiOiBzdHJpbmdzLmxvY2tJdGVtcywgYXBwZWFyYW5jZTogXCJ0cmFuc3BhcmVudFwiLCBcImljb24tc3RhcnRcIjogXCJsb2NrXCIsIGtpbmQ6IFwibmV1dHJhbFwiLCBzY2FsZTogXCJzXCIgfSksIGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IFwiYXJpYS1sYWJlbFwiOiBzdHJpbmdzLnVubG9ja0l0ZW1zLCBhcHBlYXJhbmNlOiBcInRyYW5zcGFyZW50XCIsIFwiaWNvbi1zdGFydFwiOiBcInVubG9ja1wiLCBraW5kOiBcIm5ldXRyYWxcIiwgc2NhbGU6IFwic1wiIH0pKSksIGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IFwiYXJpYS1sYWJlbFwiOiBzdHJpbmdzLmNvbmZpZ3VyZVJlc3VsdHMsIGFwcGVhcmFuY2U6IFwidHJhbnNwYXJlbnRcIiwgXCJpY29uLXN0YXJ0XCI6IFwic2xpZGVycy1ob3Jpem9udGFsXCIsIGtpbmQ6IFwibmV1dHJhbFwiLCBzY2FsZTogXCJzXCIsIG9uQ2xpY2s6IHRoaXMuaGFuZGxlT3BlbkNvbmZpZ1Jlc3VsdHNNb2RhbCB9KSkpKTtcbiAgICB9XG4gICAgcmVuZGVySW1hZ2VJdGVtQ2FyZExpc3QoKSB7XG4gICAgICAgIGNvbnN0IHsgaW1hZ2VJdGVtcywgc2VsZWN0ZWRJbWFnZUl0ZW1PYmplY3RJZHMsIGxheWVyLCBpc1Nob3dpbmdUaHVtYm5haWxzIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIShpbWFnZUl0ZW1zID09PSBudWxsIHx8IGltYWdlSXRlbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGltYWdlSXRlbXMuZmVhdHVyZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvYmplY3RJZEZpZWxkTmFtZSA9IGxheWVyLm9iamVjdElkRmllbGQ7XG4gICAgICAgIGNvbnN0IGltYWdlSXRlbUNhcmRzID0gaW1hZ2VJdGVtcy5mZWF0dXJlcy5tYXAoKGZlYXR1cmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1PYmplY3RJZCA9IGZlYXR1cmUuYXR0cmlidXRlc1tvYmplY3RJZEZpZWxkTmFtZV07XG4gICAgICAgICAgICBjb25zdCBpc0l0ZW1TZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWRJbWFnZUl0ZW1PYmplY3RJZHMuaW5jbHVkZXMoaXRlbU9iamVjdElkKTtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlSXRlbUdlb21ldHJ5ID0gZmVhdHVyZS5nZW9tZXRyeTtcbiAgICAgICAgICAgIHJldHVybiAoaChcImxpXCIsIHsgb25Nb3VzZU92ZXI6ICgpID0+IHRoaXMuaGFuZGxlSW1hZ2VJdGVtQ2FyZE1vdXNlT3ZlcihpbWFnZUl0ZW1HZW9tZXRyeSksIG9uTW91c2VPdXQ6ICgpID0+IHRoaXMuaGFuZGxlSW1hZ2VJdGVtQ2FyZE1vdXNlT3V0KCkgfSwgaChcImNhbGNpdGUtY2FyZFwiLCB7IGNsYXNzOiBcImltYWdlLWl0ZW0tY2FyZFwiLCBzZWxlY3RhYmxlOiB0cnVlLCBzZWxlY3RlZDogaXNJdGVtU2VsZWN0ZWQsIG9uQ2FsY2l0ZUNhcmRTZWxlY3Q6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U2VsZWN0ZWRJdGVtT0lkcyA9IGlzSXRlbVNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNlbGVjdGVkSW1hZ2VJdGVtT2JqZWN0SWRzLmZpbHRlcigob2lkKSA9PiBvaWQgIT09IGl0ZW1PYmplY3RJZClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogWy4uLnNlbGVjdGVkSW1hZ2VJdGVtT2JqZWN0SWRzLCBpdGVtT2JqZWN0SWRdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW1hZ2VJdGVtT2JqZWN0SWRzID0gbmV3U2VsZWN0ZWRJdGVtT0lkcy5zb3J0KCk7XG4gICAgICAgICAgICAgICAgfSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaW1hZ2UtaXRlbS1jYXJkLWNvbnRlbnQtd3JhcHBlclwiIH0sIGlzU2hvd2luZ1RodW1ibmFpbHMgPyB0aGlzLnJlbmRlclByZXZpZXdUaHVtYm5haWwoaXRlbU9iamVjdElkKSA6IG51bGwsIHRoaXMucmVuZGVyRmVhdHVyZUF0dHJpYnV0ZXNJbkltYWdlSXRlbUNhcmQoZmVhdHVyZSkpLCBoKFwiZGl2XCIsIHsgc2xvdDogXCJmb290ZXItc3RhcnRcIiB9KSwgaChcImRpdlwiLCB7IHNsb3Q6IFwiZm9vdGVyLWVuZFwiIH0sIGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IGtpbmQ6IFwibmV1dHJhbFwiLCBcImljb24tc3RhcnRcIjogXCJhZGQtbGF5ZXJcIiwgYXBwZWFyYW5jZTogXCJ0cmFuc3BhcmVudFwiIH0pLCBoKFwiY2FsY2l0ZS1idXR0b25cIiwgeyBraW5kOiBcIm5ldXRyYWxcIiwgXCJpY29uLXN0YXJ0XCI6IFwibG9ja1wiLCBhcHBlYXJhbmNlOiBcInRyYW5zcGFyZW50XCIgfSkpKSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGgoXCJ1bFwiLCB7IGNsYXNzOiBcImltYWdlLWl0ZW0tY2FyZC1saXN0XCIgfSwgaW1hZ2VJdGVtQ2FyZHMpO1xuICAgIH1cbiAgICByZW5kZXJJbWFnZUl0ZW1TZWxlY3REcm9wZG93bigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MsIGxheWVyLCBpbWFnZUl0ZW1zLCBpbnNwZWN0SW1hZ2VJdGVtT2JqZWN0SWQsIHNlbGVjdGVkSW1hZ2VJdGVtT2JqZWN0SWRzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBvYmplY3RJZEZpZWxkTmFtZSA9IGxheWVyLm9iamVjdElkRmllbGQ7XG4gICAgICAgIGNvbnN0IGltYWdlSXRlbUZlYXR1cmVzID0gc2VsZWN0ZWRJbWFnZUl0ZW1PYmplY3RJZHMubGVuZ3RoID4gMFxuICAgICAgICAgICAgPyBpbWFnZUl0ZW1zID09PSBudWxsIHx8IGltYWdlSXRlbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGltYWdlSXRlbXMuZmVhdHVyZXMuZmlsdGVyKChmKSA9PiBzZWxlY3RlZEltYWdlSXRlbU9iamVjdElkcy5pbmNsdWRlcyhmLmF0dHJpYnV0ZXNbb2JqZWN0SWRGaWVsZE5hbWVdKSkubWFwKChmKSA9PiBmLmF0dHJpYnV0ZXMpXG4gICAgICAgICAgICA6IChfYSA9IGltYWdlSXRlbXMgPT09IG51bGwgfHwgaW1hZ2VJdGVtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW1hZ2VJdGVtcy5mZWF0dXJlcy5tYXAoKGYpID0+IGYuYXR0cmlidXRlcykpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdO1xuICAgICAgICBjb25zdCBpbWFnZUl0ZW1PcHRpb25zID0gaW1hZ2VJdGVtRmVhdHVyZXMubWFwKChmKSA9PiAoaChcImNhbGNpdGUtb3B0aW9uXCIsIHsgdmFsdWU6IGZbb2JqZWN0SWRGaWVsZE5hbWVdLnRvU3RyaW5nKCksIGxhYmVsOiBgJHtmW29iamVjdElkRmllbGROYW1lXX06ICR7Zi5OYW1lfWAsIHNlbGVjdGVkOiBmW29iamVjdElkRmllbGROYW1lXSA9PT0gaW5zcGVjdEltYWdlSXRlbU9iamVjdElkIH0pKSk7XG4gICAgICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBcImltYWdlLWl0ZW0tc2VsZWN0LWJsb2NrXCIgfSwgaChcImNhbGNpdGUtbGFiZWxcIiwgbnVsbCwgc3RyaW5ncy5zZWxlY3RlZEltYWdlcywgaChcImRpdlwiLCB7IGNsYXNzOiBcImltYWdlLWl0ZW0tc2VsZWN0LXdyYXBwZXJcIiB9LCBoKFwiY2FsY2l0ZS1pY29uXCIsIHsgc2NhbGU6IFwic1wiLCBpY29uOiBcImNoZXZyb24tbGVmdFwiLCBvbkNsaWNrOiB0aGlzLmhhbmRsZVNlbGVjdFByZXZJbWFnZUl0ZW0gfSksIGgoXCJjYWxjaXRlLXNlbGVjdFwiLCB7IHdpZHRoOiBcImZ1bGxcIiwgbGFiZWw6IHN0cmluZ3Muc2VsZWN0ZWRJbWFnZXMsIG9uQ2FsY2l0ZVNlbGVjdENoYW5nZTogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRJbWFnZUl0ZW1PYmplY3RJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdGVkT3B0aW9uLnZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU2VsZWN0ZWRJbWFnZUl0ZW1DaGFuZ2UoTnVtYmVyKHNlbGVjdGVkSW1hZ2VJdGVtT2JqZWN0SWQpKTtcbiAgICAgICAgICAgIH0gfSwgaW1hZ2VJdGVtT3B0aW9ucyksIGgoXCJjYWxjaXRlLWljb25cIiwgeyBzY2FsZTogXCJzXCIsIGljb246IFwiY2hldnJvbi1yaWdodFwiLCBvbkNsaWNrOiB0aGlzLmhhbmRsZVNlbGVjdE5leHRJbWFnZUl0ZW0gfSkpKSkpO1xuICAgIH1cbiAgICByZW5kZXJJbWFnZUl0ZW1QcmV2aWV3VmlldygpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzLCBsYXllciwganNhcGlVcmwsIGluc3BlY3RJbWFnZUl0ZW1PYmplY3RJZCB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChoKFwiY2FsY2l0ZS1ibG9ja1wiLCB7IGNvbGxhcHNpYmxlOiB0cnVlLCBvcGVuOiB0cnVlLCBoZWFkaW5nOiBzdHJpbmdzLnByZXZpZXcgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImltYWdlLWl0ZW0tcHJldmlldy13cmFwcGVyXCIgfSwgaChcImFyY2dpcy1pbWFnZS1pdGVtLXByZXZpZXdcIiwgeyBqc2FwaVVybDoganNhcGlVcmwsIHByZXZpZXdMYXllclVybDogbGF5ZXIudXJsLCBwcmV2aWV3SW1hZ2VJdGVtT2JqZWN0SWQ6IGluc3BlY3RJbWFnZUl0ZW1PYmplY3RJZCB9KSkpKTtcbiAgICB9XG4gICAgcmVuZGVySW1hZ2VJdGVtSW5mb1RhYmxlcygpIHtcbiAgICAgICAgY29uc3QgeyBpbWFnZUl0ZW1JbmZvIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGV4dGVudCwgc3RhdGlzdGljcyB9ID0gaW1hZ2VJdGVtSW5mbyB8fCB7fTtcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIG51bGwsIGltYWdlSXRlbUluZm8gPyB0aGlzLnJlbmRlckltYWdlSXRlbUluc3BlY3RCdXR0b25Hcm91cCgpIDogbnVsbCwgaW1hZ2VJdGVtSW5mbyA/IHRoaXMucmVuZGVySW1hZ2VJdGVtUmFzdGVySW5mb3JtYXRpb25UYWJsZSgpIDogbnVsbCwgaW1hZ2VJdGVtSW5mbyA/IHRoaXMucmVuZGVySW1hZ2VJdGVtUmFzdGVyTWV0YWRhdGFUYWJsZSgpIDogbnVsbCwgZXh0ZW50ID8gdGhpcy5yZW5kZXJJbWFnZUl0ZW1FeHRlbnRJbmZvVGFibGUoKSA6IG51bGwsIGltYWdlSXRlbUluZm8gPyB0aGlzLnJlbmRlckltYWdlSXRlbVNwYXRpYWxSZWZlcmVuY2VUYWJsZSgpIDogbnVsbCwgc3RhdGlzdGljcyA/IHRoaXMucmVuZGVySW1hZ2VJdGVtU3RhdGlzdGljc0luZm9UYWJsZSgpIDogbnVsbCkpO1xuICAgIH1cbiAgICByZW5kZXJJbWFnZUl0ZW1SYXN0ZXJJbmZvcm1hdGlvblRhYmxlKCkge1xuICAgICAgICBjb25zdCB7IHN0cmluZ3MsIGltYWdlSXRlbUluZm8gfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHRhYmxlQ29sdW1ucyA9IFtcbiAgICAgICAgICAgIHsgYWNjZXNzb3I6IFwicHJvcGVydHlcIiwgaGVhZGVyOiBzdHJpbmdzLnByb3BlcnR5IH0sXG4gICAgICAgICAgICB7IGFjY2Vzc29yOiBcInZhbHVlXCIsIGhlYWRlcjogc3RyaW5ncy52YWx1ZSB9XG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IHsgYmFuZENvdW50LCBoZWlnaHQsIHdpZHRoLCBwaXhlbFR5cGUsIHBpeGVsU2l6ZSwgZGF0YVR5cGUsIGNvbG9ybWFwIH0gPSBpbWFnZUl0ZW1JbmZvO1xuICAgICAgICBjb25zdCByYXN0ZXJJbmZvRGF0YSA9IFtcbiAgICAgICAgICAgIHsgcHJvcGVydHk6IHN0cmluZ3MuY29sdW1ucywgdmFsdWU6IHdpZHRoIH0sXG4gICAgICAgICAgICB7IHByb3BlcnR5OiBzdHJpbmdzLnJvd3MsIHZhbHVlOiBoZWlnaHQgfSxcbiAgICAgICAgICAgIHsgcHJvcGVydHk6IHN0cmluZ3MuYmFuZE51bWJlciwgdmFsdWU6IGJhbmRDb3VudCB9LFxuICAgICAgICAgICAgeyBwcm9wZXJ0eTogc3RyaW5ncy5jZWxsU2l6ZVgsIHZhbHVlOiBwaXhlbFNpemUgPT09IG51bGwgfHwgcGl4ZWxTaXplID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwaXhlbFNpemUueCB9LFxuICAgICAgICAgICAgeyBwcm9wZXJ0eTogc3RyaW5ncy5jZWxsU2l6ZVksIHZhbHVlOiBwaXhlbFNpemUgPT09IG51bGwgfHwgcGl4ZWxTaXplID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwaXhlbFNpemUueSB9LFxuICAgICAgICAgICAgeyBwcm9wZXJ0eTogc3RyaW5ncy5zb3VyY2VUeXBlLCB2YWx1ZTogZGF0YVR5cGUgfSxcbiAgICAgICAgICAgIHsgcHJvcGVydHk6IHN0cmluZ3MucGl4ZWxUeXBlLCB2YWx1ZTogcGl4ZWxUeXBlIH0sXG4gICAgICAgICAgICB7IHByb3BlcnR5OiBzdHJpbmdzLnBpeGVsRGVwdGgsIHZhbHVlOiBiYW5kQ291bnQgfSxcbiAgICAgICAgICAgIHsgcHJvcGVydHk6IHN0cmluZ3MuY29sb3JtYXAsIHZhbHVlOiBjb2xvcm1hcCB9XG4gICAgICAgIF0uZmlsdGVyKChpbmZvKSA9PiAhIWluZm8udmFsdWUpO1xuICAgICAgICBjb25zdCBoYXNSYXN0ZXJJbmZvRGF0YSA9IHJhc3RlckluZm9EYXRhLmxlbmd0aCA+IDA7XG4gICAgICAgIHJldHVybiAoaGFzUmFzdGVySW5mb0RhdGEgJiYgKGgoXCJjYWxjaXRlLWJsb2NrXCIsIHsgY29sbGFwc2libGU6IHRydWUsIG9wZW46IHRydWUsIGhlYWRpbmc6IHN0cmluZ3MucmFzdGVySW5mb3JtYXRpb24gfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImltYWdlLWl0ZW0taW5mby10YWJsZS13cmFwcGVyXCIgfSwgaChcImFyY2dpcy1pbWFnZS1pdGVtLWluZm8tdGFibGVcIiwgeyBjb2x1bW5zOiB0YWJsZUNvbHVtbnMsIGRhdGE6IHJhc3RlckluZm9EYXRhIH0pKSkpKTtcbiAgICB9XG4gICAgcmVuZGVySW1hZ2VJdGVtUmFzdGVyTWV0YWRhdGFUYWJsZSgpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzLCBpbWFnZUl0ZW1JbmZvIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB0YWJsZUNvbHVtbnMgPSBbXG4gICAgICAgICAgICB7IGFjY2Vzc29yOiBcInByb3BlcnR5XCIsIGhlYWRlcjogc3RyaW5ncy5wcm9wZXJ0eSB9LFxuICAgICAgICAgICAgeyBhY2Nlc3NvcjogXCJ2YWx1ZVwiLCBoZWFkZXI6IHN0cmluZ3MudmFsdWUgfVxuICAgICAgICBdO1xuICAgICAgICBjb25zdCB7IFNlbnNvck5hbWUsIFByb2R1Y3ROYW1lLCBDbG91ZENvdmVyLCBBY3F1aXNpdGlvbkRhdGUsIFN1bkF6aW11dGgsIFN1bkVsZXZhdGlvbiwgRUxMSVBTT0lEIH0gPSBpbWFnZUl0ZW1JbmZvLmtleVByb3BlcnRpZXMgfHwge307XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlZERhdGUgPSBBY3F1aXNpdGlvbkRhdGVcbiAgICAgICAgICAgID8gYCR7bmV3IERhdGUoQWNxdWlzaXRpb25EYXRlKS50b0xvY2FsZURhdGVTdHJpbmcoKX0gJHtuZXcgRGF0ZShBY3F1aXNpdGlvbkRhdGUpLnRvTG9jYWxlVGltZVN0cmluZygpfWBcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgY29uc3QgcmFzdGVyTWV0YURhdGEgPSBbXG4gICAgICAgICAgICB7IHByb3BlcnR5OiBzdHJpbmdzLnNlbnNvck5hbWUsIHZhbHVlOiBTZW5zb3JOYW1lIH0sXG4gICAgICAgICAgICB7IHByb3BlcnR5OiBzdHJpbmdzLnByb2R1Y3ROYW1lLCB2YWx1ZTogUHJvZHVjdE5hbWUgfSxcbiAgICAgICAgICAgIHsgcHJvcGVydHk6IHN0cmluZ3MuYWNxdWlzaXRpb25EYXRlLCB2YWx1ZTogZm9ybWF0dGVkRGF0ZSB9LFxuICAgICAgICAgICAgeyBwcm9wZXJ0eTogc3RyaW5ncy5jbG91ZENvdmVyLCB2YWx1ZTogQ2xvdWRDb3ZlciB9LFxuICAgICAgICAgICAgeyBwcm9wZXJ0eTogc3RyaW5ncy5zdW5BemltdXRoLCB2YWx1ZTogU3VuQXppbXV0aCB9LFxuICAgICAgICAgICAgeyBwcm9wZXJ0eTogc3RyaW5ncy5zdW5FbGV2YXRpb24sIHZhbHVlOiBTdW5FbGV2YXRpb24gfSxcbiAgICAgICAgICAgIHsgcHJvcGVydHk6IHN0cmluZ3Muc3BoZXJvaWQsIHZhbHVlOiBFTExJUFNPSUQgfVxuICAgICAgICBdLmZpbHRlcigoaW5mbykgPT4gISFpbmZvLnZhbHVlKTtcbiAgICAgICAgY29uc3QgaGFzUmFzdGVyTWV0YURhdGEgPSByYXN0ZXJNZXRhRGF0YS5sZW5ndGggPiAwO1xuICAgICAgICByZXR1cm4gKGhhc1Jhc3Rlck1ldGFEYXRhICYmIChoKFwiY2FsY2l0ZS1ibG9ja1wiLCB7IGNvbGxhcHNpYmxlOiB0cnVlLCBvcGVuOiB0cnVlLCBoZWFkaW5nOiBzdHJpbmdzLnJhc3Rlck1ldGFkYXRhIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJpbWFnZS1pdGVtLWluZm8tdGFibGUtd3JhcHBlclwiIH0sIGgoXCJhcmNnaXMtaW1hZ2UtaXRlbS1pbmZvLXRhYmxlXCIsIHsgY29sdW1uczogdGFibGVDb2x1bW5zLCBkYXRhOiByYXN0ZXJNZXRhRGF0YSB9KSkpKSk7XG4gICAgfVxuICAgIHJlbmRlckltYWdlSXRlbUV4dGVudEluZm9UYWJsZSgpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzLCBpbWFnZUl0ZW1JbmZvIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB0YWJsZUNvbHVtbnMgPSBbXG4gICAgICAgICAgICB7IGFjY2Vzc29yOiBcInByb3BlcnR5XCIsIGhlYWRlcjogc3RyaW5ncy5wcm9wZXJ0eSB9LFxuICAgICAgICAgICAgeyBhY2Nlc3NvcjogXCJ2YWx1ZVwiLCBoZWFkZXI6IHN0cmluZ3MudmFsdWUgfVxuICAgICAgICBdO1xuICAgICAgICBjb25zdCB7IGV4dGVudCB9ID0gaW1hZ2VJdGVtSW5mbztcbiAgICAgICAgY29uc3QgeyB4bWluLCB4bWF4LCB5bWluLCB5bWF4IH0gPSBleHRlbnQ7XG4gICAgICAgIGNvbnN0IHJhc3RlckV4dGVudERhdGEgPSBbXG4gICAgICAgICAgICB7IHByb3BlcnR5OiBzdHJpbmdzLnRvcCwgdmFsdWU6IHltYXggfSxcbiAgICAgICAgICAgIHsgcHJvcGVydHk6IHN0cmluZ3MuYm90dG9tLCB2YWx1ZTogeW1pbiB9LFxuICAgICAgICAgICAgeyBwcm9wZXJ0eTogc3RyaW5ncy5sZWZ0LCB2YWx1ZTogeG1pbiB9LFxuICAgICAgICAgICAgeyBwcm9wZXJ0eTogc3RyaW5ncy5yaWdodCwgdmFsdWU6IHhtYXggfVxuICAgICAgICBdLmZpbHRlcigoaW5mbykgPT4gISFpbmZvLnZhbHVlKTtcbiAgICAgICAgY29uc3QgaGFzUmFzdGVyRXh0ZW50RGF0YSA9IHJhc3RlckV4dGVudERhdGEubGVuZ3RoID4gMDtcbiAgICAgICAgcmV0dXJuIChoYXNSYXN0ZXJFeHRlbnREYXRhICYmIChoKFwiY2FsY2l0ZS1ibG9ja1wiLCB7IGNvbGxhcHNpYmxlOiB0cnVlLCBvcGVuOiB0cnVlLCBoZWFkaW5nOiBzdHJpbmdzLmV4dGVudCB9LCBoKFwiYXJjZ2lzLWltYWdlLWl0ZW0taW5mby10YWJsZVwiLCB7IGNvbHVtbnM6IHRhYmxlQ29sdW1ucywgZGF0YTogcmFzdGVyRXh0ZW50RGF0YSB9KSkpKTtcbiAgICB9XG4gICAgcmVuZGVySW1hZ2VJdGVtU3RhdGlzdGljc0luZm9UYWJsZSgpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzLCBpbWFnZUl0ZW1JbmZvIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB0YWJsZUNvbHVtbnMgPSBbXG4gICAgICAgICAgICB7IGFjY2Vzc29yOiBcImJhbmROYW1lXCIsIGhlYWRlcjogc3RyaW5ncy5iYW5kTmFtZSB9LFxuICAgICAgICAgICAgeyBhY2Nlc3NvcjogXCJtaW5cIiwgaGVhZGVyOiBzdHJpbmdzLm1pbiB9LFxuICAgICAgICAgICAgeyBhY2Nlc3NvcjogXCJtYXhcIiwgaGVhZGVyOiBzdHJpbmdzLm1heCB9LFxuICAgICAgICAgICAgeyBhY2Nlc3NvcjogXCJhdmdcIiwgaGVhZGVyOiBzdHJpbmdzLm1lYW4gfSxcbiAgICAgICAgICAgIHsgYWNjZXNzb3I6IFwic3RkZGV2XCIsIGhlYWRlcjogc3RyaW5ncy5zdGQgfVxuICAgICAgICBdO1xuICAgICAgICBjb25zdCB7IGJhbmRJbmZvcywgc3RhdGlzdGljcyB9ID0gaW1hZ2VJdGVtSW5mbztcbiAgICAgICAgY29uc3QgYmFuZFN0YXRzRGF0YSA9IGJhbmRJbmZvcy5tYXAoKGJhbmRJbmZvLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYmFuZFN0YXRzID0gc3RhdGlzdGljc1tpbmRleF07XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IGJhbmROYW1lOiBiYW5kSW5mby5uYW1lIH0sIGJhbmRTdGF0cyk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBoYXNCYW5kU3RhdHNEYXRhID0gYmFuZFN0YXRzRGF0YS5sZW5ndGggPiAwO1xuICAgICAgICByZXR1cm4gKGhhc0JhbmRTdGF0c0RhdGEgJiYgKGgoXCJjYWxjaXRlLWJsb2NrXCIsIHsgY29sbGFwc2libGU6IHRydWUsIG9wZW46IHRydWUsIGhlYWRpbmc6IHN0cmluZ3Muc3RhdGlzdGljcyB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaW1hZ2UtaXRlbS1pbmZvLXRhYmxlLXdyYXBwZXJcIiB9LCBoKFwiYXJjZ2lzLWltYWdlLWl0ZW0taW5mby10YWJsZVwiLCB7IGNvbHVtbnM6IHRhYmxlQ29sdW1ucywgZGF0YTogYmFuZFN0YXRzRGF0YSB9KSkpKSk7XG4gICAgfVxuICAgIHJlbmRlckltYWdlSXRlbVNwYXRpYWxSZWZlcmVuY2VUYWJsZSgpIHtcbiAgICAgICAgY29uc3QgeyBzdHJpbmdzLCBpbWFnZUl0ZW1JbmZvIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB0YWJsZUNvbHVtbnMgPSBbXG4gICAgICAgICAgICB7IGFjY2Vzc29yOiBcInByb3BlcnR5XCIsIGhlYWRlcjogc3RyaW5ncy5wcm9wZXJ0eSB9LFxuICAgICAgICAgICAgeyBhY2Nlc3NvcjogXCJ2YWx1ZVwiLCBoZWFkZXI6IHN0cmluZ3MudmFsdWUgfVxuICAgICAgICBdO1xuICAgICAgICBjb25zdCB7IGtleVByb3BlcnRpZXMsIHNwYXRpYWxSZWZlcmVuY2UgfSA9IGltYWdlSXRlbUluZm87XG4gICAgICAgIGNvbnN0IHNwYXRpYWxSZWZlcmVuY2VEYXRhID0gW1xuICAgICAgICAgICAgeyBwcm9wZXJ0eTogc3RyaW5ncy5wcm9qZWN0ZWRDb29yZGluYXRlU3lzdGVtLCB2YWx1ZTogXCJcIiB9LFxuICAgICAgICAgICAgeyBwcm9wZXJ0eTogc3RyaW5ncy5wcm9qZWN0aW9uLCB2YWx1ZTogXCJcIiB9LFxuICAgICAgICAgICAgeyBwcm9wZXJ0eTogc3RyaW5ncy53a2lkLCB2YWx1ZTogc3BhdGlhbFJlZmVyZW5jZSA9PT0gbnVsbCB8fCBzcGF0aWFsUmVmZXJlbmNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzcGF0aWFsUmVmZXJlbmNlLndraWQgfSxcbiAgICAgICAgICAgIHsgcHJvcGVydHk6IHN0cmluZ3MuZGF0dW0sIHZhbHVlOiBrZXlQcm9wZXJ0aWVzID09PSBudWxsIHx8IGtleVByb3BlcnRpZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGtleVByb3BlcnRpZXMuREFUVU0gfSxcbiAgICAgICAgICAgIHsgcHJvcGVydHk6IHN0cmluZ3Muc3BoZXJvaWQsIHZhbHVlOiBrZXlQcm9wZXJ0aWVzID09PSBudWxsIHx8IGtleVByb3BlcnRpZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGtleVByb3BlcnRpZXMuRUxMSVBTT0lEIH1cbiAgICAgICAgXS5maWx0ZXIoKGluZm8pID0+ICEhaW5mby52YWx1ZSk7XG4gICAgICAgIGNvbnN0IGhhc1ZhbGlkU3BhdGlhbFJlZmVyZW5jZURhdGEgPSBzcGF0aWFsUmVmZXJlbmNlRGF0YS5sZW5ndGggPiAwO1xuICAgICAgICByZXR1cm4gKGhhc1ZhbGlkU3BhdGlhbFJlZmVyZW5jZURhdGEgJiYgKGgoXCJjYWxjaXRlLWJsb2NrXCIsIHsgY29sbGFwc2libGU6IHRydWUsIG9wZW46IHRydWUsIGhlYWRpbmc6IHN0cmluZ3Muc3BhdGlhbFJlZmVyZW5jZSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaW1hZ2UtaXRlbS1pbmZvLXRhYmxlLXdyYXBwZXJcIiB9LCBoKFwiYXJjZ2lzLWltYWdlLWl0ZW0taW5mby10YWJsZVwiLCB7IGNvbHVtbnM6IHRhYmxlQ29sdW1ucywgZGF0YTogc3BhdGlhbFJlZmVyZW5jZURhdGEgfSkpKSkpO1xuICAgIH1cbiAgICByZW5kZXJJbWFnZUl0ZW1JbnNwZWN0QnV0dG9uR3JvdXAoKSB7XG4gICAgICAgIGNvbnN0IHsgc3RyaW5ncyB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaW1hZ2UtaXRlbS1pbnNwZWN0LWJ1dHRvbi1ncm91cFwiIH0sIGgoXCJjYWxjaXRlLWJ1dHRvblwiLCB7IFwiYXJpYS1sYWJlbFwiOiBzdHJpbmdzLmFkZExheWVyLCBhcHBlYXJhbmNlOiBcInRyYW5zcGFyZW50XCIsIFwiaWNvbi1zdGFydFwiOiBcImFkZC1sYXllclwiLCBraW5kOiBcIm5ldXRyYWxcIiwgc2NhbGU6IFwic1wiIH0pLCBoKFwiY2FsY2l0ZS1idXR0b25cIiwgeyBcImFyaWEtbGFiZWxcIjogc3RyaW5ncy56b29tVG9JdGVtLCBhcHBlYXJhbmNlOiBcInRyYW5zcGFyZW50XCIsIFwiaWNvbi1zdGFydFwiOiBcImxheWVyLXpvb20tdG9cIiwga2luZDogXCJuZXV0cmFsXCIsIHNjYWxlOiBcInNcIiB9KSkpO1xuICAgIH1cbiAgICByZW5kZXJQcmV2aWV3VGh1bWJuYWlsKGltYWdlSXRlbU9iamVjdElkKSB7XG4gICAgICAgIGNvbnN0IHsgbGF5ZXIsIG1vZHVsZXMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgSWRlbnRpdHlNYW5hZ2VyIH0gPSBtb2R1bGVzO1xuICAgICAgICBjb25zdCBsYXllckNyZWRlbnRpYWwgPSBJZGVudGl0eU1hbmFnZXIuZmluZENyZWRlbnRpYWwobGF5ZXIudXJsKTtcbiAgICAgICAgY29uc3QgeyB0b2tlbiB9ID0gbGF5ZXJDcmVkZW50aWFsIHx8IHt9O1xuICAgICAgICBjb25zdCB0aHVtYm5haWxJbWdTcmNTdHIgPSBgJHtsYXllci51cmx9LyR7aW1hZ2VJdGVtT2JqZWN0SWR9L3RodW1ibmFpbCR7dG9rZW4gPyBgP3Rva2VuPSR7dG9rZW59YCA6IFwiXCJ9YDtcbiAgICAgICAgcmV0dXJuIGgoXCJpbWdcIiwgeyBzbG90OiBcInRodW1ibmFpbFwiLCBzcmM6IHRodW1ibmFpbEltZ1NyY1N0ciB9KTtcbiAgICB9XG4gICAgcmVuZGVyRmVhdHVyZUF0dHJpYnV0ZXNJbkltYWdlSXRlbUNhcmQoZmVhdHVyZSkge1xuICAgICAgICBjb25zdCB7IGltYWdlSXRlbUNhcmREaXNwbGF5ZWRGaWVsZE5hbWVzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBkaXNwbGF5ZWRBdHRyaWJ1dGVzTGlzdCA9IGltYWdlSXRlbUNhcmREaXNwbGF5ZWRGaWVsZE5hbWVzLm1hcCgoZmllbGQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoaChcImxpXCIsIG51bGwsIGgoXCJzdHJvbmdcIiwgbnVsbCwgZmllbGQpLCBgOiAke2ZlYXR1cmUuYXR0cmlidXRlc1tmaWVsZF19YCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGgoXCJ1bFwiLCB7IGNsYXNzOiBcImltYWdlLWl0ZW0tY2FyZC1kaXNwbGF5ZWQtZmllbGQtbGlzdFwiIH0sIGRpc3BsYXllZEF0dHJpYnV0ZXNMaXN0KTtcbiAgICB9XG4gICAgZ2V0IGhvc3RFbGVtZW50KCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkFyY2dpc0ltYWdlQ29sbGVjdGlvbkV4cGxvcmVyLnN0eWxlID0gYXJjZ2lzSW1hZ2VDb2xsZWN0aW9uRXhwbG9yZXJDc3M7XG5cbmV4cG9ydCB7IEFyY2dpc0ltYWdlQ29sbGVjdGlvbkV4cGxvcmVyIGFzIGFyY2dpc19pbWFnZV9jb2xsZWN0aW9uX2V4cGxvcmVyIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyY2dpcy1pbWFnZS1jb2xsZWN0aW9uLWV4cGxvcmVyLmVudHJ5LmpzLm1hcCIsIi8qIVxuICogQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAqIHY0LjAuNThcbiAqL1xuaW1wb3J0IHsgbCBhcyBsb2FkTW9kdWxlcyB9IGZyb20gJy4vbG9hZE1vZHVsZXMtYjRhYzEyNDcuanMnO1xuaW1wb3J0IHsgYyBhcyBjbG9zZXN0RWxlbWVudENyb3NzU2hhZG93Qm91bmRhcnkgfSBmcm9tICcuL2RvbS00ZDM2NzY3Ny5qcyc7XG5cbmNvbnN0IGxhbmd1YWdlTWFwID0gbmV3IE1hcChbXG4gICAgW1wiYXJcIiwgXCJhclwiXSxcbiAgICBbXCJiZ1wiLCBcImJnXCJdLFxuICAgIFtcImJzXCIsIFwiYnNcIl0sXG4gICAgW1wiY2FcIiwgXCJjYVwiXSxcbiAgICBbXCJjc1wiLCBcImNzXCJdLFxuICAgIFtcImRhXCIsIFwiZGFcIl0sXG4gICAgW1wiZGVcIiwgXCJkZVwiXSxcbiAgICBbXCJlbFwiLCBcImVsXCJdLFxuICAgIFtcImVuXCIsIFwiZW5cIl0sXG4gICAgW1wiZXNcIiwgXCJlc1wiXSxcbiAgICBbXCJldFwiLCBcImV0XCJdLFxuICAgIFtcImZpXCIsIFwiZmlcIl0sXG4gICAgW1wiZnJcIiwgXCJmclwiXSxcbiAgICBbXCJoZVwiLCBcImhlXCJdLFxuICAgIFtcImhyXCIsIFwiaHJcIl0sXG4gICAgW1wiaHVcIiwgXCJodVwiXSxcbiAgICBbXCJpZFwiLCBcImlkXCJdLFxuICAgIFtcIml0XCIsIFwiaXRcIl0sXG4gICAgW1wiamFcIiwgXCJqYVwiXSxcbiAgICBbXCJrb1wiLCBcImtvXCJdLFxuICAgIFtcImx0XCIsIFwibHRcIl0sXG4gICAgW1wibHZcIiwgXCJsdlwiXSxcbiAgICBbXCJuYlwiLCBcIm5iXCJdLFxuICAgIFtcIm5sXCIsIFwibmxcIl0sXG4gICAgW1wicGxcIiwgXCJwbFwiXSxcbiAgICBbXCJwdC1iclwiLCBcInB0LUJSXCJdLFxuICAgIFtcInB0LXB0XCIsIFwicHQtUFRcIl0sXG4gICAgW1wicm9cIiwgXCJyb1wiXSxcbiAgICBbXCJydVwiLCBcInJ1XCJdLFxuICAgIFtcInNrXCIsIFwic2tcIl0sXG4gICAgW1wic2xcIiwgXCJzbFwiXSxcbiAgICBbXCJzclwiLCBcInNyXCJdLFxuICAgIFtcInN2XCIsIFwic3ZcIl0sXG4gICAgW1widGhcIiwgXCJ0aFwiXSxcbiAgICBbXCJ0clwiLCBcInRyXCJdLFxuICAgIFtcInVrXCIsIFwidWtcIl0sXG4gICAgW1widmlcIiwgXCJ2aVwiXSxcbiAgICBbXCJ6aC1jblwiLCBcInpoLUNOXCJdLFxuICAgIFtcInpoLWhrXCIsIFwiemgtSEtcIl0sXG4gICAgW1wiemgtdHdcIiwgXCJ6aC1UV1wiXVxuXSk7XG4vLyBydGxcbmZ1bmN0aW9uIGdldEVsZW1lbnREaXIoZWwpIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudFByb3AoZWwsIFwiZGlyXCIsIFwibHRyXCIpO1xufVxuZnVuY3Rpb24gZ2V0RWxlbWVudFByb3AoZWwsIHByb3AsIHZhbHVlKSB7XG4gICAgY29uc3QgY2xvc2VzdFdpdGhQcm9wID0gY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5KGVsLCBgWyR7cHJvcH1dYCk7XG4gICAgcmV0dXJuIGNsb3Nlc3RXaXRoUHJvcCA/IGNsb3Nlc3RXaXRoUHJvcC5nZXRBdHRyaWJ1dGUocHJvcCkgOiB2YWx1ZTtcbn1cbi8vIGNzc1xuY29uc3QgQ1NTX1VUSUxJVFkgPSB7XG4gICAgcnRsOiBcImFyY2dpcy0tcnRsXCJcbn07XG5hc3luYyBmdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtYmVyLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBhcGksIHR5cGUsIHBsYWNlcyB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgICBpZiAoYXBpID09PSA0KSB7XG4gICAgICAgIGNvbnN0IFtpbnRsXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcImVzcmkvaW50bFwiXSk7XG4gICAgICAgIGNvbnN0IG51bWJlckZvcm1hdEludGxPcHRpb25zID0gaW50bC5jb252ZXJ0TnVtYmVyRm9ybWF0VG9JbnRsT3B0aW9ucyh7XG4gICAgICAgICAgICBwbGFjZXMsXG4gICAgICAgICAgICBzdHlsZTogdHlwZSxcbiAgICAgICAgICAgIGRpZ2l0U2VwYXJhdG9yOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaW50bC5mb3JtYXROdW1iZXIobnVtYmVyLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG51bWJlckZvcm1hdEludGxPcHRpb25zKSwgeyBzdHlsZTogdHlwZSB9KSk7XG4gICAgfVxuICAgIGNvbnN0IFtkb2pvTnVtYmVyXSA9IGF3YWl0IGxvYWRNb2R1bGVzKFtcImRvam8vbnVtYmVyXCJdKTtcbiAgICByZXR1cm4gZG9qb051bWJlci5mb3JtYXQobnVtYmVyLCB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIHBsYWNlcyxcbiAgICAgICAgcGF0dGVybjogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBhdHRlcm5cbiAgICB9KTtcbn1cbmNvbnN0IGNhY2hlID0ge307XG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUpIHtcbiAgICBjb25zdCBsYW5nID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lmxhbmc7XG4gICAgY29uc3QgZGF5U2hvcnRNb250aFllYXIgPSB7XG4gICAgICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgICAgICBtb250aDogXCJzaG9ydFwiLFxuICAgICAgICBkYXk6IFwibnVtZXJpY1wiXG4gICAgfTtcbiAgICBpZiAoIWNhY2hlW2xhbmddKSB7XG4gICAgICAgIGNhY2hlW2xhbmddID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmxhbmcsIGRheVNob3J0TW9udGhZZWFyKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlW2xhbmddLmZvcm1hdChkYXRlKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFBsdXJhbChsYW5nLCBzdHJpbmdPYmosIG51bWJlcikge1xuICAgIGNvbnN0IHNpbmdsZXMgPSBbXCJpZFwiLCBcImphXCIsIFwia29cIiwgXCJ0aFwiLCBcInZpXCIsIFwiemgtY25cIiwgXCJ6aC1oa1wiLCBcInpoLXR3XCJdO1xuICAgIGNvbnN0IGxpa2VFbmdsaXNoID0gW1xuICAgICAgICBcImVuXCIsXG4gICAgICAgIFwiY2FcIixcbiAgICAgICAgXCJkYVwiLFxuICAgICAgICBcImRlXCIsXG4gICAgICAgIFwiZWxcIixcbiAgICAgICAgXCJlc1wiLFxuICAgICAgICBcImV0XCIsXG4gICAgICAgIFwiZmlcIixcbiAgICAgICAgXCJoaVwiLFxuICAgICAgICBcImh1XCIsXG4gICAgICAgIFwiaXRcIixcbiAgICAgICAgXCJuYlwiLFxuICAgICAgICBcIm5sXCIsXG4gICAgICAgIFwicHQtcHRcIixcbiAgICAgICAgXCJzdlwiLFxuICAgICAgICBcInRyXCJcbiAgICBdO1xuICAgIGNvbnN0IGxvY2FsZSA9IGxhbmcgIT09IG51bGwgJiYgbGFuZyAhPT0gdm9pZCAwID8gbGFuZyA6IFwiZW5cIjtcbiAgICAvLyBpZiB0aGUgbnVtYmVyIGlzIG9uZSwgb3IgaXQgaXMgYSBcInNpbXBsZVwiIGxhbmd1YWdlLCByZXR1cm4gdGhlIDEgc3RyaW5nXG4gICAgaWYgKG51bWJlciA9PT0gMSB8fCBzaW5nbGVzLmluY2x1ZGVzKGxvY2FsZSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ09iai5zaW5nbGUucmVwbGFjZShcIiR7bnVtYmVyfVwiLCBcIjFcIik7XG4gICAgfVxuICAgIC8vIGlmIHRoZSBudW1iZXIgaXMgbm90IDEgYW5kIHRoZSBsYW5ndWFnZSB1c2VzIHRoZSBzYW1lIHBsdXJhbGl6YXRpb24gc3RyYXRlZ3kgYXMgZW5nbGlzaCxcbiAgICAvLyByZXR1cm4gdGhlIG11bHRpcGxlIHN0cmluZ1xuICAgIGlmIChudW1iZXIgIT09IDEgJiYgbGlrZUVuZ2xpc2guaW5jbHVkZXMobG9jYWxlKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nT2JqLm11bHRpcGxlLnJlcGxhY2UoXCIke251bWJlcn1cIiwgYCR7bnVtYmVyfWApO1xuICAgIH1cbiAgICAvLyBpZiBub25lIG9mIHRoZSBhYm92ZSB3b3JrZWQsIHJldHVybiB0aGUgXCJ1bmtub3duXCIgc3RyaW5nXG4gICAgcmV0dXJuIHN0cmluZ09iai51bmtub3duLnJlcGxhY2UoXCIke251bWJlcn1cIiwgYCR7bnVtYmVyfWApO1xufVxuXG5leHBvcnQgeyBDU1NfVVRJTElUWSBhcyBDLCBmb3JtYXREYXRlIGFzIGEsIGZvcm1hdFBsdXJhbCBhcyBiLCBmb3JtYXROdW1iZXIgYXMgZiwgZ2V0RWxlbWVudERpciBhcyBnLCBsYW5ndWFnZU1hcCBhcyBsIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhbmd1YWdlVXRpbC1lZjBlNTRiMi5qcy5tYXAiLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiB2NC4wLjU4XG4gKi9cbmltcG9ydCB7IGMgYXMgY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5IH0gZnJvbSAnLi9kb20tNGQzNjc2NzcuanMnO1xuaW1wb3J0IHsgbCBhcyBsYW5ndWFnZU1hcCB9IGZyb20gJy4vbGFuZ3VhZ2VVdGlsLWVmMGU1NGIyLmpzJztcbmltcG9ydCB7IGEgYXMgZ2V0QXNzZXRQYXRoIH0gZnJvbSAnLi9pbmRleC1lM2JmN2RhNy5qcyc7XG5cbi8vIGh0dHBzOi8vbWVkaXVtLmNvbS9zdGVuY2lsLXRyaWNrcy9pbXBsZW1lbnRpbmctaW50ZXJuYXRpb25hbGlzYXRpb24taTE4bi13aXRoLXN0ZW5jaWwtNWU2NTU5NTU0MTE3XG5mdW5jdGlvbiBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2UoZWxlbWVudCkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGNvbnN0IGNsb3Nlc3RFbGVtZW50ID0gKF9hID0gY2xvc2VzdEVsZW1lbnRDcm9zc1NoYWRvd0JvdW5kYXJ5KGVsZW1lbnQsIFwiW2xhbmddXCIpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoX2MgPSAoX2IgPSBlbGVtZW50LnNoYWRvd1Jvb3QpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vd25lckRvY3VtZW50KSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIC8vIGxhbmd1YWdlIHNldCBieSB0aGUgY2FsbGluZyBhcHBsaWNhdGlvbiBvciBicm93c2VyLiBkZWZhdWx0cyB0byBlbmdsaXNoLlxuICAgIGNvbnN0IGxhbmcgPSAoKGNsb3Nlc3RFbGVtZW50ID09PSBudWxsIHx8IGNsb3Nlc3RFbGVtZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbG9zZXN0RWxlbWVudC5sYW5nKSB8fCAobmF2aWdhdG9yID09PSBudWxsIHx8IG5hdmlnYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbmF2aWdhdG9yLmxhbmd1YWdlKSB8fCBcImVuXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGxhbmd1YWdlTWFwLmhhcyhsYW5nKSkge1xuICAgICAgICByZXR1cm4gbGFuZ3VhZ2VNYXAuZ2V0KGxhbmcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gXCJydS1SVVwiIG1hcHMgdG8gXCJydVwiIHVzZSBjYXNlXG4gICAgICAgIGlmIChsYW5ndWFnZU1hcC5oYXMobGFuZy5zbGljZSgwLCAyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBsYW5ndWFnZU1hcC5nZXQobGFuZy5zbGljZSgwLCAyKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJlblwiO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlSW50bChlbGVtZW50KSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgLy8gaXQncyBPSyBpZiB3ZSBkb24ndCBoYXZlIHRoZSA0IGxldHRlciBsYW5ndWFnZSBmaWxlIGZvciBpdFxuICAgIC8vIDQgbGV0dGVyIGxhbmd1YWdlIGNvZGUgbmVlZGVkIGZvciBmb3JtYXR0aW5nIG51bWJlcnNcbiAgICBjb25zdCBjbG9zZXN0RWxlbWVudCA9IChfYSA9IGNsb3Nlc3RFbGVtZW50Q3Jvc3NTaGFkb3dCb3VuZGFyeShlbGVtZW50LCBcIltsYW5nXVwiKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKF9jID0gKF9iID0gZWxlbWVudC5zaGFkb3dSb290KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iub3duZXJEb2N1bWVudCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAvLyBsYW5ndWFnZSBzZXQgYnkgdGhlIGNhbGxpbmcgYXBwbGljYXRpb24gb3IgYnJvd3Nlci4gZGVmYXVsdHMgdG8gZW5nbGlzaC5cbiAgICBjb25zdCBsYW5nID0gKChjbG9zZXN0RWxlbWVudCA9PT0gbnVsbCB8fCBjbG9zZXN0RWxlbWVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xvc2VzdEVsZW1lbnQubGFuZykgfHwgKG5hdmlnYXRvciA9PT0gbnVsbCB8fCBuYXZpZ2F0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5hdmlnYXRvci5sYW5ndWFnZSkgfHwgXCJlblwiKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsYW5ndWFnZU1hcC5oYXMobGFuZykpIHtcbiAgICAgICAgcmV0dXJuIGxhbmd1YWdlTWFwLmdldChsYW5nKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChsYW5ndWFnZU1hcC5oYXMobGFuZy5zbGljZSgwLCAyKSkpIHtcbiAgICAgICAgICAgIC8vIHdlIHN1cHBvcnQgdGhlIDIgbGV0dGVyIGNvZGVkIGxhbmd1YWdlXG4gICAgICAgICAgICAvLyBlLmcuIGl0LUNIIHZzIGl0XG4gICAgICAgICAgICByZXR1cm4gbGFuZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcImVuXCI7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBmZXRjaExvY2FsZVN0cmluZ3NGb3JDb21wb25lbnQoY29tcG9uZW50TmFtZSwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgZmV0Y2goZ2V0QXNzZXRQYXRoKGAuLi9hcmNnaXMtYXBwLWFzc2V0cy9pMThuLyR7Y29tcG9uZW50TmFtZX0uaTE4bi4ke2xvY2FsZX0uanNvbmApKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQub2spXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuanNvbigpKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgfSwgKCkgPT4gcmVqZWN0KCkpO1xuICAgIH0pO1xufVxuY29uc3Qgc3RyaW5nQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGZldGNoTG9jYWxlU3RyaW5nc0Zyb21DYWNoZShjb21wb25lbnROYW1lLCBsb2NhbGUpIHtcbiAgICBjb25zdCBpZCA9IGAke2NvbXBvbmVudE5hbWV9JHtsb2NhbGV9YDtcbiAgICBpZiAoIXN0cmluZ0NhY2hlW2lkXSkge1xuICAgICAgICBzdHJpbmdDYWNoZVtpZF0gPSBmZXRjaExvY2FsZVN0cmluZ3NGb3JDb21wb25lbnQoY29tcG9uZW50TmFtZSwgbG9jYWxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZ0NhY2hlW2lkXTtcbn1cbi8qKlxuICogR2V0IHN0cmluZ3MgYW5kIGxhbmd1YWdlIGNvZGVzLlxuICogVGhpcyBtZXRob2QgcmV0dXJucyAyIGxhbmd1YWdlIGNvZGVzLlxuICogVGhlIGZpcnN0IG9uZSByZXR1cm5zIGEgY29kZSB0aGF0J3MgYWxzbyBzdXBwb3J0ZWQgYXMgYSBsYW5ndWFnZSBmaWxlLlxuICogVGhlIHNlY29uZCBvbmUgcmV0dXJucyBhIGNvZGUgd2hlcmUgdGhlcmUgaXMgc3VwcG9ydCBmb3IgdGhlIGZpcnN0IDIgbGV0dGVycyBvZiB0aGUgY29kZSBhcyBwYXJ0IG9mIGEgbGFuZ3VhZ2UgZmlsZSxcbiAqIGJ1dCB3aWxsIHJldHVybiB0aGUgb3JpZ2luYWwgNCBsZXR0ZXIgY29kZSBmcm9tIHRoZSBwYWdlLlxuICogRS5nLiBGb3IgXCJpdC1jaFwiIGl0IHdpbGwgcmV0dXJuIFwiaXRcIiBhcyB0aGUgZmlyc3QgbGFuZ3VhZ2UgY29kZSBhbmQgXCJpdC1jaFwiIGFzIHRoZSBzZWNvbmQuXG4gKiBUaGUgc2Vjb25kIG9uZSBpcyByZXF1aXJlZCBmb3IgZXNyaS5pbnRsLnNldExvY2FsZSgpIHRvIGdldCB0aGUgY29ycmVjdCBmb3JtYXR0aW5nLlxuICpcbiAqIElmIGEgdGFnTmFtZSBpcyBwcm92aWRlZCBpdCB3aWxsIG92ZXJ3aXRlIHRoZSBlbGVtZW50J3MgdGFnTmFtZVxuICpcbiAqICBAcmV0dXJuIFsgc3RyaW5ncywgZmlyc3QgbGFuZ3VhZ2UgY29kZSwgc2Vjb25kIGxhbmd1YWdlIGNvZGVdXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldExvY2FsZUNvbXBvbmVudFN0cmluZ3MoZWxlbWVudCwgdGFnTmFtZSkge1xuICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPSB0YWdOYW1lIHx8IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGNvbXBvbmVudExhbmd1YWdlID0gZ2V0Q29tcG9uZW50Q2xvc2VzdExhbmd1YWdlKGVsZW1lbnQpO1xuICAgIGNvbnN0IGNvbXBvbmVudExhbmd1YWdlSW50bCA9IGdldENvbXBvbmVudENsb3Nlc3RMYW5ndWFnZUludGwoZWxlbWVudCk7XG4gICAgbGV0IHN0cmluZ3M7XG4gICAgdHJ5IHtcbiAgICAgICAgc3RyaW5ncyA9IGF3YWl0IGZldGNoTG9jYWxlU3RyaW5nc0Zyb21DYWNoZShjb21wb25lbnROYW1lLCBjb21wb25lbnRMYW5ndWFnZSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihgbm8gbG9jYWxlIGZvciAke2NvbXBvbmVudE5hbWV9ICgke2NvbXBvbmVudExhbmd1YWdlfSkgbG9hZGluZyBkZWZhdWx0IGxvY2FsZSBlbi5gKTtcbiAgICAgICAgc3RyaW5ncyA9IGF3YWl0IGZldGNoTG9jYWxlU3RyaW5nc0Zyb21DYWNoZShjb21wb25lbnROYW1lLCBcImVuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gW3N0cmluZ3MsIGNvbXBvbmVudExhbmd1YWdlLCBjb21wb25lbnRMYW5ndWFnZUludGxdO1xufVxuXG5leHBvcnQgeyBnZXRDb21wb25lbnRDbG9zZXN0TGFuZ3VhZ2UgYXMgYSwgZ2V0TG9jYWxlQ29tcG9uZW50U3RyaW5ncyBhcyBnIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2FsZS0wNTBiNmRiOS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=