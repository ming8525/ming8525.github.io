"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-f81c2f"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-dependency-check_3.entry.js":
/*!****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-dependency-check_3.entry.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_dependency_check: () => (/* binding */ ArcgisDependencyCheck),
/* harmony export */   arcgis_item_share_group: () => (/* binding */ ArcgisItemShareGroup),
/* harmony export */   arcgis_item_share_group_card: () => (/* binding */ ArcgisItemShareGroupCard)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _item_3535552d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./item-3535552d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-3535552d.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _types_a031c1da_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types-a031c1da.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/types-a031c1da.js");
/* harmony import */ var _services_66aee31b_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services-66aee31b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/services-66aee31b.js");
/* harmony import */ var _utils_f4f44b88_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils-f4f44b88.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/utils-f4f44b88.js");
/* harmony import */ var _service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./service-8c2c4241.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/service-8c2c4241.js");
/* harmony import */ var _user_3ea69c3a_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./user-3ea69c3a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-3ea69c3a.js");
/* harmony import */ var _functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./functional-44de8fcf.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-44de8fcf.js");
/* harmony import */ var _privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./privileges-5c382f61.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/privileges-5c382f61.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _url_4c3ae54c_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./url-4c3ae54c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/url-4c3ae54c.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _server_item_8d384796_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./server-item-8d384796.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/server-item-8d384796.js");
/* harmony import */ var _item_properties_10491b2e_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./item-properties-10491b2e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-properties-10491b2e.js");
/* harmony import */ var _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./add-item-dbbe2f57.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js");
/* harmony import */ var _ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./ui-bca7bcd1.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-bca7bcd1.js");
/* harmony import */ var _functional_81373f6d_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./functional-81373f6d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/functional-81373f6d.js");
/* harmony import */ var _item_types_2029b06b_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./item-types-2029b06b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-types-2029b06b.js");
/* harmony import */ var _item_c58ffced_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./item-c58ffced.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/item-c58ffced.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */

























const arcgisDependencyCheckCss = ".stage{height:100%;overflow:hidden;transform:translate(0, 0)}@media screen and (min-width: 1080px){.stage{height:min(700px, 60vh)}}calcite-modal{--calcite-modal-content-padding:0;--calcite-modal-width:1080px}.top-bar{font-weight:500;padding-left:1rem;padding-right:1rem;padding-top:1.5rem;padding-bottom:0.5rem;font-size:0.875rem}@media screen and (min-width: 1080px){.top-bar{padding-left:0px;padding-right:0px}}.top-notice{margin-bottom:0.75rem;padding-bottom:0.75rem;border-bottom:1px solid var(--calcite-color-border-1)}.open-item{margin-inline-start:0.25rem;padding-inline-start:0.25rem;border-inline-start:1px solid var(--calcite-color-border-1)}.status-banner{display:flex;align-items:center;padding-left:1rem;padding-right:1rem;padding-top:0.25rem;padding-bottom:0.25rem;font-size:0.75rem;border-bottom:1px solid var(--calcite-color-border-2)}.status-banner>calcite-icon{margin-inline-end:0.5rem;color:var(--calcite-color-status-danger)}.status-banner>span{margin-top:2px}.status-banner--info>calcite-icon{color:var(--calcite-color-status-info)}.compact-grid-content{--arcgis-item-browser-content-spacing:0.5rem}.preview-notice{margin-bottom:1rem}";

const ArcgisDependencyCheck = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.workflowCancel = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "workflowCancel", 7);
        this.workflowComplete = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "workflowComplete", 7);
        this.analyzeSharingDetail = async () => {
            let { preProcessedSharingDetail: newShareDetail, items, portal, i18n } = this;
            this.loadingText = "loadingInfo";
            let errorCode;
            if (!this.preProcessedSharingDetail) {
                const analyzeResults = await Promise.all(items.map(({ item, overrideLayers }) => (0,_services_66aee31b_js__WEBPACK_IMPORTED_MODULE_5__.a)(item, portal, overrideLayers, // TODO: remove this assertion when we have a proper type for layerType
                { clearDataCacheOnDone: false })));
                _services_66aee31b_js__WEBPACK_IMPORTED_MODULE_5__.e.forEach((type) => (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.c)(type));
                newShareDetail = analyzeResults.reduce((acc, { error, result }) => {
                    // TODO: hair splitting this maybe
                    errorCode = error === null || error === void 0 ? void 0 : error.code;
                    if (result) {
                        Object.keys(result).forEach((key) => {
                            acc[key] = [...acc[key], ...result[key]];
                        });
                    }
                    return acc;
                }, {
                    needEditableLayers: [],
                    needPubliclyEditableLayers: [],
                    needDataCollectionLayers: [],
                    needsShareLevelUpdateLayers: [],
                    premiumLayers: [],
                    notEditableLayers: [],
                    needBDFSDatastoreUpdate: [],
                    needAuthentication: []
                });
            }
            this.sharingDetail = newShareDetail;
            if (!this.sharingDetail || errorCode === "dataNotAvailable") {
                this.errorMessage = i18n.unableToGetItem;
                return [];
            }
            return this.filterAndGetSharingDetails();
        };
        this.filterAndGetSharingDetails = () => {
            const { sharingDetail } = this;
            if (Object.keys(sharingDetail).every((key) => { var _a; return !((_a = sharingDetail[key]) === null || _a === void 0 ? void 0 : _a.length); })) {
                // No error to show
                return;
            }
            const { needEditableLayers, needsShareLevelUpdateLayers, needBDFSDatastoreUpdate } = sharingDetail;
            this.needsShareLevelUpdateLayers = needsShareLevelUpdateLayers;
            this.needEditableLayers = needEditableLayers;
            this.needBDFSDatastoreUpdate = needBDFSDatastoreUpdate;
            this.shareableItemCount = [
                ...needsShareLevelUpdateLayers,
                ...needEditableLayers,
                ...needBDFSDatastoreUpdate
            ].length;
            const displayItems = Object.keys(sharingDetail).reduce((acc, key) => {
                var _a;
                (_a = sharingDetail[key]) === null || _a === void 0 ? void 0 : _a.forEach((layer) => {
                    acc.push({ item: layer.sourceItem, state: key });
                });
                return acc;
            }, []);
            this.displayItems = displayItems;
            return displayItems;
        };
        this.closeDialog = () => {
            this.workflowCancel.emit();
        };
        this.updateSharing = async () => {
            const { needsShareLevelUpdateLayers, needEditableLayers, needBDFSDatastoreUpdate, portal, items } = this;
            this.isLoading = true;
            this.loadingText = "updatingSharing";
            const needsUpdateLayerInfo = [...needsShareLevelUpdateLayers, ...needEditableLayers];
            const updatedSourceItems = needsUpdateLayerInfo.map(({ sourceItem }) => sourceItem);
            const shouldUpdateShareLevel = needsUpdateLayerInfo.some(({ detail }) => detail.needsShareLevelUpdate);
            const newShareLevel = shouldUpdateShareLevel
                ? // ! This assume all items have the same level of access because that's the only use case right now
                    items[0].item.access
                : null;
            /**
             * BDFS and data store stuff ----------------------------------------
             * non-cloud - 2 types:
             * (1) Big Data File Share item and
             * (2) Data Store.
             *
             * cloud type - 3 types:
             * (1) Big Data File Share item,
             * (2) Data Store (Big Data File Share) and the
             * (3) Data Store (Cloud) items.
             *
             * If user shares the top level item - (1), the dependent data stores (2) and (3) needs to be shared first.
             * If uses share (2), the (3) needs to be shared first.
             * If user only want to share non-cloud (2) and cloud (3), they don’t need to worry about any independent items.
             *
             * That's why this is done first before the actual share call
             */
            const bdfsSourceItems = needBDFSDatastoreUpdate.map(({ sourceItem }) => sourceItem);
            const bdfsItemsToUpdate = bdfsSourceItems.filter((sourceItem) => !sourceItem.typeKeywords.includes("bigDataFileShare"));
            if (bdfsItemsToUpdate.length > 0) {
                await (0,_services_66aee31b_js__WEBPACK_IMPORTED_MODULE_5__.s)(bdfsItemsToUpdate, [], newShareLevel, portal);
            }
            const shouldUpdateGroup = needsUpdateLayerInfo.some(({ detail }) => detail.needsGroupUpdate) &&
                // people in groups can already see the item shared to org or public
                //  so there is no need to share to groups which can cause noises
                newShareLevel !== "public";
            if (!shouldUpdateShareLevel && !shouldUpdateGroup) {
                // The update button shouldn't even show up if there is nothing to update
                console.warn("Unexpected state: no need to update share level or group");
            }
            else {
                await (0,_services_66aee31b_js__WEBPACK_IMPORTED_MODULE_5__.s)(updatedSourceItems, items.map(({ item }) => item), newShareLevel, portal, shouldUpdateGroup);
            }
            this.isLoading = false;
            this.workflowComplete.emit({
                updatedSourceItems: [...updatedSourceItems, ...bdfsSourceItems],
                oldSharingDetail: this.sharingDetail
            });
        };
        this.getStatusInfoForLayerState = (state) => {
            const { helpBase, helpMap } = this.config;
            switch (state) {
                case "needEditableLayers":
                    return {
                        i18nKey: "sharingPDCEnabled",
                        kind: "info"
                    };
                case "needPubliclyEditableLayers":
                case "needDataCollectionLayers":
                    return {
                        i18nKey: "pdc",
                        kind: "danger",
                        link: `${helpBase}${helpMap === null || helpMap === void 0 ? void 0 : helpMap["120004130"]}`
                    };
                case "premiumLayers":
                    return {
                        i18nKey: "premium",
                        kind: "info",
                        link: "https://doc.arcgis.com/en/arcgis-online/reference/faq.htm#SHARE_SUBSCR_LYR"
                    };
                case "notEditableLayers":
                    return { i18nKey: "noPermission", kind: "danger" };
                case "needAuthentication":
                    return { i18nKey: "needsAuthentication", kind: "danger" };
                default:
                    return null;
            }
        };
        this.renderPreviewItemNotice = () => {
            const { previewItemState, getStatusInfoForLayerState, i18n } = this;
            const previewItemStatusInfo = previewItemState
                ? getStatusInfoForLayerState(previewItemState)
                : null;
            if (!previewItemStatusInfo) {
                return null;
            }
            const { i18nKey, kind, link } = previewItemStatusInfo;
            const needShareI18N = i18n.needShare;
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-notice", { open: true, closable: false, scale: "m", kind: kind, slot: "preview-summary-top", class: "preview-notice" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, needShareI18N[i18nKey].panel), link &&
                i18nKey !== "noPermission" &&
                i18nKey !== "sharingPDCEnabled" &&
                i18nKey !== "needsAuthentication" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-link", { slot: "link", href: link, target: "_blank", rel: "noopener" }, needShareI18N[i18nKey].learnMore))));
        };
        this.user = undefined;
        this.portal = undefined;
        this.config = undefined;
        this.api = undefined;
        this.isActive = true;
        this.items = undefined;
        this.preProcessedSharingDetail = undefined;
        this.isLoading = undefined;
        this.sharingDetail = undefined;
        this.sections = [];
        this.needsShareLevelUpdateLayers = [];
        this.needEditableLayers = [];
        this.needBDFSDatastoreUpdate = [];
        this.displayItems = [];
        this.previewItemState = null;
        this.loadingText = "loadingInfo";
        this.errorMessage = null;
        this.shareableItemCount = 0;
    }
    async componentWillLoad() {
        this.items = this.items.map((itemInfo) => {
            var _a;
            return (Object.assign(Object.assign({}, itemInfo), { item: (_a = itemInfo.item.sourceJSON) !== null && _a !== void 0 ? _a : itemInfo.item }));
        });
        const { el } = this;
        const locale = await (0,_locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_3__.g)(el);
        this.i18n = locale[0];
    }
    handleNewPreProcessedSharingDetail() {
        var _a;
        (_a = this.itemBrowserRef) === null || _a === void 0 ? void 0 : _a.refresh();
    }
    componentDidLoad() {
        // Data processing will be handled by item browser on load below
    }
    render() {
        const { updateSharing, isActive, api, closeDialog, i18n, isLoading, loadingText, shareableItemCount, errorMessage, portal, user, config, analyzeSharingDetail, getStatusInfoForLayerState, displayItems, renderPreviewItemNotice } = this;
        const canUpdate = shareableItemCount > 0;
        const hasError = !!errorMessage;
        const needShareI18N = i18n.needShare;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-modal", { onCalciteModalClose: closeDialog, open: isActive, outsideCloseDisabled: true, escapeDisabled: true }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "header", class: "header" }, i18n.updateSharing), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content", class: "stage" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-alert", { icon: true, open: hasError, label: errorMessage, kind: "danger", onCalciteAlertClose: () => (this.errorMessage = null) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "message" }, errorMessage)), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-loader", { active: isLoading, text: i18n[loadingText] }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser", { fetch: async () => {
                var _a;
                const displayItems = (_a = (await analyzeSharingDetail())) !== null && _a !== void 0 ? _a : [];
                return {
                    total: displayItems.length,
                    nextStart: 0,
                    num: displayItems.length,
                    start: 0,
                    results: displayItems.map(({ item }) => item)
                };
            }, onArcgisItemBrowserPreview: ({ detail: previewItem }) => {
                var _a, _b;
                if (!previewItem) {
                    this.previewItemState = null;
                }
                this.previewItemState =
                    (_b = (_a = displayItems.find(({ item }) => item.id === previewItem.id)) === null || _a === void 0 ? void 0 : _a.state) !== null && _b !== void 0 ? _b : null;
            }, hideContentTop: true, contentPaddedBottom: true, hidePreviewFooters: true, portal: portal, user: user, config: config, selection: "none", api: api, num: _types_a031c1da_js__WEBPACK_IMPORTED_MODULE_4__.a, ref: (ele) => (this.itemBrowserRef = ele) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-content", { class: "compact-grid-content", slot: "content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "top-bar" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "top-notice", innerHTML: i18n[portal.isPortal ? "noticeEnterprise" : "notice"] }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, i18n.canBeShared
            .replace("${count}", shareableItemCount.toString())
            .replace("${total}", displayItems.length.toString()))), displayItems.map(({ item, state }) => {
            const statusInfo = getStatusInfoForLayerState(state);
            const isInfoStatus = (statusInfo === null || statusInfo === void 0 ? void 0 : statusInfo.kind) === "info";
            return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-item-browser-card", { key: item.id, item: item, portal: portal, user: user, baseUrl: config.baseUrl, preview: "top", showOwner: true, showDateUpdated: true, showItemType: true, showSummary: true, showBadges: true }, statusInfo && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "content-top", class: {
                    "status-banner": true,
                    "status-banner--info": isInfoStatus
                } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { icon: isInfoStatus ? "information" : "exclamationMarkTriangle", scale: "s" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", null, needShareI18N[statusInfo.i18nKey].notice))), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { slot: "actions-end", class: "open-item" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { scale: "s", appearance: "transparent", kind: "neutral", onClick: () => window.open((0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_2__.g)(item.id, config.baseUrl), "_blank", "noopener") }, i18n.goToItem))));
        })), renderPreviewItemNotice())), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "primary", appearance: canUpdate ? "outline" : "solid", kind: "brand", "data-id": "cancelButton", onClick: () => (this.isActive = false), width: "full" }, i18n[canUpdate ? "cancel" : "ok"]), canUpdate && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "secondary", appearance: "solid", kind: "brand", "data-id": "nextButton", onClick: updateSharing, width: "full", disabled: isLoading }, i18n.update))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "preProcessedSharingDetail": ["handleNewPreProcessedSharingDetail"]
    }; }
};
ArcgisDependencyCheck.style = arcgisDependencyCheckCss;

const getUserGroups = async ({ items, portal, shareMode, user }) => {
    try {
        const itemOwner = await getItemOwner({ user, items, portal });
        // Useful in case we're admin trying to change the owner's item
        const allUsers = user.username === itemOwner.username ? [user] : [user, itemOwner];
        const userGroupLookup = await queryUserDetails({
            portal,
            user,
            shareMode,
            itemOwner
        });
        const groupResults = await Promise.all(allUsers.map((currentUser) => getAllGroupsForUser({ user: currentUser, portalUser: user, portal, shareMode, userGroupLookup, items })));
        const flattenedGroups = groupResults.flatMap((result) => result.result);
        const groupIds = flattenedGroups.map(({ id }) => id);
        const uniqueGroups = flattenedGroups.filter((group, i) => groupIds.indexOf(group.id) === i);
        return {
            result: {
                uniqueGroups,
                userGroupLookup,
                allUsers,
                searchUsername: user.username === itemOwner.username ? user.username : itemOwner.username
            }
        };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
const MAX_GROUP_SEARCH = 100;
/** Fetch the group for the item that the user is also a part of */
const getItemGroups = async (itemIds, userGroupIds, portal) => {
    try {
        const itemGroupResponses = await Promise.all((0,_functional_44de8fcf_js__WEBPACK_IMPORTED_MODULE_9__.g)(userGroupIds, MAX_GROUP_SEARCH).map(async (groupIds) => (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.r)(`${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.g)(portal)}/content/itemsgroups`, {
            items: itemIds.join(","),
            groups: groupIds.join(",")
        })));
        const result = {};
        itemGroupResponses.forEach((response) => {
            Object.keys(response).forEach((groupId) => {
                const group = response[groupId];
                if (!result[groupId]) {
                    result[groupId] = group;
                }
                else {
                    result[groupId].items = [...result[groupId].items, ...group.items];
                }
            });
        });
        return { result };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
/**
 * Given a user, get all of their groups using the groups search endpoint
 *
 * pseudocode:
 * get the first 100 groups (the max allowed by groups search endpoint)
 * if that accounts for all of a user's groups, return them
 * else, get all the other groups
 * (in parallel batched requests based on response.nextStart)
 * and return them
 */
const getAllGroupsForUser = async ({ user, portalUser, portal, shareMode, userGroupLookup, items }) => {
    var _a;
    const params = {
        q: (0,_utils_f4f44b88_js__WEBPACK_IMPORTED_MODULE_6__.a)({
            shareMode,
            currentUsername: portalUser.username,
            user,
            userGroupLookup,
            isPrivate: ((_a = items[0]) === null || _a === void 0 ? void 0 : _a.access) === "private"
        }),
        num: 100,
        searchUserAccess: "groupMember",
        searchUserName: user.username
    };
    try {
        const firstGroupSearchResult = await fetchGroups(portal, params);
        // if nextStart is -1, we've got all the groups.
        if (firstGroupSearchResult.nextStart === -1) {
            return { result: firstGroupSearchResult.results };
        }
        // if not, we'll have to make n more requests
        // we can do these in parallel, and concatenate them with Promise.all()
        const requestsNeeded = Math.ceil(firstGroupSearchResult.total / 100) - 1;
        const groupSearchPromises = [];
        for (let i = 0; i < requestsNeeded; i++) {
            groupSearchPromises.push(new Promise(async (innerResolve) => {
                const start = (i + 1) * 100 + 1;
                const innerResponse = await fetchGroups(portal, Object.assign(Object.assign({}, params), { start }));
                innerResolve(innerResponse.results);
            }));
        }
        const otherGroupSearchResults = (await Promise.all(groupSearchPromises)).flat();
        return { result: [...firstGroupSearchResult.results, ...otherGroupSearchResults] };
    }
    catch (error) {
        console.error(error);
        return { error: { code: "unhandledError" } };
    }
};
const fetchGroups = (portal, params) => (0,_service_8c2c4241_js__WEBPACK_IMPORTED_MODULE_7__.r)(`${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_1__.s)(portal)}/community/groups`, portal, {
    body: params,
    usePost: true
});
const getItemOwner = async ({ user, items, portal }) => {
    var _a;
    if ((0,_item_3535552d_js__WEBPACK_IMPORTED_MODULE_2__.d)(items, user) &&
        (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_10__.p)({ items, user, portal }) &&
        (0,_privileges_5c382f61_js__WEBPACK_IMPORTED_MODULE_10__.q)(user)) {
        const firstItem = items[0];
        return (_a = firstItem.itemOwner) !== null && _a !== void 0 ? _a : (await (0,_user_3ea69c3a_js__WEBPACK_IMPORTED_MODULE_8__.f)(firstItem.owner, portal));
    }
    return user;
};
const queryUserDetails = async ({ user, portal, shareMode, itemOwner }) => {
    const userDetailResults = await Promise.all([
        (0,_user_3ea69c3a_js__WEBPACK_IMPORTED_MODULE_8__.f)(user.username, portal),
        // for admin case, we also fetch the item owner's group
        shareMode === "admin" && itemOwner.username !== user.username ? (0,_user_3ea69c3a_js__WEBPACK_IMPORTED_MODULE_8__.f)(itemOwner.username, portal) : null
    ]);
    return Object.assign({ [user.username]: userDetailResults[0].groups }, (!!userDetailResults[1] && { [itemOwner.username]: userDetailResults[1].groups }));
};

const arcgisItemShareGroupCss = ".content{display:flex;align-items:center;justify-content:space-between;margin-top:1rem}.information-text{font-size:0.875rem;margin-top:0px;margin-bottom:0px}.text-padding{margin-top:0.5rem}";

const ArcgisItemShareGroup = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.editGroupClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "editGroupClick", 7);
        this.dirtyChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "dirtyChange", 7);
        this.analyzeUserGroupComplete = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "analyzeUserGroupComplete", 7);
        this.removeClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "removeClick", 7);
        this.revertClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "revertClick", 7);
        this.hasGroups = false;
        this.user = undefined;
        this.portal = undefined;
        this.config = undefined;
        this.items = undefined;
        this.shareMode = undefined;
        this.isLoading = undefined;
        this.i18n = undefined;
        this.selectedGroupData = [];
        this.initialSelectedGroups = [];
        this.canShareItemToGroup = false;
        this.isDirty = false;
        this.isSharingMixed = false;
    }
    handleSelectedGroupsChange(newList) {
        const { user, initialSelectedGroups, items } = this;
        this.canShareItemToGroup = (0,_utils_f4f44b88_js__WEBPACK_IMPORTED_MODULE_6__.k)(newList, user);
        this.isDirty = (0,_utils_f4f44b88_js__WEBPACK_IMPORTED_MODULE_6__.i)(newList, initialSelectedGroups);
        this.isSharingMixed = (0,_utils_f4f44b88_js__WEBPACK_IMPORTED_MODULE_6__.l)(items, newList);
        this.dirtyChange.emit(this.isDirty);
    }
    async componentDidLoad() {
        const { user, portal, items, shareMode } = this;
        this.isLoading = true;
        // TODO: handle error
        const { result } = await getUserGroups({
            user,
            portal,
            items,
            shareMode
        });
        const { uniqueGroups: userGroups, userGroupLookup, searchUsername, allUsers } = result;
        const { result: itemGroupInfo } = await getItemGroups(items.map((item) => item.id), userGroups.map((group) => group.id), portal);
        const initialGroups = userGroups
            // Find the intersect of the groups that the user is a member of
            //  and the groups that the item is shared to
            .filter(({ id }) => !!itemGroupInfo[id])
            .map((group) => ({
            group,
            selectedByItemIds: items
                .filter(({ id }) => !!itemGroupInfo[group.id].items.find((item) => item.itemId === id))
                .map((item) => item.id)
        }));
        this.hasGroups = userGroups.length > 0;
        this.canShareItemToGroup = (0,_utils_f4f44b88_js__WEBPACK_IMPORTED_MODULE_6__.k)(initialGroups, user);
        this.initialSelectedGroups = initialGroups;
        this.isLoading = false;
        this.analyzeUserGroupComplete.emit({
            allUsers,
            initialSelectedGroups: initialGroups,
            userGroupLookup,
            searchUsername
        });
    }
    render() {
        const { i18n, isLoading, canShareItemToGroup, removeClick, revertClick, selectedGroupData, hasGroups, isDirty, isSharingMixed } = this;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-description", { header: i18n.title, headerSideContent: isDirty ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", iconStart: "reset", disabled: isLoading, onClick: () => revertClick.emit() }, i18n.revert)) : (selectedGroupData.length > 0 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "transparent", iconStart: "x", disabled: isLoading, onClick: () => removeClick.emit() }, i18n.remove))) }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "group-container" }, selectedGroupData.length > 0 ? ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-thumbnail-stack", { groups: selectedGroupData.map(({ group }) => group) })) : ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "information-text" }, i18n[hasGroups ? "noneYet" : "noGroup"]))), hasGroups && canShareItemToGroup && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { iconStart: "group", appearance: "outline-fill", disabled: isLoading, onClick: () => this.editGroupClick.emit() }, i18n.edit))), !isLoading && isSharingMixed && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("p", { class: "information-text text-padding" }, i18n.mixedGroupSharing))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
    static get watchers() { return {
        "selectedGroupData": ["handleSelectedGroupsChange"]
    }; }
};
ArcgisItemShareGroup.style = arcgisItemShareGroupCss;

const arcgisItemShareGroupCardCss = ":host{display:contents}";

const ArcgisItemShareGroupCard = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.revertClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "revertClick", 7);
        this.user = undefined;
        this.portal = undefined;
        this.group = undefined;
        this.groupCount = undefined;
        this.initialSelectedGroupDataLookup = undefined;
        this.selectedGroupDataLookup = undefined;
        this.totalItemCount = undefined;
        this.i18n = undefined;
    }
    render() {
        const { group, groupCount, totalItemCount, initialSelectedGroupDataLookup, selectedGroupDataLookup, revertClick, portal, user, i18n } = this;
        const totalItemCountStr = totalItemCount.toString();
        const groupId = group.id;
        const curGroupCount = groupCount[group.id];
        let selectionType = "none";
        switch (true) {
            case curGroupCount < totalItemCount:
                selectionType = "indeterminate";
                break;
            case curGroupCount === totalItemCount:
                selectionType = "all";
                break;
        }
        const initialSelectionType = initialSelectedGroupDataLookup[groupId];
        /**
         * We can't just do initialSelectionType !== selectionType because
         *  initialSelectionType can be undefined if a group is not selected initially
         *  since we construct `initialSelectedGroupDataLookup` based on the pre-selected group
         *  and don't have the knowledge about other groups since they're from the API
         * So it will still show the revert button even if the group is not selected initially and selectionType === "none"
         *  without that condition
         */
        const isGroupSelectionChanged = (!!initialSelectionType || selectionType !== "none") &&
            initialSelectionType !== selectionType;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-group-card", { group: group, portal: portal, user: user, name: group.title, selected: !!selectedGroupDataLookup[groupId], indeterminate: selectionType === "indeterminate", selection: "multiple", preview: "action", view: "compact", showOwner: true, showDateUpdated: true, showSummary: true, key: groupId }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { slot: "content-end" }, curGroupCount && curGroupCount > 0 && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "group-item-counter" }, i18n[isGroupSelectionChanged ? "willShareCountHint" : "sharedCountHint"]
            .replace("${numItem}", curGroupCount.toLocaleString())
            .replace("${totalItem}", totalItemCountStr))), isGroupSelectionChanged && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { class: "revert-single-group-cta", appearance: "transparent", onClick: (event) => {
                event.stopPropagation();
                revertClick.emit();
            } }, i18n.revert)))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisItemShareGroupCard.style = arcgisItemShareGroupCardCss;



//# sourceMappingURL=arcgis-dependency-check_3.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/types-a031c1da.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/types-a031c1da.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I: () => (/* binding */ ITEM_BROWSER_BUILT_IN_FILTERS),
/* harmony export */   a: () => (/* binding */ ITEM_BROWSER_MAX_ITEMS)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const ITEM_BROWSER_BUILT_IN_FILTERS = ["folder", "group", "contentType"];
const ITEM_BROWSER_MAX_ITEMS = 99999; // arbitrary large number so it show all items



//# sourceMappingURL=types-a031c1da.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-3ea69c3a.js":
/*!**********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/user-3ea69c3a.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getFolderFromId),
/* harmony export */   b: () => (/* binding */ getHomeFolderForUser),
/* harmony export */   c: () => (/* binding */ createFolder),
/* harmony export */   d: () => (/* binding */ getSignedInUsersGroups),
/* harmony export */   e: () => (/* binding */ getSignedInUsersFavoritesGroup),
/* harmony export */   f: () => (/* binding */ fetchUser),
/* harmony export */   g: () => (/* binding */ getFolders),
/* harmony export */   u: () => (/* binding */ updateFolder)
/* harmony export */ });
/* harmony import */ var _portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./portal-d518b571.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/portal-d518b571.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



async function fetchUser(username, portal) {
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)(portal)}/community/users/${username}`);
}
async function fetchSelf() {
    return (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(`${(0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.g)()}/community/self`);
}
async function getSignedInUsersGroups() {
    var _a;
    const user = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user;
    if (!user) {
        return [];
    }
    const self = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(() => fetchSelf(), "communitySelf", user.username);
    return (_a = self === null || self === void 0 ? void 0 : self.groups) !== null && _a !== void 0 ? _a : [];
}
async function getSignedInUsersFavoritesGroup() {
    const user = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === null || _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c === void 0 ? void 0 : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user;
    if (!user) {
        return null;
    }
    const self = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.f)(() => fetchSelf(), "communitySelf", user.username);
    return self.favGroupId;
}
function getUserContentUrl(user, portal) {
    var _a;
    return (_a = user === null || user === void 0 ? void 0 : user.userContentUrl) !== null && _a !== void 0 ? _a : `${portal === null || portal === void 0 ? void 0 : portal.restUrl}/content/users/${user.username}`;
}
async function getUserContent(portalUser) {
    var _a;
    const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
    const portal = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal;
    const url = getUserContentUrl(user, portal);
    const response = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, { num: 1 });
    return Promise.resolve(response);
}
async function getFolders(portalUser) {
    var _a;
    const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
    const { folders } = await getUserContent(user);
    const { username } = user;
    const sortedFolders = folders.sort((a, b) => a.title.localeCompare(b.title));
    // add the home folder as if it's in the list
    return [{ username, id: username, title: username, created: "now" }, ...sortedFolders];
}
async function getFolderFromId(folderId, portalUser) {
    var _a;
    const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
    const folders = await getFolders(user);
    return folders.find((folder) => folder.id === folderId);
}
function getHomeFolderForUser(username) {
    return { username, id: username, title: username, created: "now" };
}
async function createFolder(folderName, portalUser) {
    var _a;
    const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
    const url = `${getUserContentUrl(user, _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal)}/createFolder`;
    const folderResponse = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, { title: folderName }, {}, "post");
    return folderResponse;
}
async function updateFolder(id, newTitle, portalUser) {
    var _a;
    const user = (_a = portalUser !== null && portalUser !== void 0 ? portalUser : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.user) !== null && _a !== void 0 ? _a : _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.user;
    const url = `${getUserContentUrl(user, _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal)}/${id}/updateFolder`;
    try {
        const result = await (0,_portal_d518b571_js__WEBPACK_IMPORTED_MODULE_0__.r)(url, { newTitle }, {}, "post");
        return { result };
    }
    catch (error) {
        return { error: { code: "unhandledError" } };
    }
}



//# sourceMappingURL=user-3ea69c3a.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,