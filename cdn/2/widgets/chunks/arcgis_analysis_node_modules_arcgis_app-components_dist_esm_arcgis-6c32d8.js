"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-6c32d8"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-field-pick-list_11.entry.js":
/*!******************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-field-pick-list_11.entry.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_field_pick_list: () => (/* binding */ ArcgisSmartMappingFieldPickList),
/* harmony export */   arcgis_smart_mapping_panels_chart_size: () => (/* binding */ ArcgisSmartMappingPanelsChartSize),
/* harmony export */   arcgis_smart_mapping_panels_color_size: () => (/* binding */ ArcgisSmartMappingPanelsColorSize),
/* harmony export */   arcgis_smart_mapping_panels_color_size_univariate: () => (/* binding */ ArcgisSmartMappingPanelsColorSizeUnivariate),
/* harmony export */   arcgis_smart_mapping_panels_compare: () => (/* binding */ ArcgisSmartMappingPanelsCompare),
/* harmony export */   arcgis_smart_mapping_panels_dot_density: () => (/* binding */ ArcgisSmartMappingPanelsDotDensity),
/* harmony export */   arcgis_smart_mapping_panels_heatmap: () => (/* binding */ ArcgisSmartMappingPanelsHeatmap),
/* harmony export */   arcgis_smart_mapping_panels_predominance_size: () => (/* binding */ ArcgisSmartMappingPanelsPredominanceSize),
/* harmony export */   arcgis_smart_mapping_panels_relationship_size: () => (/* binding */ ArcgisSmartMappingPanelsRelationshipSize),
/* harmony export */   arcgis_smart_mapping_panels_simple: () => (/* binding */ ArcgisSmartMappingPanelsSimple),
/* harmony export */   arcgis_smart_mapping_panels_type_size: () => (/* binding */ ArcgisSmartMappingPanelsTypeSize)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _loading_69139907_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./loading-69139907.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js");
/* harmony import */ var _colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./colorSizeUnivariant-d266ac7c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorSizeUnivariant-d266ac7c.js");
/* harmony import */ var _symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./symbolStyler-04635b2b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/symbolStyler-04635b2b.js");
/* harmony import */ var _heatmap_75ffd452_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./heatmap-75ffd452.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/heatmap-75ffd452.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./color-d6da0a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-d6da0a9a.js");
/* harmony import */ var _location_e26b539f_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./location-e26b539f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/location-e26b539f.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
















function round(numbers, options) {
    let numbersCopy = numbers.slice(0), number, prev, next, digits, fractionDigits, fixedNumber = 0, fixedNumbers, i, j, found, index, pctTolerance = !options || options.tolerance == null ? 2 : options.tolerance, indexes = options && options.indexes, strictBounds = !options || options.strictBounds == null ? false : options.strictBounds;
    const numericAscending = (a, b) => {
        return a - b;
    };
    //console.log("Numbers: ", numbers);
    //console.log("Percent tolerance: ", pctTolerance);
    // Find stops that need to be rounded.
    if (indexes) {
        indexes.sort(numericAscending);
    }
    else {
        // Get indexes of all numbers.
        // All stop values will be rounded.
        indexes = [];
        for (i = 0; i < numbersCopy.length; i++) {
            indexes.push(i);
        }
    }
    //console.log("indexes: ", indexes);
    for (i = 0; i < indexes.length; i++) {
        index = indexes[i];
        number = numbersCopy[index];
        prev = index === 0 ? undefined : numbersCopy[index - 1];
        next = index === numbersCopy.length - 1 ? undefined : numbersCopy[index + 1];
        digits = getDigits(number);
        fractionDigits = digits.fractional;
        //console.log(number, digits, prev, next);
        // Let's reduce the precision of fractional numbers.
        if (fractionDigits) {
            j = 0;
            found = false;
            // Keep iterating until we find an optimal precision.
            while (j <= fractionDigits && !found) {
                fixedNumbers = getFixedNumbers(number, j);
                // Use the adjusted/fixed number only if it introduces minimal change
                // in the sequence.
                fixedNumber = strictBounds && i === 0 ? fixedNumbers[1] : fixedNumbers[0];
                found = hasMinimalChange(number, fixedNumber, prev, next, pctTolerance);
                j++;
            }
            if (found) {
                // Update the sequence with the fixed number so that the next number
                // in sequence can be adjusted based on it.
                numbersCopy[index] = fixedNumber;
            }
        }
    }
    //console.log("Fixed: ", numbersCopy);
    return numbersCopy;
}
function getDigits(number) {
    // Returns number of digits in the integer and fractional parts of the
    // given numeric value.
    const _reNumber = /^-?(\d+)(\.(\d+))?$/i;
    let numString = String(number), match = numString.match(_reNumber), retVal = {
        integer: 0,
        fractional: 0
    };
    if (match && match[1]) {
        retVal.integer = match[1].split("").length;
        // Integer digits can also be calculated using this logic:
        // var adjust = (num > 0) ? Math.floor(num) : Math.ceil(num);
        // adjust = Math.abs(adjust);
        // return Math.floor( Math.log(adjust) / Math.LN10 );
        retVal.fractional = match[3] ? match[3].split("").length : 0;
        // Fractional digits can also be calculated using this logic:
        //  var e = 1;
        //
        //  while (Math.round(number * e) / e !== number) {
        //    e *= 10;
        //  }
        //
        //  // Max precision returned seems to be 15
        //  return Math.round( Math.log(e) / Math.LN10 );
    }
    else if (numString.toLowerCase().indexOf("e") > -1) {
        // Number in exponential notation.
        // Ex: 1.4868420127616598e-7, 134e25, 134e-25 etc
        let parts = numString.split("e"), numericPart_ = parts[0], powerOfTen_ = parts[1], digits, isPosPower;
        if (numericPart_ && powerOfTen_) {
            // Convert strings to numbers.
            const numericPart = Number(numericPart_);
            let powerOfTen = Number(powerOfTen_);
            // Is the power positive?
            isPosPower = powerOfTen > 0;
            // Get the absolute value of power.
            if (!isPosPower) {
                powerOfTen = Math.abs(powerOfTen);
            }
            digits = getDigits(numericPart);
            // Update "digits" using powerOfTen value.
            if (isPosPower) {
                digits.integer += powerOfTen;
                if (powerOfTen > digits.fractional) {
                    digits.fractional = 0;
                }
                else {
                    digits.fractional -= powerOfTen;
                }
            }
            else {
                digits.fractional += powerOfTen;
                if (powerOfTen > digits.integer) {
                    digits.integer = 1;
                }
                else {
                    digits.integer -= powerOfTen;
                }
            }
            retVal = digits;
        }
    }
    return retVal;
}
function getFixedNumbers(number, fractionDigits) {
    let num1, num2;
    num1 = Number(number.toFixed(fractionDigits));
    if (num1 < number) {
        // num2 will be larger than num1/number
        num2 = num1 + 1 / Math.pow(10, fractionDigits);
    }
    else {
        // num2 will be smaller than num1/number
        num2 = num1;
        num1 = num1 - 1 / Math.pow(10, fractionDigits);
    }
    // Fix spurious floating point number precision.
    // Examples:
    //  0.3 - 0.1 = 0.19999999999999998
    //  0.2 + 0.1 = 0.30000000000000004
    // http://stackoverflow.com/questions/1458633/how-to-deal-with-floating-point-number-precision-in-javascript
    num1 = Number(num1.toFixed(fractionDigits));
    num2 = Number(num2.toFixed(fractionDigits));
    // Returns two numbers (equivalent to floor and ceil of the given number):
    // One less than the given number.
    // The other greater than the given number.
    // num1 is floor, num2 is ceil.
    return [num1, num2];
}
function hasMinimalChange(number, fixedNumber, prev, next, pctTolerance) {
    // Returns true if the given <fixedNumber> has changed minimally with
    // respect to the nearby numbers in the sequence given by <prev> and <next>.
    let change = getPctChange(number, fixedNumber, prev, next), prevOk, nextOk, isMinimal;
    //console.log(" ", change, fixedNumber);
    // It is considered minimal change if one of the following conditions is true:
    // 1. Change w.r.t <prev> is atmost <pctTolerance> AND
    //    Change w.r.t <next> is atmost <pctTolerance>
    // 2. Sum of change w.r.t <prev> and <next> is atmost twice the <pctTolerance>.
    prevOk = change.prev == null || change.prev <= pctTolerance;
    nextOk = change.next == null || change.next <= pctTolerance;
    isMinimal = (prevOk && nextOk) || change.prev + change.next <= 2 * pctTolerance;
    return isMinimal;
}
function getPctChange(number, fixedNumber, prev, next) {
    // Returns the absolute percent change of the given number
    // (after it has been changed to <fixedNumber>)
    // w.r.t its nearby numbers given as <prev> and <next>.
    let change = {
        prev: null,
        next: null
    }, oldDiff, newDiff, diffChange;
    if (prev != null) {
        oldDiff = number - prev;
        newDiff = fixedNumber - prev;
        diffChange = newDiff - oldDiff;
        change.prev = Math.floor(Math.abs((diffChange * 100) / oldDiff));
    }
    if (next != null) {
        oldDiff = next - number;
        newDiff = next - fixedNumber;
        diffChange = newDiff - oldDiff;
        change.next = Math.floor(Math.abs((diffChange * 100) / oldDiff));
    }
    return change;
}

const arcgisSmartMappingFieldPickListCss = ".popover{z-index:100}.panel{min-height:300px}.content{max-height:60vh}.selection-button-div{padding:4px 10px}";

const ArcgisSmartMappingFieldPickList = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingFieldPickListClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingFieldPickListClose", 7);
        this.arcgisSmartMappingFieldPickListChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingFieldPickListChange", 7);
        this.arcgisSmartMappingFieldPickListSortByChange = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingFieldPickListSortByChange", 7);
        this.maxNumberFieldCount = 10;
        this.selectedFields = [];
        this.fields = undefined;
        this.fieldToReplace = undefined;
        this.popoverProps = undefined;
        this.singleEditMode = false;
        this.heading = undefined;
        this.okBtnText = undefined;
        this.filterPlaceholderText = undefined;
        this.lastSortBy = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.L.default;
        this.filterFields = null;
        this.isOpen = false;
        this.width = undefined;
    }
    // --------------------------------------------------------------------------
    //
    // Public Methods
    //
    // --------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    async reposition() {
        var _a;
        (_a = this.popoverNode) === null || _a === void 0 ? void 0 : _a.reposition();
    }
    // --------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    // --------------------------------------------------------------------------
    async componentWillLoad() {
        var _a;
        this.isOpen = true;
        this.rendererFieldInfosMap = (_a = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.selectedFields) === null || _a === void 0 ? void 0 : _a.reduce((map, fieldInfo) => {
            map[fieldInfo.field] = fieldInfo;
            return map;
        }, {});
    }
    componentDidLoad() {
        var _a;
        this.setUpObservers();
        (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.observe(this.popoverProps.refElement);
        const disabledListItems = this.checkDisabledListItems();
        disabledListItems.forEach((item) => this.listNode.removeChild(item));
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    disconnectedCallback() {
        var _a, _b;
        (_a = this.mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
        (_b = this.resizeObserver) === null || _b === void 0 ? void 0 : _b.unobserve(this.popoverProps.refElement);
    }
    // --------------------------------------------------------------------------
    //
    // Render  Methods
    //
    // --------------------------------------------------------------------------
    render() {
        const props = this.popoverProps;
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "js-app-flyout" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-popover", { dir: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.isRTL ? "rtl" : "ltr", class: "popover", placement: props.placement || "leading-start", open: this.isOpen, pointerDisabled: true, referenceElement: props.refElement, offsetDistance: props.offsetDistance || -(props.popoverWidth || this.width) + 10, offsetSkidding: props.offsetSkidding || 0, overlayPositioning: props.overlayPositioning, triggerDisabled: props.triggerDisabled, label: this.heading ||
                (this.singleEditMode ? strings.replaceField : strings.fieldPickList.selectFields), ref: (node) => (this.popoverNode = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow", { ref: (node) => (this.flowNode = node), style: {
                width: `${this.width || props.popoverWidth}px`
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { ref: (node) => (this.flowItemNode = node), class: "panel", heading: this.heading ||
                (this.singleEditMode ? strings.replaceField : strings.fieldPickList.selectFields), closable: true, onCalciteFlowItemClose: () => this.arcgisSmartMappingFieldPickListClose.emit() }, !this.singleEditMode && this.renderAddButton(), this.renderCancelButton(), this.renderList())))));
    }
    renderAddButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", appearance: "solid", width: "half", scale: "m", onClick: () => this.arcgisSmartMappingFieldPickListClose.emit({
                selectedFields: this.selectedFields
            }) }, this.okBtnText || strings.add));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", appearance: "outline-fill", width: this.singleEditMode ? "full" : "half", scale: "m", onClick: () => this.arcgisSmartMappingFieldPickListClose.emit() }, strings.cancel));
    }
    renderList() {
        var _a;
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { selectionMode: this.singleEditMode ? "single-persist" : "multiple", ref: (node) => (this.listNode = node), class: "content", filterEnabled: this.fields.length >= 10, filterPlaceholder: (_a = this.filterPlaceholderText) !== null && _a !== void 0 ? _a : strings.fieldPickList.searchFields, onCalciteListFilter: () => {
                var _a, _b;
                this.filterFields = (_b = (_a = this.listNode) === null || _a === void 0 ? void 0 : _a.filteredItems) === null || _b === void 0 ? void 0 : _b.map((item) => {
                    return item.value;
                });
            } }, this.renderSortDropdown(), [...this.getSortedList()].map((field) => {
            return this.renderListItem(field);
        })));
    }
    renderListItem(field) {
        var _a;
        const { layer, mapView, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const isBinningLayer = "featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { key: field.layerField.name, label: field.label || field.layerField.name, "data-type": field.simpleFieldType, value: field.layerField.name, selected: this.singleEditMode && field.layerField.name === this.fieldToReplace.field, metadata: {
                label: field.label,
                fieldName: field.layerField.name
            }, onCalciteListItemSelect: () => {
                this.selectedFields = this.listNode.selectedItems.map((node) => node.value);
                if (this.singleEditMode) {
                    if (this.selectedFields[0] !== this.fieldToReplace.field) {
                        this.arcgisSmartMappingFieldPickListClose.emit({
                            selectedFields: this.selectedFields
                        });
                    }
                    return;
                }
                this.checkDisabledListItems();
                this.arcgisSmartMappingFieldPickListChange.emit({ selectedFields: this.selectedFields });
            } }, !isBinningLayer && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "actions-end", text: strings.fieldPickList.info, scale: "s", icon: "information", onClick: (event) => {
                var _a;
                event.stopPropagation();
                const action = event.target;
                const fieldInfoFlowItem = document.createElement("calcite-flow-item");
                fieldInfoFlowItem.heading = (_a = field.label) !== null && _a !== void 0 ? _a : field.layerField.name;
                fieldInfoFlowItem.description = field.layerField.name;
                const fieldInfo = document.createElement("arcgis-field-info");
                fieldInfo.lang = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.fullLocale;
                fieldInfo.fieldName = field.layerField.name;
                fieldInfo.layer = layer;
                fieldInfo.view = mapView;
                fieldInfo.classList.add("content");
                fieldInfoFlowItem.appendChild(fieldInfo);
                fieldInfoFlowItem.addEventListener("calciteFlowItemBack", () => {
                    requestAnimationFrame(() => action.setFocus());
                    fieldInfoFlowItem.removeChild(fieldInfo);
                    this.flowNode.removeChild(fieldInfoFlowItem);
                });
                this.flowNode.appendChild(fieldInfoFlowItem);
                requestAnimationFrame(() => fieldInfoFlowItem.setFocus());
            } }))));
    }
    renderSortDropdown() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderSortMenu = this.fields.length > 10;
        if (!renderSortMenu) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown", { placement: "bottom-end", overlayPositioning: "fixed", slot: "filter-actions-end", ref: (node) => (this.dropdownNode = node), onCalciteDropdownOpen: () => {
                var _a;
                (_a = this.mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
                this.mutationObserver.observe(this.popoverNode, { attributes: true });
            }, onCalciteDropdownClose: () => { var _a; return (_a = this.mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect(); }, onCalciteDropdownSelect: () => {
                var _a;
                this.lastSortBy = _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.L[(_a = this.dropdownNode.selectedItems[0]) === null || _a === void 0 ? void 0 : _a.label];
                this.arcgisSmartMappingFieldPickListSortByChange.emit(this.lastSortBy);
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-action", { slot: "trigger", text: strings.fieldPickList.sort, title: strings.fieldPickList.sort }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-icon", { scale: "s", icon: "sortDescending" })), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-group", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { label: _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.L.default, selected: this.lastSortBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.L.default }, strings.fieldPickList.default), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { label: _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.L.display, selected: this.lastSortBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.L.display }, strings.fieldPickList.displayName), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { label: _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.L.type, selected: this.lastSortBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.L.type }, strings.fieldPickList.type), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-dropdown-item", { label: _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.L.field, selected: this.lastSortBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.L.field }, strings.fieldPickList.fieldName))));
    }
    // --------------------------------------------------------------------------
    //
    // Private Methods
    //
    // --------------------------------------------------------------------------
    checkDisabledListItems() {
        if (!this.listNode) {
            return;
        }
        const counts = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.C)();
        if (this.singleEditMode) {
            counts[this.fieldToReplace.simpleFieldType]--;
        }
        else {
            this.selectedFields.forEach((fieldName) => {
                const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.u)(fieldName);
                if (field) {
                    const type = field.simpleFieldType;
                    switch (type) {
                        case "number":
                            counts.number++;
                            break;
                        case "string":
                            counts.string++;
                            break;
                        case "date":
                            counts.date++;
                            break;
                    }
                }
            });
        }
        const disabledListItems = [];
        this.listNode
            .querySelectorAll("calcite-list-item")
            .forEach((item) => this.enableListItem(item));
        if (_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.mapImageSublayer &&
            !_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.supportsArcade &&
            counts.number + counts.string + counts.date + counts.unknown === 1) {
            // max 1 field
            this.listNode
                .querySelectorAll(`[data-type="string"], [data-type="number"], [data-type="date"]`)
                .forEach((item) => {
                if (this.selectedFields.indexOf(item.value) === -1) {
                    this.disableListItem(item);
                    disabledListItems.push(item);
                }
            });
        }
        else if (_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.mapImageSublayer &&
            counts.number + counts.string + counts.date + counts.unknown === 1 &&
            counts.date === 1) {
            // max 1 date field
            this.listNode
                .querySelectorAll(`[data-type="date"]`)
                .forEach((item) => {
                if (this.selectedFields.indexOf(item.value) === -1) {
                    this.disableListItem(item);
                    disabledListItems.push(item);
                }
            });
        }
        else if (counts.string === 1) {
            // max 1 string field
            this.listNode
                .querySelectorAll(`[data-type="string"]`)
                .forEach((item) => {
                if (this.selectedFields.indexOf(item.value) === -1) {
                    this.disableListItem(item);
                    disabledListItems.push(item);
                }
            });
            if (counts.number === 1 || counts.date === 1 || counts.unknown === 1) {
                // max 1 number/date field if there is 1 string field
                this.listNode
                    .querySelectorAll(`[data-type="number"], [data-type="date"]`)
                    .forEach((item) => {
                    if (this.selectedFields.indexOf(item.value) === -1) {
                        this.disableListItem(item);
                        disabledListItems.push(item);
                    }
                });
            }
        }
        else if (counts.number + counts.date + counts.unknown > 1) {
            // we have at least 2 fields
            if ((counts.expression > 0 &&
                !(counts.expression === 1 &&
                    this.selectedFields.length === 3 &&
                    this.rendererFieldInfosMap[this.selectedFields[2]].expression)) ||
                (counts.date > 0 && counts.number === 2 && !this.singleEditMode) ||
                counts.date === 2 ||
                (_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.mapImageSublayer && counts.date > 0)) {
                // max 2 fields
                this.listNode
                    .querySelectorAll("calcite-list-item")
                    .forEach((item) => {
                    if (this.selectedFields.indexOf(item.value) === -1) {
                        this.disableListItem(item);
                        disabledListItems.push(item);
                    }
                });
            }
            else {
                // no more strings
                this.listNode
                    .querySelectorAll(`[data-type="string"]`)
                    .forEach((item) => {
                    this.disableListItem(item);
                    disabledListItems.push(item);
                    if (this.selectedFields.indexOf(item.value) > -1) {
                        // wrong combination
                        item.selected = false;
                    }
                });
                if (counts.number > 2 || _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.mapImageSublayer) {
                    // no more date field
                    this.listNode
                        .querySelectorAll(`[data-type="date"]`)
                        .forEach((item) => {
                        this.disableListItem(item);
                        disabledListItems.push(item);
                        if (this.selectedFields.indexOf(item.value) > -1) {
                            // wrong combination
                            item.selected = false;
                        }
                    });
                }
                if (counts.date === 1) {
                    // max one date field
                    this.listNode
                        .querySelectorAll(`[data-type="date"]`)
                        .forEach((item) => {
                        if (this.selectedFields.indexOf(item.value) === -1) {
                            this.disableListItem(item);
                            disabledListItems.push(item);
                        }
                    });
                }
                if (counts.number >= this.maxNumberFieldCount) {
                    // 10 number fields max
                    this.listNode
                        .querySelectorAll(`[data-type="number"], [data-type="date"]`)
                        .forEach((item) => {
                        if (this.selectedFields.indexOf(item.value) === -1) {
                            this.disableListItem(item);
                            disabledListItems.push(item);
                        }
                    });
                }
            }
        }
        return disabledListItems;
    }
    disableListItem(item) {
        item.disabled = true;
        const action = item.querySelector("calcite-action");
        if (action) {
            action.disabled = true;
        }
    }
    enableListItem(item) {
        item.disabled = false;
        const action = item.querySelector("calcite-action");
        if (action) {
            action.disabled = false;
        }
    }
    getSortedList() {
        const tempSorted = [...this.fields];
        if (this.lastSortBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.L.display) {
            tempSorted.sort((a, b) => a.layerField.alias.localeCompare(b.layerField.alias));
        }
        else if (this.lastSortBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.L.field) {
            tempSorted.sort((a, b) => a.layerField.name.localeCompare(b.layerField.name));
        }
        else if (this.lastSortBy === _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_1__.L.type) {
            tempSorted.sort((a, b) => a.simpleFieldType.localeCompare(b.simpleFieldType));
        }
        return tempSorted;
    }
    setUpObservers() {
        this.mutationObserver = new MutationObserver((mutationList /* , mutationObserver */) => {
            for (const mutation of mutationList) {
                if (mutation.attributeName === "style") {
                    if (this.popoverNode.style.visibility === "hidden") {
                        this.dropdownNode.open = false;
                    }
                }
            }
        });
        this.resizeObserver = new ResizeObserver((entries) => {
            const last = entries.pop();
            this.width = last.contentRect.width * 1.05;
        });
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingFieldPickList.style = arcgisSmartMappingFieldPickListCss;

const arcgisSmartMappingPanelsChartSizeCss = ":host{width:100%}.flow-item{height:100%}";

const ArcgisSmartMappingPanelsChartSize = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsChartSizeBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsChartSizeBackClick", 7);
        this.arcgisSmartMappingPanelsChartSizeClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsChartSizeClose", 7);
        this.arcgisSmartMappingPanelsChartSizeError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsChartSizeError", 7);
        this.tileNodes = [];
        //-------------------------------------------------------------------
        //
        //  Private Methods
        //
        //-------------------------------------------------------------------
        this.handleOptionsClick = (type) => {
            const { flowNode } = this;
            switch (type) {
                case "size": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-size");
                    flowItem.hideTransparency = true;
                    flowItem.hideRotation = true;
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeError", ({ detail }) => this.arcgisSmartMappingPanelsChartSizeError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "chart": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-chart");
                    flowItem.addEventListener("arcgisSmartMappingPanelsChartClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsChartBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsChartError", ({ detail }) => this.arcgisSmartMappingPanelsChartSizeError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
            }
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
        this.lastClick = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //-------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //-------------------------------------------------------------------
    componentWillLoad() {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        // save original renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
        this.flowNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.F)(this.hostElement, "calcite-flow");
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //-------------------------------------------------------------------
    //
    //  Render Methods
    //
    //-------------------------------------------------------------------
    render() {
        var _a;
        const { hideLayerTitle, isRTL, mapImageSublayer, layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const title = hideLayerTitle ? undefined : (_a = mapImageSublayer === null || mapImageSublayer === void 0 ? void 0 : mapImageSublayer.title) !== null && _a !== void 0 ? _a : layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.aa)(this.hostElement), heading: strings.panels.styleOptions, description: title, menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, ref: (node) => (this.flowItemNode = node), onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsChartSizeBackClick.emit(), onCalciteFlowItemClose: () => this.arcgisSmartMappingPanelsChartSizeClose.emit() }, this.renderChartTile(), this.renderSizeTile(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderChartTile() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-tile", { type: "chart", selected: this.lastClick === "chart", onArcgisSmartMappingTileSelect: () => {
                this.lastClick = "chart";
                this.handleOptionsClick("chart");
            }, onArcgisSmartMappingTileOptions: () => this.handleOptionsClick("chart"), ref: (node) => {
                if (node) {
                    this.tileNodes["chart"] = node;
                }
            } }));
    }
    renderSizeTile() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-tile", { type: "size", selected: this.lastClick === "size", onArcgisSmartMappingTileSelect: () => {
                this.lastClick = "size";
                this.handleOptionsClick("size");
            }, onArcgisSmartMappingTileOptions: () => this.handleOptionsClick("size"), ref: (node) => {
                if (node) {
                    this.tileNodes["size"] = node;
                }
            } }));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: () => this.arcgisSmartMappingPanelsChartSizeClose.emit(), appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.j)(this.originalRendererJSON, this.originalFeatureReduction);
                this.arcgisSmartMappingPanelsChartSizeClose.emit();
            }, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    focusSelectedTile() {
        setTimeout(() => requestAnimationFrame(() => this.tileNodes[this.lastClick].setFocus()), 300);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsChartSize.style = arcgisSmartMappingPanelsChartSizeCss;

const arcgisSmartMappingPanelsColorSizeCss = ":host{width:100%}.flow-item{height:100%}";

const ArcgisSmartMappingPanelsColorSize = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsColorSizeClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsColorSizeClose", 7);
        this.arcgisSmartMappingPanelsColorSizeBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsColorSizeBackClick", 7);
        this.arcgisSmartMappingPanelsColorSizeError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsColorSizeError", 7);
        this.tileNodes = [];
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleOptionsClick = (type) => {
            const { flowNode } = this;
            switch (type) {
                case "size": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-size");
                    flowItem.hideTransparency = true;
                    flowItem.hideRotation = true;
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeError", ({ detail }) => this.arcgisSmartMappingPanelsColorSizeError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "color": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-color");
                    flowItem.hideTransparency = true;
                    flowItem.hideRotation = true;
                    flowItem.addEventListener("arcgisSmartMappingPanelsColorClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsColorBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsColorError", ({ detail }) => this.arcgisSmartMappingPanelsColorSizeError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
            }
        };
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsColorSizeClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererJSON, originalFeatureReduction } = this;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.j)(originalRendererJSON, originalFeatureReduction);
            this.arcgisSmartMappingPanelsColorSizeClose.emit("cancel");
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
        this.lastClick = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        // save original renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
        this.flowNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.F)(this.hostElement, "calcite-flow");
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { layer, hideLayerTitle, isRTL, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.styleOptions, description: !hideLayerTitle ? layer.title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => {
                this.arcgisSmartMappingPanelsColorSizeBackClick.emit();
            }, ref: (node) => (this.flowItemNode = node) }, this.renderDoneButton(), this.renderCancelButton(), this.renderColorTile(), this.renderSizeTile(), this.renderTransparency(), this.renderRotation())));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    renderColorTile() {
        const { lastClick } = this;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.g)();
        const type = rendererType === "color-age-size" ? "color-age" : "color";
        const theme = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.J)("color");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-tile", { key: `tile-${type}-${theme}`, type: type, selected: lastClick === "color", onArcgisSmartMappingTileSelect: () => {
                this.lastClick = type;
                this.handleOptionsClick("color");
            }, onArcgisSmartMappingTileOptions: () => this.handleOptionsClick("color"), onArcgisSmartMappingTileError: (event) => this.arcgisSmartMappingPanelsColorSizeError.emit(event.detail), ref: (node) => {
                if (node) {
                    this.tileNodes[type] = node;
                }
            } }));
    }
    renderSizeTile() {
        const { lastClick } = this;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.g)();
        const type = rendererType === "color-size-age" ? "size-age" : "size";
        const theme = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.J)("size");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-tile", { key: `tile-${type}-${theme}`, type: type, selected: lastClick === "size", onArcgisSmartMappingTileSelect: () => {
                this.lastClick = type;
                this.handleOptionsClick("size");
            }, onArcgisSmartMappingTileOptions: () => this.handleOptionsClick("size"), onArcgisSmartMappingTileError: (event) => this.arcgisSmartMappingPanelsColorSizeError.emit(event.detail), ref: (node) => {
                if (node) {
                    this.tileNodes[type] = node;
                }
            } }));
    }
    renderTransparency() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "opacity");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-transparency", { open: !!opacityVisVar, onArcgisSmartMappingSymbolTransparencyError: ({ detail }) => this.arcgisSmartMappingPanelsColorSizeError.emit(detail) }));
    }
    renderRotation() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "opacity");
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "rotation");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-rotation", { open: !opacityVisVar && !!rotationVisVar, onArcgisSmartMappingRotationError: ({ detail }) => this.arcgisSmartMappingPanelsColorSizeError.emit(detail) }));
    }
    focusSelectedTile() {
        setTimeout(() => requestAnimationFrame(() => this.tileNodes[this.lastClick].setFocus()), 300);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsColorSize.style = arcgisSmartMappingPanelsColorSizeCss;

const arcgisSmartMappingPanelsColorSizeUnivariateCss = ":host{width:100%}.flow-item{height:100%}.color-size-univariate-block{overflow-x:hidden}.attribute-name{word-break:break-all}.symbol-above-and-below{display:flex;justify-content:space-between}.above-below-symbol-button{width:49%}.legend-toggle-padding{padding-top:12px;padding-bottom:12px}";

const ArcgisSmartMappingPanelsColorSizeUnivariate = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsColorSizeUnivariateClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsColorSizeUnivariateClose", 7);
        this.arcgisSmartMappingPanelsColorSizeUnivariateBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsColorSizeUnivariateBackClick", 7);
        this.arcgisSmartMappingPanelsColorSizeUnivariateError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsColorSizeUnivariateError", 7);
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleDone = () => {
            this.arcgisSmartMappingPanelsColorSizeUnivariateClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererJSON, originalFeatureReduction } = this;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.j)(originalRendererJSON, originalFeatureReduction);
            this.arcgisSmartMappingPanelsColorSizeUnivariateClose.emit("cancel");
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
        this.visualizationOpen = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        this.visualizationOpen = true;
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        // save original renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { layer, hideLayerTitle, isRTL, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.styleOptions, description: !hideLayerTitle ? layer.title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => {
                this.arcgisSmartMappingPanelsColorSizeUnivariateBackClick.emit();
            }, ref: (node) => (this.flowItemNode = node) }, this.renderDoneButton(), this.renderCancelButton(), this.renderVisualization(), this.renderTransparency(), this.renderRotation())));
    }
    renderDoneButton() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (!layer) {
            // loading state of panel doesn't position buttons correctly
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (!layer) {
            // loading state of panel doesn't position buttons correctly
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    renderVisualization() {
        var _a, _b;
        const { visualizationOpen } = this;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        const fieldName = colorVisVar
            ? colorVisVar.field
                ? (_a = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.u)(colorVisVar.field)) === null || _a === void 0 ? void 0 : _a.label
                : colorVisVar.valueExpressionTitle || strings.expression
            : renderer.field
                ? (_b = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.u)(renderer.field)) === null || _b === void 0 ? void 0 : _b.label
                : renderer.valueExpressionTitle || strings.expression;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "color-size-univariate-block", heading: strings.panels.colorSizeUnivariate.colorSizeStyle, collapsible: true, open: visualizationOpen, onCalciteBlockOpen: () => (this.visualizationOpen = true), onCalciteBlockClose: () => (this.visualizationOpen = false) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "attribute-name" }, fieldName), this.renderTheme(), this.renderDividedBy(), this.renderSymbolPairButton(), this.renderAboveAndBelowSymbols(), this.renderColorScheme(), this.renderSymbol(), this.renderColorSizeSlider(), this.renderSizeRange(), this.renderBackgroundStyle(), this.renderDefaultSymbol(), this.renderShowInLegend()));
    }
    renderTheme() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-theme-button", { ref: (node) => (this.themeButtonNode = node), rendererSubtype: "colorSize", onArcgisSmartMappingThemeButtonBeforeOpen: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.E)(), onArcgisSmartMappingThemeButtonChange: (event) => {
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
                const authInfo = renderer.authoringInfo;
                const wasAboveAndBelow = authInfo.univariateTheme === "above-and-below";
                const isAboveAndBelow = event.detail === "above-and-below";
                let updateCall = _colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_6__.a;
                if (!wasAboveAndBelow && isAboveAndBelow) {
                    updateCall = _colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_6__.c;
                }
                (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_5__.r)(updateCall({
                    theme: event.detail,
                    fieldInfos: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.f)(layer),
                    discardMinMax: true
                }), this.flowItemNode).then((result) => {
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.e)(result.renderer, layer);
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                    this.themeButtonNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.themeButtonNode);
                    this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sizeRangeSliderNode);
                    if (this.sliderNode) {
                        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                        this.sliderNode.updateStatistics();
                    }
                }, (error) => {
                    (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.themeButtonNode);
                    this.arcgisSmartMappingPanelsColorSizeUnivariateError.emit(error);
                });
            } }));
    }
    renderDividedBy() {
        const { layer, fields } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.g)();
        const isAgeRenderer = ["color-age", "color-age-size"].indexOf(rendererType) > -1;
        if (isAgeRenderer) {
            return null;
        }
        const fieldInfo = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.f)(layer)[0];
        if (fieldInfo.expression || fieldInfo.simpleFieldType !== _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER) {
            return null;
        }
        const counts = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.I)(fields);
        if (counts.number < 2) {
            return null;
        }
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-divided-by", { rendererSubtype: "color", normalizationField: (colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.normalizationField) || renderer.normalizationField, onArcgisSmartMappingDividedByChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.sliderNode.updateStatistics();
            }, onArcgisSmartMappingDividedByError: (event) => this.arcgisSmartMappingPanelsColorSizeUnivariateError.emit(event.detail) }));
    }
    renderSymbolPairButton() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.B)(layer)) {
            return null;
        }
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const isAboveAndBelow = authInfo.univariateTheme === "above-and-below";
        if (!isAboveAndBelow) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-pair-button", { onArcgisSmartMappingSymbolPairButtonBeforeOpen: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.E)(), onArcgisSmartMappingSymbolPairButtonChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
                this.symbolButtonNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolButtonNode);
                this.symbolPairButtonNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolPairButtonNode);
            }, onArcgisSmartMappingSymbolPairButtonError: (event) => this.arcgisSmartMappingPanelsColorSizeUnivariateError.emit(event.detail), ref: (node) => {
                if (node) {
                    this.symbolPairButtonNode = node;
                }
            } }));
    }
    renderAboveAndBelowSymbols() {
        var _a;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const isAboveAndBelow = authInfo.univariateTheme === "above-and-below";
        if (!isAboveAndBelow) {
            return null;
        }
        const symbolStyle = authInfo.univariateSymbolStyle;
        if (!symbolStyle || ((_a = renderer.classBreakInfos) === null || _a === void 0 ? void 0 : _a.length) !== 2) {
            return null;
        }
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.u)((colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.field) || renderer.field);
        const isDate = (field === null || field === void 0 ? void 0 : field.simpleFieldType) === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE;
        const aboveSymbol = renderer.classBreakInfos[1].symbol;
        const belowSymbol = renderer.classBreakInfos[0].symbol;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "symbol-above-and-below" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { class: "above-below-symbol-button", popoverReferenceElement: this.flowItemNode, symbol: belowSymbol, type: "below", label: isDate
                ? strings.panels.colorSizeUnivariate.before
                : strings.panels.colorSizeUnivariate.below, onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.symbolPairButtonNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolPairButtonNode);
                this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { class: "above-below-symbol-button", popoverReferenceElement: this.flowItemNode, symbol: aboveSymbol, type: "above", label: isDate
                ? strings.panels.colorSizeUnivariate.after
                : strings.panels.colorSizeUnivariate.above, onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.symbolPairButtonNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolPairButtonNode);
                this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
            } })));
    }
    renderColorScheme() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const authInfo = renderer.authoringInfo;
        const isAboveAndBelow = authInfo.univariateTheme === "above-and-below";
        if (!isAboveAndBelow) {
            return null;
        }
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.colorSizeUnivariate.colorScheme, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control", { scale: "s", width: "full", onCalciteSegmentedControlChange: (event) => {
                event.stopPropagation();
                this.handleColorSchemeChange(event.target.selectedItem.value);
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { checked: !!colorVisVar, value: "continuous", ref: (node) => (this.continuousNode = node) }, strings.panels.colorSizeUnivariate.continuous), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { checked: !colorVisVar, value: "binary", ref: (node) => (this.binaryNode = node) }, strings.panels.colorSizeUnivariate.binary))));
    }
    renderSymbol() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        const classBreakInfos = renderer.classBreakInfos;
        let colors;
        if (colorVisVar) {
            colors = colorVisVar.stops.map((stop) => {
                const color = stop.color.clone();
                color.a = 1;
                return color;
            });
        }
        else if (classBreakInfos === null || classBreakInfos === void 0 ? void 0 : classBreakInfos.length) {
            colors = classBreakInfos.map((classBreakInfo) => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.t)(classBreakInfo.symbol));
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { colors: colors, type: "color-ramp", rampType: colorVisVar ? "continuous" : "discrete", ref: (node) => (this.symbolButtonNode = node), onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
            } }));
    }
    renderColorSizeSlider() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-color-size-slider", { ref: (node) => {
                if (node) {
                    this.sliderNode = node;
                }
            }, onArcgisSmartMappingColorSizeSliderChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
            }, onArcgisSmartMappingColorSizeSliderError: (event) => this.arcgisSmartMappingPanelsColorSizeUnivariateError.emit(event.detail) }));
    }
    renderSizeRange() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-size-range-slider", { onArcgisSmartMappingSizeRangeSliderError: (event) => this.arcgisSmartMappingPanelsColorSizeUnivariateError.emit(event.detail), ref: (node) => (this.sizeRangeSliderNode = node) }));
    }
    renderBackgroundStyle() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.g)();
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.q)(layer) || ["color-size"].indexOf(rendererType) === -1) {
            return null;
        }
        return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-background-symbol", null);
    }
    renderDefaultSymbol() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-default-symbol", { ref: (node) => {
                if (node) {
                    this.defaultSymbolNode = node;
                }
            }, onArcgisSmartMappingDefaultSymbolBeforeToggle: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.E)(), onArcgisSmartMappingDefaultSymbolChange: () => (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolButtonNode) }));
    }
    renderShowInLegend() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        const legendOptions = colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.legendOptions;
        const isChecked = !legendOptions || legendOptions.showLegend !== false;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "legend-toggle-padding", layout: "inline-space-between" }, strings.panels.colorSizeUnivariate.includeInLegend, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: isChecked, onCalciteSwitchChange: () => this.handleIncludeInLegendToggle() })));
    }
    renderTransparency() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "opacity");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-transparency", { open: !!opacityVisVar, onArcgisSmartMappingSymbolTransparencyError: ({ detail }) => this.arcgisSmartMappingPanelsColorSizeUnivariateError.emit(detail) }));
    }
    renderRotation() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "opacity");
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "rotation");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-rotation", { open: !opacityVisVar && !!rotationVisVar, ref: (node) => (this.rotationNode = node), onArcgisSmartMappingRotationError: ({ detail }) => this.arcgisSmartMappingPanelsColorSizeUnivariateError.emit(detail) }));
    }
    handleColorSchemeChange(scheme) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_5__.r)((0,_colorSizeUnivariant_d266ac7c_js__WEBPACK_IMPORTED_MODULE_6__.a)({ isContinuous: scheme === "continuous" }), this.flowItemNode).then((result) => {
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.e)(result.renderer, layer);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
            (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.E)();
        }, (error) => {
            // handles checking the previously checked color scheme option; order matters when setting these!
            if (this.continuousNode.checked) {
                this.continuousNode.checked = false;
                this.binaryNode.checked = true;
            }
            else {
                this.binaryNode.checked = false;
                this.continuousNode.checked = true;
            }
            this.arcgisSmartMappingPanelsColorSizeUnivariateError.emit(error);
        });
    }
    handleIncludeInLegendToggle() {
        var _a;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "size");
        const legendOptions = sizeVisVar.legendOptions;
        if (legendOptions && legendOptions.showLegend === false) {
            if (legendOptions.title) {
                legendOptions.showLegend = true;
            }
            else {
                sizeVisVar.legendOptions = undefined;
            }
            if ((_a = colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.legendOptions) === null || _a === void 0 ? void 0 : _a.title) {
                colorVisVar.legendOptions.showLegend = true;
            }
            else if (colorVisVar) {
                colorVisVar.legendOptions = undefined;
            }
        }
        else {
            sizeVisVar.legendOptions = legendOptions || {};
            sizeVisVar.legendOptions.showLegend = false;
            if (colorVisVar) {
                colorVisVar.legendOptions = legendOptions || {};
                colorVisVar.legendOptions.showLegend = false;
            }
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsColorSizeUnivariate.style = arcgisSmartMappingPanelsColorSizeUnivariateCss;

const arcgisSmartMappingPanelsCompareCss = ":host{width:100%}.flow-item{height:100%}.compare-block{overflow-x:hidden}.attribute-name{word-break:break-all}.legend-toggle-padding{padding-top:12px;padding-bottom:12px}";

const ArcgisSmartMappingPanelsCompare = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsCompareClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsCompareClose", 7);
        this.arcgisSmartMappingPanelsCompareBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsCompareBackClick", 7);
        this.arcgisSmartMappingPanelsCompareError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsCompareError", 7);
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsCompareClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererJSON, originalFeatureReduction } = this;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.j)(originalRendererJSON, originalFeatureReduction);
            this.arcgisSmartMappingPanelsCompareClose.emit("cancel");
        };
        this.hideRotation = false;
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
        this.visualizationOpen = false;
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.b.MISSING;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        this.visualizationOpen = true;
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        // save original renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
        this.getStatistics();
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { layer, hideLayerTitle, isRTL, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.styleOptions, description: !hideLayerTitle ? layer.title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsCompareBackClick.emit(), ref: (node) => (this.flowItemNode = node) }, this.renderDoneButton(), this.renderCancelButton(), this.renderVisualization(), this.renderRotation())));
    }
    renderDoneButton() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (!layer) {
            // loading state of panel doesn't position buttons correctly
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (!layer) {
            // loading state of panel doesn't position buttons correctly
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    renderVisualization() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const { visualizationOpen, hideRotation } = this;
        const hasOtherBlocks = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.A)(layer) && !hideRotation;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.p)(renderer, "color");
        const field1 = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.u)(colorVisVar.field);
        const field2 = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.u)(colorVisVar.normalizationField);
        const title = (authColorVisVar.style === "ratio"
            ? strings.panels.compare.ratioTitle
            : authColorVisVar.style === "percent"
                ? strings.panels.compare.percentTitle
                : strings.panels.compare.percentTotalTitle)
            .replace(/\$\{field1\}/g, field1.label)
            .replace("${field2}", field2.label);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "compare-block", heading: strings.panels.compare.compareStyle, collapsible: hasOtherBlocks, open: visualizationOpen, onCalciteBlockOpen: () => (this.visualizationOpen = true), onCalciteBlockClose: () => (this.visualizationOpen = false) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, title), this.renderSymbol(), this.renderColorSlider(), this.renderLabels(), this.renderCenterAt(), this.renderDefaultSymbol(), this.renderShowInLegend()));
    }
    renderSymbol() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        const classBreakInfos = renderer.classBreakInfos;
        const symbol = classBreakInfos[0].symbol;
        const colors = colorVisVar.stops.map((stop) => {
            const color = stop.color.clone();
            color.a = 1;
            return color;
        });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { symbol: symbol, colors: colors, type: "color-ramp", rampType: "continuous", ref: (node) => {
                if (node) {
                    this.symbolButtonNode = node;
                }
            }, onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
            } }));
    }
    renderColorSlider() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-color-slider", { ref: (node) => {
                if (node) {
                    this.sliderNode = node;
                }
            }, onArcgisSmartMappingColorSliderChange: () => {
                const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
                const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
                const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.p)(renderer, "color");
                const usePercent = authColorVisVar ? authColorVisVar.style === "percent" : false;
                const usePercentTotal = authColorVisVar
                    ? authColorVisVar.style === "percent-of-total"
                    : false;
                colorVisVar.stops[0].label = `< ${this.getStopLabel(colorVisVar.stops[0].value, usePercent, usePercentTotal)}`;
                colorVisVar.stops[2].label = `${this.getStopLabel(colorVisVar.stops[2].value, usePercent, usePercentTotal)}`;
                colorVisVar.stops[4].label = `> ${this.getStopLabel(colorVisVar.stops[4].value, usePercent, usePercentTotal)}`;
                if (this.segmentedControlNode) {
                    if (colorVisVar.stops[2].value === 1) {
                        this.equalNode.checked = true;
                        this.averageNode.checked = false;
                    }
                    else {
                        this.equalNode.checked = false;
                        this.averageNode.checked = true;
                    }
                }
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
            }, onArcgisSmartMappingColorSliderError: (event) => this.arcgisSmartMappingPanelsCompareError.emit(event.detail) }));
    }
    renderLabels() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.p)(renderer, "color");
        const style = authColorVisVar ? authColorVisVar.style : undefined;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.compare.labels, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-select", { width: "full", role: "button", label: strings.panels.compare.labels, onCalciteSelectChange: (event) => this.handleLabelChange(event) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: strings.panels.compare.ratioLabel, label: strings.panels.compare.ratioLabel, selected: style === "ratio" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: strings.panels.compare.percentTotalLabel, label: strings.panels.compare.percentTotalLabel, selected: style === "percent-of-total" }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-option", { value: strings.panels.compare.percentLabel, label: strings.panels.compare.percentLabel, selected: style === "percent" }))));
    }
    renderCenterAt() {
        const { statistics, statisticsStatus } = this;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (statisticsStatus !== _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.b.SUCCESS) {
            return null;
        }
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ac)(statistics.min) ||
            !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ac)(statistics.max) ||
            statistics.min >= 1 ||
            statistics.max <= 1) {
            return null;
        }
        const type = colorVisVar.stops[2].value === 1 ? "equal" : "average";
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.compare.centerAt), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control", { scale: "s", width: "full", onCalciteSegmentedControlChange: (event) => {
                event.stopPropagation();
                this.handleCenterAtChange(event.target.selectedItem.value);
            }, ref: (node) => {
                if (node) {
                    this.segmentedControlNode = node;
                }
            } }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { checked: type === "equal", value: "equal", ref: (node) => {
                if (node) {
                    this.equalNode = node;
                }
            } }, strings.panels.compare.centerEqualValues), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-segmented-control-item", { checked: type === "average", value: "average", ref: (node) => {
                if (node) {
                    this.averageNode = node;
                }
            } }, strings.panels.compare.centerAverageValue))));
    }
    renderDefaultSymbol() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-default-symbol", { ref: (node) => {
                if (node) {
                    this.defaultSymbolNode = node;
                }
            }, onArcgisSmartMappingDefaultSymbolBeforeToggle: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.E)(), onArcgisSmartMappingDefaultSymbolChange: () => (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolButtonNode) }));
    }
    renderShowInLegend() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        const legendOptions = colorVisVar.legendOptions;
        const isChecked = !legendOptions || legendOptions.showLegend !== false;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "legend-toggle-padding", layout: "inline-space-between" }, strings.panels.compare.includeInLegend, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: isChecked, onCalciteSwitchChange: () => this.handleIncludeInLegendToggle() })));
    }
    renderRotation() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "opacity");
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "rotation");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-rotation", { open: !opacityVisVar && !!rotationVisVar, ref: (node) => (this.rotationNode = node), onArcgisSmartMappingRotationError: ({ detail }) => this.arcgisSmartMappingPanelsCompareError.emit(detail) }));
    }
    handleLabelChange(event) {
        const node = event.currentTarget;
        const newLabel = node.value;
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const style = newLabel === strings.panels.compare.ratioLabel
            ? "ratio"
            : newLabel === strings.panels.compare.percentTotalLabel
                ? "percent-of-total"
                : "percent";
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.p)(renderer, "color");
        authColorVisVar.style = style;
        if (style === "percent") {
            colorVisVar.stops[0].label = `< ${this.getStopLabel(colorVisVar.stops[0].value, true, false)}`;
            colorVisVar.stops[2].label = this.getStopLabel(colorVisVar.stops[2].value, true, false);
            colorVisVar.stops[4].label = `> ${this.getStopLabel(colorVisVar.stops[4].value, true, false)}`;
        }
        else if (style === "percent-of-total") {
            colorVisVar.stops[0].label = `< ${this.getStopLabel(colorVisVar.stops[0].value, false, true)}`;
            colorVisVar.stops[2].label = this.getStopLabel(colorVisVar.stops[2].value, false, true);
            colorVisVar.stops[4].label = `> ${this.getStopLabel(colorVisVar.stops[4].value, false, true)}`;
        }
        else {
            colorVisVar.stops[0].label = `< ${this.getStopLabel(colorVisVar.stops[0].value, false, false)}`;
            colorVisVar.stops[2].label = this.getStopLabel(colorVisVar.stops[2].value, false, false);
            colorVisVar.stops[4].label = `> ${this.getStopLabel(colorVisVar.stops[4].value, false, false)}`;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    getStopLabel(val, usePercent, usePercentTotal) {
        if (usePercentTotal) {
            return `${Math.round((val / (1 + val)) * 10000) / 100}%`;
        }
        else if (usePercent) {
            return `${Math.round(val * 10000) / 100}%`;
        }
        else {
            return `${val}`;
        }
    }
    getStatistics() {
        var _a;
        const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const layer = smLayer;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const fieldInfo = this.getFieldInfo();
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        const normalizationField = colorVisVar
            ? colorVisVar.normalizationField
            : renderer.normalizationField;
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.p)(renderer, "color") || {};
        this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.b.IN_PROGRESS;
        if (!this.statistics) {
            modules
                .summaryStatistics({
                layer,
                view: mapView,
                field: fieldInfo.field,
                valueExpression: fieldInfo.expression,
                normalizationField,
                forBinning: "featureReduction" in layer && ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
            })
                .then((statistics) => {
                if (statistics.count === 0) {
                    // field has no values
                    // make up some basic statistics so we can show a slider
                    const [defaultMin, defaultMax] = this.getDefaultDataRange(fieldInfo);
                    const min = authColorVisVar.minSliderValue || defaultMin;
                    const max = authColorVisVar.maxSliderValue || defaultMax;
                    statistics.min = min;
                    statistics.max = max;
                    statistics.avg = (max + min) / 2;
                    if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ac)(authColorVisVar.minSliderValue)) {
                        authColorVisVar.minSliderValue = min;
                        authColorVisVar.maxSliderValue = max;
                    }
                }
                else if (!(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ac)(statistics.avg) ||
                    !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ac)(statistics.min) ||
                    !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ac)(statistics.max)) {
                    // statistics unusable
                    this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.b.FAILED;
                    return;
                }
                statistics = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ad)(statistics);
                this.statistics = statistics;
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.b.SUCCESS;
            }, (error) => {
                console.log(error);
                this.statisticsStatus = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.b.FAILED;
            });
        }
    }
    getDefaultDataRange(fieldInfo) {
        if (fieldInfo.simpleFieldType === _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.DATE) {
            const year = new Date().getFullYear();
            return [new Date(`1/1/${year}`).getTime(), new Date(`12/31/${year}`).getTime()];
        }
        else {
            return [0, 100];
        }
    }
    getFieldInfo() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        const field = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.u)(colorVisVar ? colorVisVar.field : renderer.field);
        const fieldInfo = {
            field: (colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.field) || renderer.field,
            expression: (colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.valueExpression) || renderer.valueExpression,
            expressionTitle: (colorVisVar === null || colorVisVar === void 0 ? void 0 : colorVisVar.valueExpressionTitle) || renderer.valueExpressionTitle,
            simpleFieldType: field ? field.simpleFieldType : _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.w.NUMBER
        };
        return fieldInfo;
    }
    handleCenterAtChange(type) {
        const { statistics, statisticsStatus } = this;
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (statisticsStatus !== _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.b.SUCCESS) {
            return;
        }
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.p)(renderer, "color");
        const usePercent = authColorVisVar ? authColorVisVar.style === "percent" : false;
        const usePercentTotal = authColorVisVar ? authColorVisVar.style === "percent-of-total" : false;
        let values;
        if (type === "average") {
            const avg = statistics.avg;
            let minValue = Math.max(avg - statistics.stddev, statistics.min);
            let maxValue = Math.min(avg + statistics.stddev, statistics.max);
            if (statistics.count === 0) {
                minValue = statistics.min;
                maxValue = statistics.max;
            }
            values = round([minValue, maxValue]);
            minValue = values[0];
            maxValue = values[1];
            values = [
                Math.max(minValue, statistics.min),
                Math.max(minValue + (avg - minValue) / 2, statistics.min),
                avg,
                Math.min(avg + (maxValue - avg) / 2, statistics.max),
                Math.min(maxValue, statistics.max)
            ];
            values = round(values);
        }
        else {
            let minValue = Math.max(1 - statistics.stddev, statistics.min);
            let maxValue = Math.min(1 + statistics.stddev, statistics.max);
            values = round([minValue, maxValue]);
            minValue = values[0];
            maxValue = values[1];
            values = [
                Math.max(minValue, statistics.min),
                Math.max(minValue + (1 - minValue) / 2, statistics.min),
                1,
                Math.min(1 + (maxValue - 1) / 2, statistics.max),
                Math.min(maxValue, statistics.max)
            ];
            values = round(values);
        }
        colorVisVar.stops[0].value = values[0];
        colorVisVar.stops[0].label = `< ${this.getStopLabel(values[0], usePercent, usePercentTotal)}`;
        colorVisVar.stops[1].value = values[1];
        colorVisVar.stops[1].label = null;
        colorVisVar.stops[2].value = values[2];
        colorVisVar.stops[2].label = this.getStopLabel(values[2], usePercent, usePercentTotal);
        colorVisVar.stops[3].value = values[3];
        colorVisVar.stops[3].label = null;
        colorVisVar.stops[4].value = values[4];
        colorVisVar.stops[4].label = `> ${this.getStopLabel(values[4], usePercent, usePercentTotal)}`;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.symbolButtonNode);
        this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
    }
    handleIncludeInLegendToggle() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "color");
        const legendOptions = colorVisVar.legendOptions;
        if (legendOptions && legendOptions.showLegend === false) {
            if (legendOptions.title) {
                legendOptions.showLegend = true;
            }
            else {
                colorVisVar.legendOptions = undefined;
            }
        }
        else {
            colorVisVar.legendOptions = legendOptions || {};
            colorVisVar.legendOptions.showLegend = false;
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsCompare.style = arcgisSmartMappingPanelsCompareCss;

const arcgisSmartMappingPanelsDotDensityCss = ":host{width:100%}.flow-item{height:100%}.dot-density-block{overflow-x:hidden}.hidden{display:none}img{width:16px;height:16px}.label{font-size:var(--calcite-font-size--1);padding-top:5px;padding-bottom:5px}.label:focus,.symbol:focus{outline:2px solid var(--calcite-color-brand)}.selected{outline:1px solid var(--calcite-color-brand)}.symbol{width:16px;height:16px;margin:2px}.top-margin{margin-block-start:var(--calcite-label-margin-bottom, 0.75rem)}.top-grey-border{border-top:1px solid #e0e0e0}.text-wrap{overflow-wrap:anywhere}.dot-value-content{display:flex;flex-direction:column}.dot-value-slider{width:100%;height:70px;position:relative;margin:0 auto 10px auto}.dot-value-slider.esri-slider--horizontal .esri-slider__tick-label{cursor:pointer}.dot-value-slider.slider-bottom-label .esri-slider__max,.dot-value-slider.slider-bottom-label .esri-slider__min{width:-moz-fit-content;width:fit-content;position:absolute;bottom:11px}.dot-value-slider.slider-bottom-label .esri-slider__max{right:0;text-align:right}.dot-value-slider.slider-bottom-label .esri-slider__min{left:0;text-align:left}.dot-value-slider.esri-slider--horizontal .esri-slider__label{text-decoration:underline}.dot-value-slider.esri-slider--horizontal .esri-slider__label:hover{border:1px solid #bbb;background-color:#f3f3f3;text-decoration:none;z-index:1}";

const ArcgisSmartMappingPanelsDotDensity = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsDotDensityBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsDotDensityBackClick", 7);
        this.arcgisSmartMappingPanelsDotDensityClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsDotDensityClose", 7);
        this.labelNodes = [];
        this.inputNodes = [];
        this.legendSwatchNodes = [];
        this.popoverSettings = {
            index: null,
            popoverNode: null
        };
        //-------------------------------------------------------------------
        //
        //  Private methods
        //
        //-------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsDotDensityClose.emit("save");
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
        this.dotValue = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //-------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //-------------------------------------------------------------------
    componentWillLoad() {
        const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        this.dotValue = renderer.dotValue;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ac)(renderer.referenceScale)) {
            // get dotValue that fits to current map scale
            this.dotValue = Math.round(renderer.calculateDotValue(mapView.scale));
            this.tickDotValue = this.dotValue;
        }
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
        const { config, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        this.mapViewWatchHandle = modules.reactiveUtils.watch(() => mapView.scale, (newScale) => {
            var _a;
            const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.layer);
            if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ac)(renderer.referenceScale)) {
                let newDotValue = Math.round(renderer.calculateDotValue(newScale));
                this.dotValue = newDotValue;
                this.handleDotValueChange(this.dotValue);
                (_a = this.dotValueSlider) === null || _a === void 0 ? void 0 : _a.set({
                    values: [this.getSliderStepsPos(this.dotValue)]
                });
            }
        });
        this.hostElement.shadowRoot.firstElementChild.insertAdjacentHTML("beforebegin", `<link rel="stylesheet" href="${config.jsapiUrl}/themes/light/main.css" />`);
    }
    disconnectedCallback() {
        var _a, _b;
        (_a = this.dotWatchHandle) === null || _a === void 0 ? void 0 : _a.remove();
        (_b = this.mapViewWatchHandle) === null || _b === void 0 ? void 0 : _b.remove();
    }
    //-------------------------------------------------------------------
    //
    //  Render Methods
    //
    //-------------------------------------------------------------------
    render() {
        var _a;
        const { hideLayerTitle, isRTL, layer, mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const title = hideLayerTitle ? undefined : (_a = mapImageSublayer === null || mapImageSublayer === void 0 ? void 0 : mapImageSublayer.title) !== null && _a !== void 0 ? _a : layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.C.rtl]: isRTL
            }, heading: strings.panels.dotDensity.styleOptions, description: title, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, ref: (node) => (this.flowItemNode = node), onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsDotDensityBackClick.emit() }, this.renderDoneButton(), this.renderCancelButton(), this.renderVisualization())));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: () => {
                const { originalRendererJSON, originalFeatureReduction } = this;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.E)();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.j)(originalRendererJSON, originalFeatureReduction);
                this.arcgisSmartMappingPanelsDotDensityClose.emit("cancel");
            }, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    renderVisualization() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "dot-density-block", heading: strings.panels.dotDensity.dotDensityStyle, open: true }, this.renderDotStyle(), this.renderLegend(), this.renderUnits(), this.renderDotValue(), this.renderDotSize(), this.renderBackgroundStyle(), this.renderOptions()));
    }
    renderDotStyle() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colors = renderer.attributes.map((attribute) => attribute.color);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { type: "dot-density-ramp", rampType: "discrete", colors: colors, onArcgisSmartMappingSymbolButtonSymbolChange: () => (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement) }));
    }
    renderLegend() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.dotDensity.legend, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list", { class: "top-grey-border", dragEnabled: true, onCalciteListOrderChange: (event) => {
                let items = Array.from(event.target.children);
                this.handleSortLegend(items);
            } }, renderer.attributes.map((attribute, index) => {
            return this.renderLegendItem(attribute, index);
        }))));
    }
    renderLegendItem(attribute, index) {
        const { layer, modules, selectedAttribute, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-list-item", { value: attribute.field, key: `item-${attribute.field}` }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "symbol", slot: "content-start", tabIndex: 0, role: "button", "aria-label": strings.panels.dotDensity.editSymbolFor.replace("${fieldName}", attribute.label), "aria-haspopup": "true", "aria-expanded": selectedAttribute == index, onClick: () => {
                var _a;
                if ((_a = this.popoverSettings) === null || _a === void 0 ? void 0 : _a.popoverNode) {
                    this.legendSwatchNodes[index].classList.remove("selected");
                    if (this.popoverSettings.index === index) {
                        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.E)();
                        this.popoverSettings.popoverNode = null;
                        this.popoverSettings.index = null;
                    }
                    else {
                        this.popoverSettings.index = index;
                        this.openSymbolStylerForLegendSwatch(index);
                    }
                }
                else {
                    this.popoverSettings.index = index;
                    this.openSymbolStylerForLegendSwatch(index);
                }
            }, onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    this.openSymbolStylerForLegendSwatch(index);
                }
            }, ref: (node) => (this.legendSwatchNodes[index] = node) }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("img", { src: modules.symbolUtils.renderDotDensityPreviewHTML(renderer, new modules.esriColor([attribute.color.r, attribute.color.g, attribute.color.b]), {
                swatchSize: 16
            }).src, "aria-hidden": "true" })), this.renderTextNode(attribute, index)));
    }
    renderTextNode(attribute, index) {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { "aria-label": strings.panels.dotDensity.editLabelFor.replace("${fieldName}", attribute.label), class: "label text-wrap", slot: "content", tabIndex: 0, onClick: (event) => {
                event.target.classList.add("hidden");
                this.inputNodes[index].classList.remove("hidden");
                this.inputNodes[index].setFocus();
            }, onKeyDown: (event) => {
                if (event.key === " " || event.key === "Enter") {
                    event.preventDefault();
                    event.stopPropagation();
                    event.target.classList.add("hidden");
                    this.inputNodes[index].classList.remove("hidden");
                    this.inputNodes[index].setFocus();
                }
            }, ref: (node) => (this.labelNodes[index] = node) }, attribute.label), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { class: "hidden", slot: "content", tabIndex: 0, value: attribute.label, placeholder: attribute.label, onFocusout: (event) => {
                const node = event.target;
                this.handleLegendItemTextChange(index, node.value);
            }, onKeyDown: (event) => {
                event.stopPropagation();
                if (event.key === "Escape" || event.key === "Enter") {
                    event.preventDefault();
                    const node = event.currentTarget;
                    this.handleLegendItemTextChange(index, node.value);
                }
            }, ref: (node) => (this.inputNodes[index] = node) })));
    }
    renderUnits() {
        var _a;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.dotDensity.dotsRepresent, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { value: ((_a = renderer.legendOptions) === null || _a === void 0 ? void 0 : _a.unit) || "", onCalciteInputInput: (event) => {
                const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
                const node = event.target;
                renderer.legendOptions = renderer.legendOptions || {};
                renderer.legendOptions.unit = node.value || "";
                this.updateDotValueEquation();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
            } })));
    }
    renderDotValue() {
        var _a;
        const { layer, modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const authoringInfo = renderer.authoringInfo;
        const { tickDotValue } = this;
        if (!authoringInfo) {
            return null;
        }
        const sliderValuesChanged = this.initSliderSteps();
        const tickConfigs = [
            {
                mode: "position",
                visibleElements: { labels: true },
                labelsVisible: true,
                values: [this.getSliderStepsPos(tickDotValue)],
                tickCreatedFunction: (_, tickElement, labelElement) => {
                    tickElement.onclick = () => {
                        var _a;
                        this.handleDotValueChange(tickDotValue);
                        (_a = this.dotValueSlider) === null || _a === void 0 ? void 0 : _a.set({
                            values: [this.getSliderStepsPos(tickDotValue)]
                        });
                    };
                    labelElement.onclick = () => {
                        var _a;
                        this.handleDotValueChange(tickDotValue);
                        (_a = this.dotValueSlider) === null || _a === void 0 ? void 0 : _a.set({
                            values: [this.getSliderStepsPos(tickDotValue)]
                        });
                    };
                }
            }
        ];
        if (!this.dotValueSlider) {
            const config = {
                min: 0,
                max: this.sliderSteps.length - 1,
                values: [this.getSliderStepsPos(this.dotValue)],
                visibleElements: {
                    labels: true,
                    rangeLabels: true
                },
                rangeLabelInputsEnabled: false,
                precision: 0,
                labelInputsEnabled: true,
                labelFormatFunction: (value) => this.sliderSteps[value],
                inputFormatFunction: (value) => this.sliderSteps[value],
                inputParseFunction: (value) => {
                    var _a, _b, _c;
                    let numValue = parseInt(value);
                    if (isNaN(numValue)) {
                        return this.dotValueSlider.values[0];
                    }
                    if (numValue === 0) {
                        numValue = 1;
                    }
                    if (this.sliderSteps.indexOf(numValue) === -1) {
                        // add tick
                        (_a = this.sliderSteps) === null || _a === void 0 ? void 0 : _a.push(numValue);
                        (_b = this.sliderSteps) === null || _b === void 0 ? void 0 : _b.sort((a, b) => a - b);
                        (_c = this.dotValueSlider) === null || _c === void 0 ? void 0 : _c.set({
                            max: this.sliderSteps.length - 1,
                            values: [this.getSliderStepsPos(numValue)]
                        });
                    }
                    return this.sliderSteps[this.getSliderStepsPos(numValue)];
                },
                tickConfigs
            };
            this.dotValueSlider = new modules.Slider(config);
            //TODO: fix issues with dot slider label change
            this.dotWatchHandle = this.dotValueSlider.watch("values", (values) => {
                this.dotValue = this.sliderSteps[values[0]];
                this.handleDotValueChange(this.dotValue);
            });
            // this.dotValueSlider.watch("labels", (labels: string[]) => {
            //   console.log('label change ==>', labels)
            //   this.dotValue = labels.values[0];
            //   this.handleDotValueChange(this.dotValue);
            //   this.dotValueSlider?.set({
            //     values: [this.getSliderStepsPos(this.dotValue)]
            //   });
            // })
            // this.dotValueSlider.on("thumb-change", (event: __esri.SliderThumbChangeEvent) => {
            //   console.log('thumb change event', event)
            //   this.dotValue = event.value;
            //   this.handleDotValueChange(this.dotValue);
            //   this.dotValueSlider?.set({
            //     values: [this.getSliderStepsPos(this.dotValue)]
            //   });
            // });
        }
        else {
            let config = {
                values: [this.getSliderStepsPos(this.dotValue)]
            };
            if (sliderValuesChanged ||
                this.dotValueSlider.tickConfigs[0].values[0] !== tickConfigs[0].values[0]) {
                config = {
                    min: 0,
                    max: this.sliderSteps.length - 1,
                    values: [this.getSliderStepsPos(this.dotValue)],
                    labelFormatFunction: (value) => {
                        return this.sliderSteps[value];
                    },
                    tickConfigs
                };
            }
            this.dotValueSlider.set(config);
        }
        const showSlider = authoringInfo.minSliderValue !== authoringInfo.maxSliderValue;
        const hasLongLabels = authoringInfo.minSliderValue.toString().length > 5 ||
            authoringInfo.maxSliderValue.toString().length > 5;
        if (!showSlider) {
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.dotDensity.dotValue, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "dot-value-content" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: `slider dot-value-slider ${hasLongLabels ? "slider-bottom-label" : ""}`, ref: (node) => {
                setTimeout(() => {
                    if (this.dotValueSlider) {
                        this.dotValueSlider.container = node;
                    }
                }, 1);
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "center", ref: (node) => (this.dotValueEquationNode = node) }, strings.panels.dotDensity.dotValueEquation
            .replace("${value}", this.dotValue.toString())
            .replace("${units}", ((_a = renderer.legendOptions) === null || _a === void 0 ? void 0 : _a.unit) || "")))));
    }
    renderDotSize() {
        const { layer, mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (mapImageSublayer && layer.version < 11.1) {
            // not supported
            return;
        }
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.dotDensity.dotSize), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-slider-input", { min: 0.5, max: 4, values: [renderer.dotSize], precision: 1, suffixText: strings.panels.dotDensity.px, onArcgisSmartMappingSliderInputChange: (event) => {
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
                const newDotSize = event.detail;
                const currentDotSize = renderer.dotSize;
                if (newDotSize === currentDotSize) {
                    return;
                }
                renderer.dotSize = newDotSize;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
            } })));
    }
    renderBackgroundStyle() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-background-symbol", { onArcgisSmartMappingBackgroundSymbolChange: () => (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement) }));
    }
    renderOptions() {
        const { mapImageSublayer, mapView, layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between", class: "top-margin" }, strings.panels.dotDensity.varyDotByScale, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: renderer.referenceScale === mapView.scale, onCalciteSwitchChange: (event) => {
                const node = event.target;
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
                renderer.referenceScale = node.checked ? mapView.scale : undefined;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
            } })), !mapImageSublayer && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between" }, strings.panels.dotDensity.blendOverlappingColors, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: renderer.dotBlendingEnabled, onCalciteSwitchChange: (event) => {
                const node = event.target;
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
                renderer.dotBlendingEnabled = node.checked;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
            } })))));
    }
    getSliderStepsPos(value) {
        let index = 0;
        this.sliderSteps.forEach((step, idx) => {
            if (value >= step) {
                index = idx;
            }
            else if (value - this.sliderSteps[index] > step - value) {
                // closer to upper value
                index = idx;
            }
        });
        return index;
    }
    handleLegendItemTextChange(index, label) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        if (!label.length) {
            let matchingInfo = this.originalRendererJSON.attributes.find((info) => info.field === renderer.attributes[index].field);
            label = matchingInfo.label;
        }
        renderer.attributes[index].label = label;
        this.inputNodes[index].classList.add("hidden");
        this.labelNodes[index].classList.remove("hidden");
        this.labelNodes[index].innerHTML = label;
        setTimeout(() => this.labelNodes[index].focus(), 300);
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
    }
    handleDotValueChange(dotValue) {
        const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        let renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        renderer.dotValue = Math.round(dotValue);
        renderer.referenceScale = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ac)(renderer.referenceScale)
            ? mapView.scale
            : undefined;
        this.updateDotValueEquation();
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
    }
    handleSortLegend(items) {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const attributes = renderer.attributes.map((attribute) => {
            return attribute.clone();
        });
        const itemValues = items.map((item) => item.value);
        attributes.sort((a, b) => itemValues.indexOf(a.field) - itemValues.indexOf(b.field));
        renderer.attributes = attributes;
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
    }
    initSliderSteps() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const authoringInfo = renderer.authoringInfo;
        const min = authoringInfo.minSliderValue;
        const max = Math.max(authoringInfo.maxSliderValue, this.dotValue);
        if (this.sliderSteps && this.sliderSteps.indexOf(this.dotValue) > -1) {
            // current dot value is one of the steps
            return false;
        }
        const sliderIntervalCount = 80;
        const divider = 4;
        const range = max - min;
        let rangeSteps = range / Math.pow(2, sliderIntervalCount / divider - 1);
        rangeSteps = Math.max(rangeSteps, 1);
        const steps = [min];
        for (let i = 0; i < sliderIntervalCount - 1; i++) {
            let value = Math.round(min + Math.pow(2, i / divider) * rangeSteps);
            if (value < min + (i + 1)) {
                // make sure we move at least by 1
                value = min + (i + 1);
            }
            if (this.dotValue < value && this.dotValue > steps[steps.length - 1]) {
                // make sure current value is a stop
                steps.push(this.dotValue);
            }
            if (value >= max) {
                steps.push(max);
                break;
            }
            else {
                steps.push(value);
            }
        }
        this.sliderSteps = steps;
        return true;
    }
    openSymbolStylerForLegendSwatch(index) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.E)();
        const legendSwatchNode = this.legendSwatchNodes[index];
        const symbolStylerDiv = document.createElement("div");
        symbolStylerDiv.className = "symbol-styler-div";
        this.popoverSettings.popoverNode = (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_7__.c)({
            referenceElement: this.flowItemNode,
            heading: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s.strings.styler.symbolStyle
        });
        this.popoverSettings.popoverNode.addEventListener("arcgisSmartMappingStylerPopoverClose", () => {
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_7__.r)(this.popoverSettings.popoverNode);
            setTimeout(() => legendSwatchNode === null || legendSwatchNode === void 0 ? void 0 : legendSwatchNode.focus(), 300);
            legendSwatchNode.classList.remove("selected");
        });
        this.popoverSettings.popoverNode.addEventListener("arcgisSmartMappingStylerPopoverDisconnected", () => {
            (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_7__.r)(this.popoverSettings.popoverNode);
            legendSwatchNode.classList.remove("selected");
            this.popoverSettings.popoverNode = null;
        });
        (0,_symbolStyler_04635b2b_js__WEBPACK_IMPORTED_MODULE_7__.b)({
            selectedAttribute: index,
            popoverNode: this.popoverSettings.popoverNode,
            onChange: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }
        });
        legendSwatchNode.classList.add("selected");
    }
    updateDotValueEquation() {
        var _a;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        this.dotValueEquationNode.innerHTML = strings.panels.dotDensity.dotValueEquation
            .replace("${value}", this.dotValue.toString())
            .replace("${units}", this.htmlEncode(((_a = renderer.legendOptions) === null || _a === void 0 ? void 0 : _a.unit) || ""));
    }
    htmlEncode(input) {
        const textArea = document.createElement("textarea");
        textArea.innerText = input;
        return textArea.innerHTML.split("<br>").join("\n");
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsDotDensity.style = arcgisSmartMappingPanelsDotDensityCss;

const arcgisSmartMappingPanelsHeatmapCss = ":host{width:100%}.flow-item{height:100%}.heatmap-block{overflow-x:hidden}.attribute-name{word-break:break-all}.slider-labels{display:flex;justify-content:space-between}.top-bottom-margin-small{margin:10px 0}.top-margin-medium{margin-top:18px}";

const ArcgisSmartMappingPanelsHeatmap = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsHeatmapClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsHeatmapClose", 7);
        this.arcgisSmartMappingPanelsHeatmapBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsHeatmapBackClick", 7);
        this.arcgisSmartMappingPanelsHeatmapError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsHeatmapError", 7);
        //-------------------------------------------------------------------
        //
        //  Private methods
        //
        //-------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.E)();
            this.arcgisSmartMappingPanelsHeatmapClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererJSON, originalFeatureReduction } = this;
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.j)(originalRendererJSON, originalFeatureReduction);
            this.arcgisSmartMappingPanelsHeatmapClose.emit("cancel");
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //-------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //-------------------------------------------------------------------
    componentWillLoad() {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    disconnectedCallback() {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ae)();
    }
    //-------------------------------------------------------------------
    //
    //  Render Methods
    //
    //-------------------------------------------------------------------
    render() {
        var _a;
        const { hideLayerTitle, isRTL, layer, mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const title = hideLayerTitle ? undefined : (_a = mapImageSublayer === null || mapImageSublayer === void 0 ? void 0 : mapImageSublayer.title) !== null && _a !== void 0 ? _a : layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.C.rtl]: isRTL
            }, heading: strings.panels.heatmap.styleOptions, description: title, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsHeatmapBackClick.emit(), ref: (node) => (this.flowItemNode = node) }, this.renderVisualization(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderVisualization() {
        var _a;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const fieldName = renderer.field ? (_a = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.u)(renderer.field)) === null || _a === void 0 ? void 0 : _a.label : undefined;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "heatmap-block", heading: strings.panels.heatmap.heatmapStyle, open: true }, fieldName ? (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "attribute-name" }, fieldName) : null, this.renderSymbol(), this.renderHeatmapSlider(), this.renderSoftEdges(), this.renderInfluenceValue(), this.renderLock(), this.renderRegenerate()));
    }
    renderSymbol() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const colors = renderer.colorStops.map((colorStop) => {
            const color = colorStop.color.clone();
            color.a = 1;
            return color;
        });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { type: "heatmap-ramp", rampType: "continuous", colors: colors, onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
            } }));
    }
    renderHeatmapSlider() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-heatmap-slider", { ref: (node) => {
                if (node) {
                    this.sliderNode = node;
                }
            } }));
    }
    renderSoftEdges() {
        var _a;
        // TODO: replace custom calcite-labels after custom label properties area added on calcite-slider
        const { strings, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const originalRenderer = modules.rendererJsonUtils.fromJSON(this.originalRendererJSON);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, " ", strings.panels.heatmap.softenEdges, " "), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { min: 0, max: 1, minLabel: strings.panels.heatmap.less, maxLabel: strings.panels.heatmap.more, step: 0.01, value: ((_a = originalRenderer.authoringInfo) === null || _a === void 0 ? void 0 : _a.fadeRatio) || 0, onCalciteSliderInput: (event) => {
                var _a;
                const node = event.target;
                const newFadeRatio = node.value;
                const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
                if (((_a = renderer.authoringInfo) === null || _a === void 0 ? void 0 : _a.fadeRatio) === newFadeRatio) {
                    return;
                }
                const newRenderer = (0,_heatmap_75ffd452_js__WEBPACK_IMPORTED_MODULE_8__.u)(newFadeRatio);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.e)(newRenderer, layer);
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
                // update colors on slider
                this.sliderNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.sliderNode);
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-labels", "aria-hidden": "true" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.heatmap.less), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.heatmap.more))));
    }
    renderInfluenceValue() {
        // TODO: replace custom calcite-labels after custom label properties area added on calcite-slider
        const { strings, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const originalRenderer = modules.rendererJsonUtils.fromJSON(this.originalRendererJSON);
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "top-bottom-margin-small" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.heatmap.areaOfInfluence), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-slider", { min: 1, max: 60, minLabel: strings.panels.heatmap.smaller, maxLabel: strings.panels.heatmap.larger, value: originalRenderer.radius || 0, onCalciteSliderInput: (event) => {
                const node = event.target;
                const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
                renderer.radius = node.value || 10;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "slider-labels", "aria-hidden": "true" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.heatmap.smaller), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", null, strings.panels.heatmap.larger))));
    }
    renderLock() {
        const { layer, mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (mapImageSublayer) {
            // hide it until MS supports new webmap spec
            return;
        }
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const { referenceScale } = renderer;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "top-margin-medium" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { layout: "inline-space-between" }, strings.panels.heatmap.lock, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-switch", { scale: "s", checked: !!referenceScale, onCalciteSwitchChange: () => {
                const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
                const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
                renderer.referenceScale = renderer.referenceScale ? 0 : mapView.scale;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
            }, ref: (node) => {
                this.calciteSwitchNode = node;
            }, onMouseOver: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.af)(this.calciteSwitchNode, strings.panels.heatmap.lockHelp), onMouseOut: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ae)(), onFocus: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.af)(this.calciteSwitchNode, strings.panels.heatmap.lockHelp), onFocusout: () => (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ae)() }))));
    }
    renderRegenerate() {
        const { mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (mapImageSublayer) {
            // hide it until MS supports new webmap spec
            return;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "top-bottom-margin-small" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { appearance: "outline-fill", kind: "neutral", width: "full", onClick: () => {
                (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_5__.r)((0,_heatmap_75ffd452_js__WEBPACK_IMPORTED_MODULE_8__.a)(), this.flowItemNode).then(() => {
                    (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ab)();
                }, (error) => this.arcgisSmartMappingPanelsHeatmapError.emit(error));
            }, label: strings.panels.heatmap.regenerate }, strings.panels.heatmap.regenerate)));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsHeatmap.style = arcgisSmartMappingPanelsHeatmapCss;

const arcgisSmartMappingPanelsPredominanceSizeCss = ":host{width:100%}.flow-item{height:100%}";

const ArcgisSmartMappingPanelsPredominanceSize = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsPredominanceSizeBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsPredominanceSizeBackClick", 7);
        this.arcgisSmartMappingPanelsPredominanceSizeClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsPredominanceSizeClose", 7);
        this.arcgisSmartMappingPanelsPredominanceSizeError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsPredominanceSizeError", 7);
        this.tileNodes = [];
        //-------------------------------------------------------------------
        //
        //  Private Methods
        //
        //-------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsPredominanceSizeClose.emit("save");
        };
        this.handleOptionsClick = (type) => {
            const { flowNode } = this;
            switch (type) {
                case "size": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-size");
                    flowItem.hideTransparency = true;
                    flowItem.hideRotation = true;
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeError", ({ detail }) => this.arcgisSmartMappingPanelsPredominanceSizeError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "predominance": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-predominance");
                    flowItem.hideTransparency = true;
                    flowItem.hideRotation = true;
                    flowItem.addEventListener("arcgisSmartMappingPanelsPredominanceClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsPredominanceBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsPredominanceError", ({ detail }) => this.arcgisSmartMappingPanelsPredominanceSizeError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
            }
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
        this.lastClick = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //-------------------------------------------------------------------
    //
    //  Lifecycle Methods
    //
    //-------------------------------------------------------------------
    componentWillLoad() {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        // save original renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
        this.flowNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.F)(this.hostElement, "calcite-flow");
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //-------------------------------------------------------------------
    //
    //  Render Methods
    //
    //-------------------------------------------------------------------
    render() {
        var _a;
        const { layer, hideLayerTitle, isRTL, mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const title = hideLayerTitle ? undefined : (_a = mapImageSublayer === null || mapImageSublayer === void 0 ? void 0 : mapImageSublayer.title) !== null && _a !== void 0 ? _a : layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.C.rtl]: isRTL
            }, heading: strings.panels.styleOptions, description: title, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, ref: (node) => (this.flowItemNode = node), onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsPredominanceSizeBackClick.emit() }, this.renderPredominanceTile(), this.renderSizeTile(), this.renderTransparency(), this.renderRotation(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderPredominanceTile() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-tile", { type: "predominance", selected: false, onArcgisSmartMappingTileSelect: () => {
                this.lastClick = "predominance";
                this.handleOptionsClick("predominance");
            }, onArcgisSmartMappingTileOptions: () => this.handleOptionsClick("predominance"), ref: (node) => {
                if (node) {
                    this.tileNodes["predominance"] = node;
                }
            } }));
    }
    renderSizeTile() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-tile", { type: "size", selected: this.lastClick === "size", onArcgisSmartMappingTileSelect: () => {
                this.lastClick = "size";
                this.handleOptionsClick("size");
            }, onArcgisSmartMappingTileOptions: () => this.handleOptionsClick("size"), ref: (node) => {
                if (node) {
                    this.tileNodes["size"] = node;
                }
            } }));
    }
    renderTransparency() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer), "opacity");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-transparency", { open: !!opacityVisVar, onArcgisSmartMappingSymbolTransparencyError: ({ detail }) => this.arcgisSmartMappingPanelsPredominanceSizeError.emit(detail) }));
    }
    renderRotation() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer), "opacity");
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer), "rotation");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-rotation", { open: !opacityVisVar && !!rotationVisVar, onArcgisSmartMappingRotationError: ({ detail }) => this.arcgisSmartMappingPanelsPredominanceSizeError.emit(detail) }));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.j)(this.originalRendererJSON, this.originalFeatureReduction);
                this.arcgisSmartMappingPanelsPredominanceSizeClose.emit("cancel");
            }, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    focusSelectedTile() {
        setTimeout(() => requestAnimationFrame(() => this.tileNodes[this.lastClick].setFocus()), 300);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsPredominanceSize.style = arcgisSmartMappingPanelsPredominanceSizeCss;

const arcgisSmartMappingPanelsRelationshipSizeCss = ":host{width:100%}.flow-item{height:100%}";

const ArcgisSmartMappingPanelsRelationshipSize = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsRelationshipSizeClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRelationshipSizeClose", 7);
        this.arcgisSmartMappingPanelsRelationshipSizeBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRelationshipSizeBackClick", 7);
        this.arcgisSmartMappingPanelsRelationshipSizeError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRelationshipSizeError", 7);
        this.tileNodes = [];
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleOptionsClick = (type) => {
            const { flowNode } = this;
            switch (type) {
                case "size": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-size");
                    flowItem.hideTransparency = true;
                    flowItem.hideRotation = true;
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeError", ({ detail }) => this.arcgisSmartMappingPanelsRelationshipSizeError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "relationship": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-relationship");
                    flowItem.hideTransparency = true;
                    flowItem.hideRotation = true;
                    flowItem.addEventListener("arcgisSmartMappingPanelsRelationshipClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsRelationshipBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsRelationshipError", ({ detail }) => this.arcgisSmartMappingPanelsRelationshipSizeError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
            }
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
        this.lastClick = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle Methods
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        // save original renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
        this.flowNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.F)(this.hostElement, "calcite-flow");
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        var _a;
        const { layer, mapImageSublayer, hideLayerTitle, isRTL, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const title = hideLayerTitle ? undefined : (_a = mapImageSublayer === null || mapImageSublayer === void 0 ? void 0 : mapImageSublayer.title) !== null && _a !== void 0 ? _a : layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.styleOptions, description: title, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: () => this.arcgisSmartMappingPanelsRelationshipSizeClose.emit("save"), onCalciteFlowItemBack: () => {
                this.arcgisSmartMappingPanelsRelationshipSizeBackClick.emit();
            }, ref: (node) => (this.flowItemNode = node) }, this.renderDoneButton(), this.renderCancelButton(), this.renderRelationshipTile(), this.renderSizeTile(), this.renderTransparency(), this.renderRotation())));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: () => this.arcgisSmartMappingPanelsRelationshipSizeClose.emit("save"), appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.j)(this.originalRendererJSON, this.originalFeatureReduction);
                this.arcgisSmartMappingPanelsRelationshipSizeClose.emit("cancel");
            }, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    renderRelationshipTile() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-tile", { type: "relationship", selected: this.lastClick === "relationship", onArcgisSmartMappingTileSelect: () => {
                this.lastClick = "relationship";
                this.handleOptionsClick("relationship");
            }, onArcgisSmartMappingTileOptions: () => this.handleOptionsClick("relationship"), ref: (node) => {
                if (node) {
                    this.tileNodes["relationship"] = node;
                }
            } }));
    }
    renderSizeTile() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-tile", { type: "size", selected: this.lastClick === "size", onArcgisSmartMappingTileSelect: () => {
                this.lastClick = "size";
                this.handleOptionsClick("size");
            }, onArcgisSmartMappingTileOptions: () => this.handleOptionsClick("size"), ref: (node) => {
                if (node) {
                    this.tileNodes["size"] = node;
                }
            } }));
    }
    renderTransparency() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "opacity");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-transparency", { open: !!opacityVisVar, onArcgisSmartMappingSymbolTransparencyError: ({ detail }) => this.arcgisSmartMappingPanelsRelationshipSizeError.emit(detail) }));
    }
    renderRotation() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "opacity");
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "rotation");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-rotation", { open: !opacityVisVar && !!rotationVisVar, onArcgisSmartMappingRotationError: ({ detail }) => this.arcgisSmartMappingPanelsRelationshipSizeError.emit(detail) }));
    }
    focusSelectedTile() {
        setTimeout(() => requestAnimationFrame(() => this.tileNodes[this.lastClick].setFocus()), 300);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsRelationshipSize.style = arcgisSmartMappingPanelsRelationshipSizeCss;

const arcgisSmartMappingPanelsSimpleCss = ":host{width:100%}.flow-item{height:100%}.simple-block{overflow-x:hidden}";

const ArcgisSmartMappingPanelsSimple = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsSimpleClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsSimpleClose", 7);
        this.arcgisSmartMappingPanelsSimpleBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsSimpleBackClick", 7);
        this.arcgisSmartMappingPanelsSimpleError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsSimpleError", 7);
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsSimpleClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRenderer, originalFeatureReduction } = this;
            const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
            if (layer.type === "geo-rss") {
                layer.pointSymbol = originalRenderer[0];
                layer.lineSymbol = originalRenderer[1];
                layer.polygonSymbol = originalRenderer[2];
            }
            else {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.j)(originalRenderer, originalFeatureReduction);
            }
            this.arcgisSmartMappingPanelsSimpleClose.emit("cancel");
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
        this.visualizationOpen = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a, _b;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (layer.type === "geo-rss" || layer.type === "wfs") {
            (_b = document.getElementById("simple-panel-dismiss-button")) === null || _b === void 0 ? void 0 : _b.setFocus();
        }
        else {
            document.getElementById("simple-panel").setFocus();
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        this.visualizationOpen = true;
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (layer.type === "geo-rss") {
            const geoRSSLayer = layer;
            this.originalRenderer = [
                geoRSSLayer.pointSymbol.clone(),
                geoRSSLayer.lineSymbol.clone(),
                geoRSSLayer.polygonSymbol.clone()
            ];
        }
        else {
            // save original renderer
            const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
            this.originalRenderer = renderer.toJSON();
            this.originalFeatureReduction =
                "featureReduction" in layer && layer.featureReduction
                    ? modules.esriLang.clone(layer.featureReduction)
                    : undefined;
            await (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.d)();
        }
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { layer, hideLayerTitle, isRTL, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.gallery.styles, description: !hideLayerTitle ? layer.title : undefined, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.aa)(this.hostElement), menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, onCalciteFlowItemBack: () => {
                this.arcgisSmartMappingPanelsSimpleBackClick.emit();
            }, ref: (node) => {
                this.flowItemNode = node;
            } }, this.renderDoneButton(), this.renderCancelButton(), this.renderVisualization(), this.renderTransparency(), this.renderRotation())));
    }
    renderDoneButton() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (!layer) {
            // loading state of panel doesn't position buttons correctly
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        if (!layer) {
            // loading state of panel doesn't position buttons correctly
            return null;
        }
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    renderVisualization() {
        const { visualizationOpen } = this;
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-block", { class: "simple-block", heading: strings.panels.simple.simpleStyle, collapsible: layer.type === "geo-rss" ? false : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.ag)(), open: visualizationOpen, onCalciteBlockOpen: () => (this.visualizationOpen = true), onCalciteBlockClose: () => (this.visualizationOpen = false) }, layer.type === "geo-rss" ? this.renderGeoRssSymbols() : this.renderSymbol()));
    }
    renderSymbol() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const symbol = layer.renderer
            .symbol;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { symbol: symbol, type: "simple", onArcgisSmartMappingSymbolButtonSymbolChange: () => {
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
                this.rotationNode && (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.rotationNode);
            } }));
    }
    renderGeoRssSymbols() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, this.renderGeoRssSymbol("point"), this.renderGeoRssSymbol("line"), this.renderGeoRssSymbol("polygon")));
    }
    renderGeoRssSymbol(type) {
        const { layer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const geoRSSLayer = layer;
        let symbol = type === "point"
            ? geoRSSLayer.pointSymbol
            : type === "line"
                ? geoRSSLayer.lineSymbol
                : geoRSSLayer.polygonSymbol;
        const label = type === "point"
            ? strings.panels.simple.pointSymbolStyle
            : type === "line"
                ? strings.panels.simple.lineSymbolStyle
                : strings.panels.simple.polygonSymbolStyle;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-symbol-button", { symbol: symbol, type: type === "point" ? "geo-rss-point" : type === "line" ? "geo-rss-line" : "geo-rss-polygon", label: label, onArcgisSmartMappingSymbolButtonSymbolChange: () => (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement) }));
    }
    renderTransparency() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "opacity");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-transparency", { open: !!opacityVisVar, onArcgisSmartMappingSymbolTransparencyError: ({ detail }) => this.arcgisSmartMappingPanelsSimpleError.emit(detail) }));
    }
    renderRotation() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "opacity");
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)(renderer, "rotation");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-rotation", { open: !opacityVisVar && !!rotationVisVar, ref: (node) => (this.rotationNode = node), onArcgisSmartMappingRotationError: ({ detail }) => this.arcgisSmartMappingPanelsSimpleError.emit(detail) }));
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsSimple.style = arcgisSmartMappingPanelsSimpleCss;

const arcgisSmartMappingPanelsTypeSizeCss = ":host{width:100%}.flow-item{height:100%}";

const ArcgisSmartMappingPanelsTypeSize = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsTypeSizeBackClick = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsTypeSizeBackClick", 7);
        this.arcgisSmartMappingPanelsTypeSizeClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsTypeSizeClose", 7);
        this.arcgisSmartMappingPanelsTypeSizeError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsTypeSizeError", 7);
        this.tileNodes = [];
        //-------------------------------------------------------------------
        //
        //  Private Methods
        //
        //-------------------------------------------------------------------
        this.handleDone = () => {
            // keep the current settings on the layer
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.E)();
            this.arcgisSmartMappingPanelsTypeSizeClose.emit("save");
        };
        this.handleOptionsClick = (type) => {
            const { flowNode } = this;
            switch (type) {
                case "size": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-size");
                    flowItem.hideRotation = true;
                    flowItem.hideTransparency = true;
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsSizeError", ({ detail }) => this.arcgisSmartMappingPanelsTypeSizeError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
                case "type": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-type");
                    flowItem.hideRotation = true;
                    flowItem.hideTransparency = true;
                    flowItem.addEventListener("arcgisSmartMappingPanelsTypeClose", () => {
                        flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsTypeBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsTypeError", ({ detail }) => this.arcgisSmartMappingPanelsTypeSizeError.emit(detail));
                    flowNode.appendChild(flowItem);
                    break;
                }
            }
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
        this.lastClick = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //-------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //-------------------------------------------------------------------
    componentWillLoad() {
        const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        // save original renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer);
        this.originalRendererJSON = renderer.toJSON();
        this.originalFeatureReduction =
            "featureReduction" in layer && layer.featureReduction
                ? modules.esriLang.clone(layer.featureReduction)
                : undefined;
        this.flowNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.F)(this.hostElement, "calcite-flow");
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    //-------------------------------------------------------------------
    //
    //  Render Methods
    //
    //-------------------------------------------------------------------
    render() {
        var _a;
        const { hideLayerTitle, isRTL, layer, mapImageSublayer, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const title = hideLayerTitle ? undefined : (_a = mapImageSublayer === null || mapImageSublayer === void 0 ? void 0 : mapImageSublayer.title) !== null && _a !== void 0 ? _a : layer.title;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_4__.C.rtl]: isRTL
            }, closable: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.aa)(this.hostElement), heading: strings.panels.styleOptions, description: title, menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, ref: (node) => (this.flowItemNode = node), onCalciteFlowItemBack: () => this.arcgisSmartMappingPanelsTypeSizeBackClick.emit(), onCalciteFlowItemClose: this.handleDone }, this.renderTypeTile(), this.renderSizeTile(), this.renderTransparency(), this.renderRotation(), this.renderDoneButton(), this.renderCancelButton())));
    }
    renderTypeTile() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-tile", { type: "type", selected: this.lastClick === "type", onArcgisSmartMappingTileSelect: () => {
                this.lastClick = "type";
                this.handleOptionsClick("type");
            }, onArcgisSmartMappingTileOptions: () => this.handleOptionsClick("type"), ref: (node) => {
                if (node) {
                    this.tileNodes["type"] = node;
                }
            } }));
    }
    renderSizeTile() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-tile", { type: "size", selected: this.lastClick === "size", onArcgisSmartMappingTileSelect: () => {
                this.lastClick = "size";
                this.handleOptionsClick("size");
            }, onArcgisSmartMappingTileOptions: () => this.handleOptionsClick("size"), ref: (node) => {
                if (node) {
                    this.tileNodes["size"] = node;
                }
            } }));
    }
    renderTransparency() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer), "opacity");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-transparency", { open: !!opacityVisVar, onArcgisSmartMappingSymbolTransparencyError: ({ detail }) => this.arcgisSmartMappingPanelsTypeSizeError.emit(detail) }));
    }
    renderRotation() {
        const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        const opacityVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer), "opacity");
        const rotationVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.h)(layer), "rotation");
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-rotation", { open: !opacityVisVar && !!rotationVisVar, onArcgisSmartMappingRotationError: ({ detail }) => this.arcgisSmartMappingPanelsTypeSizeError.emit(detail) }));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: () => {
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_2__.j)(this.originalRendererJSON, this.originalFeatureReduction);
                this.arcgisSmartMappingPanelsTypeSizeClose.emit("cancel");
            }, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    focusSelectedTile() {
        setTimeout(() => requestAnimationFrame(() => this.tileNodes[this.lastClick].setFocus()), 300);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsTypeSize.style = arcgisSmartMappingPanelsTypeSizeCss;



//# sourceMappingURL=arcgis-smart-mapping-field-pick-list_11.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/heatmap-75ffd452.js":
/*!*************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/heatmap-75ffd452.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ updateWithHeatmapStatistics),
/* harmony export */   c: () => (/* binding */ createHeatmapRenderer),
/* harmony export */   u: () => (/* binding */ updateHeatmapRendererwithFade)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */




/**
 * Updates the layer with a Heatmap renderer with default settings
 * @param props: must contain layer, mapView, GalleryFields[]
 * @param options: options
 */
function createHeatmapRenderer(options) {
    var _a;
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    options = options || {};
    if (rendererType === "heatmap") {
        options.radius = options.radius || renderer.radius;
        options.heatmapScheme = options.heatmapScheme || (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.V)();
    }
    if ((_a = options.fieldInfos) === null || _a === void 0 ? void 0 : _a.length) {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.O)([options.fieldInfos[0].field]);
    }
    return modules.HeatmapCreator.createRenderer({
        layer,
        view: mapView,
        field: options.fieldInfos && options.fieldInfos.length ? options.fieldInfos[0].field : null,
        radius: options.radius || 10,
        heatmapScheme: options.heatmapScheme || undefined
    });
}
/**
 * Updates the Heatmap renderer with a new fadeRatio
 * @param props: must contain layer, mapView, GalleryFields[]
 * @param fadeRatio: new value
 */
function updateHeatmapRendererwithFade(fadeRatio) {
    const { layer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    return modules.HeatmapCreator.updateRenderer({
        renderer,
        fadeRatio
    });
}
/**
 * Updates the layer with a new radius
 * @param props: must contain layer, mapView, GalleryFields[]
 * @param options: options
 */
function updateWithHeatmapStatistics(options) {
    const { layer: smLayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    options = options || {};
    // workaround for: This expression is not callable. Type 'heatmapStatistics' has no call signatures.ts(2349)
    //const _heatmapStatistics: any = modules.heatmapStatistics;
    return modules
        .heatmapStatistics({
        layer,
        view: mapView,
        field: renderer.field,
        radius: options.radius || renderer.radius || 10
    })
        .then((statistics) => {
        renderer.minDensity = statistics.min;
        renderer.maxDensity = statistics.max;
        return Promise.resolve(statistics);
    }, (error) => Promise.reject(error));
}



//# sourceMappingURL=heatmap-75ffd452.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,