"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-4a244f"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-raster-gallery.entry.js":
/*!*********************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-smart-mapping-panels-raster-gallery.entry.js ***!
  \*********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_smart_mapping_panels_raster_gallery: () => (/* binding */ ArcgisSmartMappingPanelsRasterGallery)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./loading-69139907.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loading-69139907.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./raster-renderer-a62f152c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-renderer-a62f152c.js");
/* harmony import */ var _languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./languageUtil-ef0e54b2.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/languageUtil-ef0e54b2.js");
/* harmony import */ var _raster_flow_761a3470_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./raster-flow-761a3470.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-flow-761a3470.js");
/* harmony import */ var _raster_class_breaks_50c446bd_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./raster-class-breaks-50c446bd.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-class-breaks-50c446bd.js");
/* harmony import */ var _locale_050b6db9_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./locale-050b6db9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/locale-050b6db9.js");
/* harmony import */ var _dom_4d367677_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-4d367677.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/dom-4d367677.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/* harmony import */ var _raster_symbolStyler_9b32ef48_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./raster-symbolStyler-9b32ef48.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-symbolStyler-9b32ef48.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */















/**
 * creates a Shaded Relief renderer with default settings
 */
function createShadedReliefRenderer() {
    const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
    const layer = smLayer;
    const rasterFunction = layer.type === "imagery" ? layer.rasterFunction : undefined;
    return modules.RasterShadedReliefCreator.createRenderer({ layer, rasterFunction });
}

/**
 * creates a Colormap renderer with default settings
 */
async function createColormapRenderer() {
    const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
    const layer = smLayer;
    const rasterFunction = layer.type === "imagery" ? layer.rasterFunction : undefined;
    return modules.RasterColormapCreator.createRenderer({
        layer,
        rasterFunction
    }).then((result) => {
        result.renderer.colormapInfos.forEach((colormapInfo, idx) => {
            if (!colormapInfo.label) {
                // workaround for allowing empty labels. We keep values with no labels in our table for parity with Pro.
                result.renderer.colormapInfos[idx].label = " ";
            }
        });
        return Promise.resolve(result);
    });
}

function createCertainRasterRenderer(type, galleryRequestWrapper) {
    switch (type) {
        case "raster-flow":
            galleryRequestWrapper((0,_raster_flow_761a3470_js__WEBPACK_IMPORTED_MODULE_7__.c)());
            break;
        case "raster-vector-field":
            galleryRequestWrapper((0,_raster_class_breaks_50c446bd_js__WEBPACK_IMPORTED_MODULE_8__.a)());
            break;
        case "raster-stretch":
            galleryRequestWrapper((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a3)());
            break;
        case "raster-rgb":
            galleryRequestWrapper((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a2)());
            break;
        case "raster-shaded-relief":
            galleryRequestWrapper(createShadedReliefRenderer());
            break;
        case "raster-class-breaks":
            galleryRequestWrapper((0,_raster_class_breaks_50c446bd_js__WEBPACK_IMPORTED_MODULE_8__.c)());
            break;
        case "raster-colormap":
            galleryRequestWrapper(createColormapRenderer());
            break;
        case "raster-unique-value":
            galleryRequestWrapper((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.a1)());
            break;
    }
}

const arcgisSmartMappingPanelsRasterGalleryCss = ".styles-msg-title{margin-top:12px;padding:6px;font-weight:bold;font-size:16px;display:flex}.styles-msg{font-size:var(--calcite-font-size--2)}";

const ArcgisSmartMappingPanelsRasterGallery = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.arcgisSmartMappingPanelsRasterGalleryClose = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterGalleryClose", 7);
        this.arcgisSmartMappingPanelsRasterGalleryError = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "arcgisSmartMappingPanelsRasterGalleryError", 7);
        this.tileNodes = [];
        //--------------------------------------------------------------------------
        //
        //  Private methods
        //
        //--------------------------------------------------------------------------
        this.handleSelectClick = (type) => {
            createCertainRasterRenderer(type, this.galleryRequestWrapper);
        };
        this.handleOptionsClick = (type) => {
            switch (type) {
                case "raster-class-breaks": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-raster-class-breaks");
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterClassBreaksClose", () => {
                        this.flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterClassBreaksBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterClassBreaksError", ({ detail }) => this.arcgisSmartMappingPanelsRasterGalleryError.emit(detail));
                    this.flowNode.appendChild(flowItem);
                    break;
                }
                case "raster-colormap": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-raster-colormap");
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterColormapClose", () => {
                        this.flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterColormapBackClick", () => this.focusSelectedTile());
                    this.flowNode.appendChild(flowItem);
                    break;
                }
                case "raster-flow": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-raster-flow");
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterFlowClose", () => {
                        this.flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterFlowBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterFlowError", ({ detail }) => this.arcgisSmartMappingPanelsRasterGalleryError.emit(detail));
                    this.flowNode.appendChild(flowItem);
                    break;
                }
                case "raster-rgb": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-raster-rgb");
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterRgbClose", () => {
                        this.flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterRgbBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterRgbError", ({ detail }) => this.arcgisSmartMappingPanelsRasterGalleryError.emit(detail));
                    this.flowNode.appendChild(flowItem);
                    break;
                }
                case "raster-shaded-relief": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-raster-shaded-relief");
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterShadedReliefClose", () => {
                        this.flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterShadedReliefBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterShadedReliefError", ({ detail }) => this.arcgisSmartMappingPanelsRasterGalleryError.emit(detail));
                    this.flowNode.appendChild(flowItem);
                    break;
                }
                case "raster-stretch": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-raster-stretch");
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterStretchClose", () => {
                        this.flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterStretchBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterStretchError", ({ detail }) => this.arcgisSmartMappingPanelsRasterGalleryError.emit(detail));
                    this.flowNode.appendChild(flowItem);
                    break;
                }
                case "raster-unique-value": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-raster-unique-value");
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterUniqueValueClose", () => {
                        this.flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterUniqueValueBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterUniqueValueError", ({ detail }) => this.arcgisSmartMappingPanelsRasterGalleryError.emit(detail));
                    this.flowNode.appendChild(flowItem);
                    break;
                }
                case "raster-vector-field": {
                    const flowItem = document.createElement("arcgis-smart-mapping-panels-raster-vector-field");
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterVectorFieldClose", () => {
                        this.flowNode.removeChild(flowItem);
                        this.focusSelectedTile();
                    });
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterVectorFieldBackClick", () => this.focusSelectedTile());
                    flowItem.addEventListener("arcgisSmartMappingPanelsRasterVectorFieldError", ({ detail }) => this.arcgisSmartMappingPanelsRasterGalleryError.emit(detail));
                    this.flowNode.appendChild(flowItem);
                    break;
                }
            }
        };
        this.handleDone = () => {
            // keep the current settings on the layer
            this.arcgisSmartMappingPanelsRasterGalleryClose.emit("save");
        };
        this.handleCancel = () => {
            const { originalRendererObj, originalEffect, originalBandCombination } = this;
            const { layer: smLayer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
            const layer = smLayer;
            layer.effect = originalEffect;
            layer.bandIds = originalBandCombination;
            (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.a)(originalRendererObj, layer);
            this.arcgisSmartMappingPanelsRasterGalleryClose.emit("cancel");
        };
        /*
         * Place panel in loading mode during renderer creation.
         */
        this.galleryRequestWrapper = (request) => {
            const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
            (0,_loading_69139907_js__WEBPACK_IMPORTED_MODULE_2__.r)(request, this.flowItemNode).then((result) => {
                const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.e)(result.renderer.clone(), layer);
                (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f)(this.hostElement);
            }, () => {
                this.arcgisSmartMappingPanelsRasterGalleryError.emit({
                    message: strings.panels.gallery.errors.changeRendererErrorMsg,
                    type: "warning"
                });
            });
        };
        this.menuOpen = undefined;
        this.showBackButton = undefined;
        this.beforeBack = undefined;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    async setFocus() {
        var _a;
        (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus();
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentWillLoad() {
        const { layer: smLayer, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const layer = smLayer;
        await modules.smartMappingRasterUtils
            .getSupportedRendererInfo({ layer })
            .then((response) => {
            this.supportedRendererTypes = response.supportedTypes;
            if (!layer.renderer) {
                layer.renderer = response.defaultRenderer;
            }
            // save original renderer, effect, and band combination
            // TODO: add other raster renderer types
            this.originalRendererObj = layer.renderer;
            this.originalEffect = layer.effect;
            this.originalBandCombination = layer.bandIds || [];
        });
        this.flowNode = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.F)(this.hostElement, "calcite-flow");
    }
    componentDidLoad() {
        requestAnimationFrame(() => { var _a; return (_a = this.flowItemNode) === null || _a === void 0 ? void 0 : _a.setFocus(); });
    }
    componentDidUpdate() {
        setTimeout(() => { var _a; return (_a = this.tileNodes[0]) === null || _a === void 0 ? void 0 : _a.setFocus(); }, 300);
    }
    //--------------------------------------------------------------------------
    //
    //  Render Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { isRTL, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.H, { class: "calcite-match-height" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-flow-item", { heading: strings.panels.rasterGallery.style, class: {
                "flow-item": true,
                [_languageUtil_ef0e54b2_js__WEBPACK_IMPORTED_MODULE_6__.C.rtl]: isRTL
            }, closable: true, menuOpen: this.menuOpen, beforeBack: this.beforeBack,
            // @ts-ignore
            showBackButton: this.showBackButton, onCalciteFlowItemClose: this.handleDone, ref: (node) => (this.flowItemNode = node) }, this.renderRasterGalleryContent())));
    }
    renderRasterGalleryContent() {
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, this.renderStyleOptions(), this.renderDoneButton(), this.renderCancelButton()));
    }
    renderStyleOptions() {
        const { modules, strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        const rendererType = (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.g)();
        const supportedRendererTypes = modules.esriLang.clone(this.supportedRendererTypes);
        const orderedList = supportedRendererTypes.sort((supportedRendererType) => supportedRendererType === rendererType ? -1 : 1);
        const styleTiles = orderedList.map((style, idx) => {
            return this.renderStyleTile(style, idx);
        });
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: "styles-msg-title" }, strings.panels.rasterGallery.symbologyOptions), styleTiles));
    }
    renderStyleTile(type, idx) {
        const rendererType = (0,_raster_renderer_a62f152c_js__WEBPACK_IMPORTED_MODULE_5__.g)();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-smart-mapping-tile", { key: `tile-${type}`, tileType: "gallery", type: type, selected: type === rendererType, ref: (node) => {
                if (node) {
                    this.tileNodes[idx] = node;
                }
            }, onArcgisSmartMappingTileSelect: () => this.handleSelectClick(type), onArcgisSmartMappingTileOptions: () => this.handleOptionsClick(type) }));
    }
    renderDoneButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.done, onClick: this.handleDone, appearance: "solid", width: "half" }, strings.done));
    }
    renderCancelButton() {
        const { strings } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_1__.s;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-button", { slot: "footer", label: strings.cancel, onClick: this.handleCancel, appearance: "outline-fill", width: "half" }, strings.cancel));
    }
    focusSelectedTile() {
        setTimeout(() => requestAnimationFrame(() => { var _a; return (_a = this.tileNodes[0]) === null || _a === void 0 ? void 0 : _a.setFocus(); }), 300);
    }
    get hostElement() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisSmartMappingPanelsRasterGallery.style = arcgisSmartMappingPanelsRasterGalleryCss;



//# sourceMappingURL=arcgis-smart-mapping-panels-raster-gallery.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,