"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_colorS-3eca0a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorSize-ce0ccdeb.js":
/*!***************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/colorSize-ce0ccdeb.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ createSizeAgeRenderer),
/* harmony export */   b: () => (/* binding */ createColorSizeRenderer),
/* harmony export */   c: () => (/* binding */ createSizeRenderer),
/* harmony export */   d: () => (/* binding */ createColorAgeSizeRenderer),
/* harmony export */   e: () => (/* binding */ createColorSizeAgeRenderer),
/* harmony export */   f: () => (/* binding */ createSizeRendererFromExisting),
/* harmony export */   g: () => (/* binding */ createSizeAgeRendererFromExisting),
/* harmony export */   h: () => (/* binding */ createColorAgeSizeRendererFromExisting),
/* harmony export */   i: () => (/* binding */ createColorSizeAgeRendererFromExisting),
/* harmony export */   j: () => (/* binding */ createColorSizeRendererFromExisting),
/* harmony export */   k: () => (/* binding */ createClassedSizeRendererFromExisting),
/* harmony export */   l: () => (/* binding */ getSizeSliderStops),
/* harmony export */   m: () => (/* binding */ getClassBreaksSizes),
/* harmony export */   s: () => (/* binding */ sameSizeField)
/* harmony export */ });
/* harmony import */ var _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./raster-unique-value-0976ec7f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/raster-unique-value-0976ec7f.js");
/* harmony import */ var _loadModules_b4ac1247_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./loadModules-b4ac1247.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/loadModules-b4ac1247.js");
/* harmony import */ var _commonEnums_fcf13661_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./commonEnums-fcf13661.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonEnums-fcf13661.js");
/* harmony import */ var _color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./color-d6da0a9a.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/color-d6da0a9a.js");
/* harmony import */ var _commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./commonFunctions-b0830e9e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/commonFunctions-b0830e9e.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */






/**
 * Updates the layer with a Size renderer with default settings
 * @param options: options
 */
function createSizeRenderer(options) {
    var _a, _b;
    const { layer: smLayer, mapImageSublayer, mapView, supportsArcade, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    if (mapImageSublayer && !supportsArcade) {
        return createClassedSizeRenderer(options);
    }
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    options = options || {};
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    const fieldInfo = (_a = options.fieldInfos) === null || _a === void 0 ? void 0 : _a[0];
    const theme = options.theme ? options.theme : "high-to-low";
    const config = {
        layer,
        view: mapView,
        field: fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.field,
        theme,
        valueExpression: fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.expression,
        valueExpressionTitle: fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.expressionTitle,
        normalizationField: options.normalizationField,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer)
                    ? true
                    : false,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.sizeOptimizationEnabled)
                ? options.sizeOptimizationEnabled
                : true /* isPolygon(layer)
        ? true
        : false, */,
        legendOptions: options.legendOptions,
        defaultSymbolEnabled: false,
        forBinning: ((_b = layer.featureReduction) === null || _b === void 0 ? void 0 : _b.type) === "binning"
    };
    //console.log("createSizeRenderer-config", config);
    return modules.SizeCreator.createContinuousRenderer(config).then((result) => {
        //console.log("createSizeRenderer-success", result.renderer);
        if (!options.noReuse &&
            sameSizeField(options) &&
            ["size", "color-size", "type-size", "relationship-size"].indexOf(rendererType) > -1 &&
            authInfo &&
            authInfo.univariateTheme !== "above-and-below") {
            // re-use size renderer
            const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).clone();
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
            const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "size");
            const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
            result.renderer.visualVariables = [sizeVisVar];
            if (sizeOutlineVisVar) {
                result.renderer.visualVariables.push(sizeOutlineVisVar);
            }
            result.renderer.authoringInfo.visualVariables = [authSizeVisVar];
            /* if (renderer.classBreakInfos?.length) {
              result.renderer.classBreakInfos[0].symbol = renderer.classBreakInfos[0].symbol;
            } else {
              result.renderer.classBreakInfos[0].symbol = renderer.uniqueValueInfos[0].symbol;
            } color-size -> size: markers loose orange color */
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.Q)(result.renderer);
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        //console.log("createSizeRenderer out", result.renderer.toJSON());
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Size Age renderer with default settings
 * @param options: options
 */
function createSizeAgeRenderer(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    options = options || {};
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    const fieldInfo = (_a = options.fieldInfos) === null || _a === void 0 ? void 0 : _a[0];
    const theme = options.theme ? options.theme : "high-to-low";
    const config = {
        layer,
        view: mapView,
        startTime: fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.field,
        endTime: new Date(),
        theme,
        unit: undefined,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer)
                    ? true
                    : false,
        sizeOptimizationEnabled: true,
        legendOptions: options.legendOptions,
        defaultSymbolEnabled: false
    };
    return modules.SizeCreator.createAgeRenderer(config).then((result) => {
        if (sameSizeField(options) &&
            ["size-age", "color-size-age", "type-size-age"].indexOf(rendererType) > -1 &&
            authInfo &&
            (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) !== "above-and-below") {
            // re-use size renderer
            const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).clone();
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
            const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "size");
            const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size", "outline");
            result.renderer.visualVariables = [sizeVisVar];
            if (sizeOutlineVisVar) {
                result.renderer.visualVariables.push(sizeOutlineVisVar);
            }
            result.renderer.authoringInfo.visualVariables = [authSizeVisVar];
            /* if (renderer.classBreakInfos?.length) {
              result.renderer.classBreakInfos[0].symbol = renderer.classBreakInfos[0].symbol;
            } else {
              result.renderer.classBreakInfos[0].symbol = renderer.uniqueValueInfos[0].symbol;
            } color-size -> size: markers loose orange color */
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.Q)(result.renderer);
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        //console.log("createSizeAgeRenderer out", result.renderer.toJSON());
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Updates the layer with a Size renderer with default settings
 * @param options: options
 */
function createClassedSizeRenderer(options) {
    var _a, _b;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer));
    const fieldInfo = (_a = options.fieldInfos) === null || _a === void 0 ? void 0 : _a[0];
    return modules.SizeCreator.createClassBreaksRenderer({
        layer,
        view: mapView,
        field: fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.field,
        valueExpression: fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.expression,
        valueExpressionTitle: fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.expressionTitle,
        normalizationField: undefined,
        classificationMethod: options.classificationMethod ? options.classificationMethod : "natural-breaks",
        standardDeviationInterval: options.classificationMethod === "standard-deviation"
            ? options.standardDeviationInterval
                ? options.standardDeviationInterval
                : 1
            : undefined,
        numClasses: options.numClasses ? options.numClasses : 4,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer)
                    ? true
                    : false,
        legendOptions: options.legendOptions,
        defaultSymbolEnabled: false,
        forBinning: ((_b = layer.featureReduction) === null || _b === void 0 ? void 0 : _b.type) === "binning"
    }).then((result) => {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Size renderer with settings from current renderer
 */
function createSizeRendererFromExisting(options) {
    var _a, _b, _c, _d;
    const { layer: smLayer, mapImageSublayer, mapView, supportsArcade, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    if (mapImageSublayer && !supportsArcade) {
        return createClassedSizeRendererFromExisting(options);
    }
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo || {};
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
    const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "size");
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    let symbol;
    if (["type-size", "relationship-size"].indexOf(rendererType) > -1) {
        const uvRenderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        symbol =
            uvRenderer.uniqueValueInfos && uvRenderer.uniqueValueInfos.length
                ? uvRenderer.uniqueValueInfos[0].symbol
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    }
    else {
        // use largest symbol
        symbol =
            renderer.classBreakInfos && renderer.classBreakInfos.length
                ? renderer.classBreakInfos[renderer.classBreakInfos.length - 1].symbol
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    }
    const defaultSymbol = renderer.defaultSymbol;
    const defaultLabel = renderer.defaultLabel;
    const backgroundFillSymbol = renderer.backgroundFillSymbol;
    const theme = options.theme ? options.theme : authSizeVisVar ? authSizeVisVar.theme : "high-to-low";
    let isInverted = false;
    if (sizeVisVar) {
        if (theme === sizeVisVar.theme) {
            // only if theme stays the same
            if (sizeVisVar.minSize.stops) {
                isInverted = sizeVisVar.minSize.stops[0].size > sizeVisVar.maxSize.stops[0].size;
            }
            else {
                isInverted = sizeVisVar.minSize > sizeVisVar.maxSize;
            }
        }
    }
    else {
        const minSym = renderer.classBreakInfos[0].symbol;
        const maxSym = renderer.classBreakInfos[renderer.classBreakInfos.length - 1].symbol;
        const lowValue = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(minSym);
        const highValue = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(maxSym);
        isInverted = lowValue > highValue;
    }
    if (options.fieldInfos &&
        options.fieldInfos[0] &&
        sizeVisVar &&
        options.fieldInfos[0].field === sizeVisVar.field &&
        options.fieldInfos[0].expression === sizeVisVar.valueExpression &&
        options.normalizationField === sizeVisVar.normalizationField) {
        delete options.fieldInfos;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options)) {
            // nothing really changes; remove color visVar if there is one
            const newRenderer = renderer.clone();
            newRenderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(renderer, "color");
            //console.log("createSizeRendererFromExisting out 1", newRenderer.toJSON());
            return Promise.resolve({ renderer: newRenderer });
        }
    }
    const fieldInfo = options.fieldInfos && options.fieldInfos[0]
        ? options.fieldInfos[0]
        : sizeVisVar
            ? {
                field: sizeVisVar.field,
                expression: sizeVisVar.valueExpression,
                expressionTitle: sizeVisVar.valueExpressionTitle,
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            }
            : {
                field: renderer.field,
                expression: renderer.valueExpression,
                expressionTitle: renderer.valueExpressionTitle,
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            };
    const normalizationField = options.normalizationField === null
        ? undefined
        : options.normalizationField
            ? options.normalizationField
            : sizeVisVar
                ? sizeVisVar.normalizationField
                : renderer.normalizationField;
    let needNewStatistics = false;
    if (options.normalizationField === null ||
        options.normalizationField ||
        (options.fieldInfos && options.fieldInfos[0]) ||
        (authInfo.classificationMethod === "manual" && !options.theme) ||
        authInfo.classificationMethod === "equal-interval") {
        needNewStatistics = true;
    }
    const minValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.min)
            ? options.min
            : needNewStatistics
                ? undefined
                : sizeVisVar
                    ? authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue
                    : renderer.classBreakInfos[0].minValue;
    const maxValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.max)
            ? options.max
            : needNewStatistics
                ? undefined
                : sizeVisVar
                    ? authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue
                    : renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue;
    const config = {
        layer,
        view: mapView,
        theme,
        field: fieldInfo.field,
        valueExpression: fieldInfo.expression,
        valueExpressionTitle: fieldInfo.expressionTitle,
        normalizationField,
        minValue,
        maxValue,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : !!extras.sizeOutlineVisVar,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : sizeVisVar
                ? (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.sizeOptimizationEnabled)
                    ? options.sizeOptimizationEnabled
                    : typeof sizeVisVar.minSize === "object"
                : true /* isPolygon(layer)
        ? true
        : false, */,
        legendOptions: ((_a = options.legendOptions) === null || _a === void 0 ? void 0 : _a.toJSON()) ||
            ((_b = sizeVisVar === null || sizeVisVar === void 0 ? void 0 : sizeVisVar.legendOptions) === null || _b === void 0 ? void 0 : _b.toJSON()) ||
            ((_c = renderer.legendOptions) === null || _c === void 0 ? void 0 : _c.toJSON()),
        defaultSymbolEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.defaultSymbolEnabled)
            ? options.defaultSymbolEnabled
            : !!renderer.defaultSymbol,
        forBinning: ((_d = layer.featureReduction) === null || _d === void 0 ? void 0 : _d.type) === "binning"
    };
    // console.log("createSizeRendererFromExisting-config", config);
    return modules.SizeCreator.createContinuousRenderer(config).then((result) => {
        var _a;
        // console.log("createSizeRendererFromExisting-success", result.renderer.toJSON());
        // reset data values if necessary
        if (options.discardMinMax) {
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
            const newSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            sizeVisVar.minDataValue = newSizeVisVar.minDataValue;
            sizeVisVar.maxDataValue = newSizeVisVar.maxDataValue;
        }
        // keep slider values
        if (!options.fieldInfos &&
            options.normalizationField === undefined &&
            sizeVisVar &&
            theme === (sizeVisVar === null || sizeVisVar === void 0 ? void 0 : sizeVisVar.theme)) {
            const newSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            newSizeVisVar.minDataValue = sizeVisVar.minDataValue;
            newSizeVisVar.maxDataValue = sizeVisVar.maxDataValue;
        }
        if ([
            "color-size",
            "color-age-size",
            "color-size-age",
            "type-size",
            "type-size-age",
            "relationship-size",
            "predominance-size"
        ].indexOf(rendererType) > -1) {
            // just switch out size variables
            renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(renderer, "size") || [];
            renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(renderer, "size", "outline") || [];
            renderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.o)(renderer, "size") || [];
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            renderer.visualVariables.push(sizeVisVar);
            const sizeAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(result.renderer, "size");
            renderer.authoringInfo.visualVariables.push(sizeAuthVisVar);
            const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size", "outline");
            if (sizeOutlineVisVar) {
                renderer.visualVariables.push(sizeOutlineVisVar);
            }
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.Q)(renderer);
            result.renderer = renderer.clone();
            return Promise.resolve(result);
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        if (symbol && ((_a = result.renderer.classBreakInfos) === null || _a === void 0 ? void 0 : _a.length)) {
            result.renderer.classBreakInfos[0].symbol = symbol;
        }
        if (defaultSymbol) {
            result.renderer.defaultSymbol = defaultSymbol;
            result.renderer.defaultLabel = defaultLabel;
        }
        if (backgroundFillSymbol) {
            result.renderer.backgroundFillSymbol = backgroundFillSymbol;
        }
        if (isInverted) {
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            const tmp = sizeVisVar.minSize;
            sizeVisVar.minSize = sizeVisVar.maxSize;
            sizeVisVar.maxSize = tmp;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Size renderer with settings from current renderer
 */
function createSizeAgeRendererFromExisting(options) {
    var _a, _b, _c;
    const { layer: smLayer, mapImageSublayer, mapView /* , supportsArcade */, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    /* if (mapImageSublayer && !supportsArcade) {
      return createClassedSizeRendererFromExisting(options);
    } */
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
    const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "size");
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    const startTime = options.startTime ? options.startTime : authSizeVisVar.startTime;
    const endTime = options.endTime ? options.endTime : authSizeVisVar.endTime;
    let symbol;
    if (["type-size-age"].indexOf(rendererType) > -1) {
        const uvRenderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        symbol =
            uvRenderer.uniqueValueInfos && uvRenderer.uniqueValueInfos.length
                ? uvRenderer.uniqueValueInfos[0].symbol
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    }
    else {
        symbol =
            renderer.classBreakInfos && renderer.classBreakInfos.length
                ? renderer.classBreakInfos[0].symbol
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    }
    const defaultSymbol = renderer.defaultSymbol;
    const defaultLabel = renderer.defaultLabel;
    const backgroundFillSymbol = renderer.backgroundFillSymbol;
    let isInverted = false;
    if (sizeVisVar) {
        if (sizeVisVar.minSize.stops) {
            isInverted = sizeVisVar.minSize.stops[0].size > sizeVisVar.maxSize.stops[0].size;
        }
        else {
            isInverted = sizeVisVar.minSize > sizeVisVar.maxSize;
        }
        if (authSizeVisVar.theme === "below") {
            // we want it different for below
            isInverted = !isInverted;
        }
    }
    else {
        const minSym = renderer.classBreakInfos[0].symbol;
        const maxSym = renderer.classBreakInfos[renderer.classBreakInfos.length - 1].symbol;
        const lowValue = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(minSym);
        const highValue = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(maxSym);
        isInverted = lowValue > highValue;
    }
    if (options.fieldInfos && options.fieldInfos[0] && sizeVisVar && options.fieldInfos[0].field === sizeVisVar.field) {
        delete options.fieldInfos;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options)) {
            // nothing really changes; remove color visVar if there is one
            const newRenderer = renderer.clone();
            newRenderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(renderer, "color");
            //console.log("createSizeRendererFromExisting out 1", newRenderer.toJSON());
            return Promise.resolve({ renderer: newRenderer });
        }
    }
    let rangeChanged = false;
    if (options.startTime || options.endTime || options.units || options.fieldInfo || options.theme) {
        rangeChanged = true;
    }
    const minValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.min)
            ? options.min
            : rangeChanged
                ? undefined
                : authSizeVisVar
                    ? authSizeVisVar.minSliderValue
                    : renderer.classBreakInfos[0].minValue;
    const maxValue = options.discardMinMax
        ? undefined
        : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.max)
            ? options.max
            : rangeChanged
                ? undefined
                : authSizeVisVar
                    ? authSizeVisVar.maxSliderValue
                    : renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue;
    const theme = options.theme ? options.theme : authSizeVisVar ? authSizeVisVar.theme : "high-to-low";
    const config = {
        layer,
        view: mapView,
        theme,
        startTime,
        endTime,
        unit: options.units ? options.units : authSizeVisVar.units,
        minValue,
        maxValue,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : !!extras.sizeOutlineVisVar,
        sizeOptimizationEnabled: mapImageSublayer
            ? false
            : sizeVisVar
                ? (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.sizeOptimizationEnabled)
                    ? options.sizeOptimizationEnabled
                    : typeof sizeVisVar.minSize === "object"
                : true /* isPolygonType(layer)
        ? true
        : false, */,
        legendOptions: ((_a = options.legendOptions) === null || _a === void 0 ? void 0 : _a.toJSON()) ||
            ((_b = sizeVisVar === null || sizeVisVar === void 0 ? void 0 : sizeVisVar.legendOptions) === null || _b === void 0 ? void 0 : _b.toJSON()) ||
            ((_c = renderer.legendOptions) === null || _c === void 0 ? void 0 : _c.toJSON()),
        defaultSymbolEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.defaultSymbolEnabled)
            ? options.defaultSymbolEnabled
            : !!renderer.defaultSymbol
    };
    //console.log(config);
    return modules.SizeCreator.createAgeRenderer(config).then((result) => {
        var _a;
        // console.log("createAgeRendererFromExisting", result.renderer.toJSON());
        // reset data values if necessary
        if (options.discardMinMax) {
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
            const newSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            sizeVisVar.minDataValue = newSizeVisVar.minDataValue;
            sizeVisVar.maxDataValue = newSizeVisVar.maxDataValue;
        }
        // keep field the same as before
        const newAuthSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(result.renderer, "size");
        newAuthSizeVisVar.field = authSizeVisVar.field;
        // keep slider values
        if (!rangeChanged) {
            const newSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            newSizeVisVar.minDataValue = sizeVisVar.minDataValue;
            newSizeVisVar.maxDataValue = sizeVisVar.maxDataValue;
        }
        if (["color-size-age"].indexOf(rendererType) > -1) {
            // just switch out size variables
            renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(renderer, "size") || [];
            renderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(renderer, "size", "outline") || [];
            renderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.o)(renderer, "size") || [];
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            renderer.visualVariables.push(sizeVisVar);
            const sizeAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(result.renderer, "size");
            renderer.authoringInfo.visualVariables.push(sizeAuthVisVar);
            const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size", "outline");
            if (sizeOutlineVisVar) {
                renderer.visualVariables.push(sizeOutlineVisVar);
            }
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.Q)(renderer);
            result.renderer = renderer.clone();
            return Promise.resolve(result);
        }
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        if (symbol && ((_a = result.renderer.classBreakInfos) === null || _a === void 0 ? void 0 : _a.length)) {
            result.renderer.classBreakInfos[0].symbol = symbol;
        }
        if (defaultSymbol) {
            result.renderer.defaultSymbol = defaultSymbol;
            result.renderer.defaultLabel = defaultLabel;
        }
        if (backgroundFillSymbol) {
            result.renderer.backgroundFillSymbol = backgroundFillSymbol;
        }
        if (isInverted) {
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            const tmp = sizeVisVar.minSize;
            sizeVisVar.minSize = sizeVisVar.maxSize;
            sizeVisVar.maxSize = tmp;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Size renderer with settings from current renderer
 */
function createClassedSizeRendererFromExisting(options) {
    var _a;
    const { layer: smLayer, mapImageSublayer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const layer = smLayer;
    options = options || {};
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const authInfo = renderer.authoringInfo;
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
    const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "size");
    const extras = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.m)(renderer);
    const rendererFieldInfo = {
        field: renderer.field,
        expression: renderer.valueExpression,
        expressionTitle: renderer.valueExpressionTitle,
        simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
    };
    let fieldInfo = options.fieldInfos
        ? options.fieldInfos[0]
        : sizeVisVar
            ? {
                field: sizeVisVar.field,
                expression: sizeVisVar.valueExpression,
                expressionTitle: sizeVisVar.valueExpressionTitle,
                simpleFieldType: _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.w.NUMBER
            }
            : rendererFieldInfo;
    // options.normalizationField = null means don't set the value
    const normalizationField = options.normalizationField !== undefined
        ? options.normalizationField
        : sizeVisVar
            ? sizeVisVar.normalizationField
            : renderer.normalizationField;
    let symbol;
    if (["type-size"].indexOf(rendererType) > -1) {
        const uvRenderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
        symbol =
            uvRenderer.uniqueValueInfos && uvRenderer.uniqueValueInfos.length
                ? uvRenderer.uniqueValueInfos[0].symbol
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    }
    else {
        symbol =
            renderer.classBreakInfos && renderer.classBreakInfos.length
                ? renderer.classBreakInfos[0].symbol
                : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, rendererType);
    }
    const defaultSymbol = renderer.defaultSymbol;
    const defaultLabel = renderer.defaultLabel;
    const backgroundFillSymbol = renderer.backgroundFillSymbol;
    let isInverted = false;
    if (renderer.classBreakInfos.length > 1) {
        const firstSym = renderer.classBreakInfos[0].symbol;
        const secondSym = renderer.classBreakInfos[1].symbol;
        const firstSize = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(firstSym) || 0;
        const secondSize = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(secondSym) || 0;
        isInverted = firstSize > secondSize;
    }
    if (!sizeVisVar &&
        authInfo &&
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.x)(fieldInfo, rendererFieldInfo) &&
        normalizationField === renderer.normalizationField) {
        // no changes to fields
        delete options.fieldInfos;
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.R)(options)) {
            // nothing really changes; remove color visVar if there is one
            const newRender = renderer.clone();
            newRender.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(renderer, "color");
            return Promise.resolve({ renderer: newRender });
        }
    }
    const classificationMethod = options.classificationMethod
        ? options.classificationMethod
        : (authInfo === null || authInfo === void 0 ? void 0 : authInfo.classificationMethod) && authInfo.classificationMethod !== "manual"
            ? authInfo.classificationMethod
            : "equal-interval";
    const standardDeviationInterval = classificationMethod === "standard-deviation"
        ? options.standardDeviationInterval
            ? options.standardDeviationInterval
            : authInfo.standardDeviationInterval
                ? authInfo.standardDeviationInterval
                : 1
        : undefined;
    let keepNumClasses = true;
    if (options.classificationMethod &&
        options.classificationMethod !== (authInfo === null || authInfo === void 0 ? void 0 : authInfo.classificationMethod) &&
        (options.classificationMethod === "standard-deviation" || (authInfo === null || authInfo === void 0 ? void 0 : authInfo.classificationMethod) === "standard-deviation")) {
        keepNumClasses = false;
    }
    let needNewStatistics = false;
    if (options.normalizationField !== undefined ||
        !(0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.x)(fieldInfo, rendererFieldInfo) ||
        classificationMethod !== "equal-interval" ||
        (
        // is it currently a continuous size renderer?, then start with full data range
        authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.minSliderValue) ||
        (authSizeVisVar === null || authSizeVisVar === void 0 ? void 0 : authSizeVisVar.maxSliderValue)) {
        needNewStatistics = true;
    }
    const minValue = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.min)
        ? options.min
        : needNewStatistics
            ? undefined
            : authSizeVisVar
                ? authSizeVisVar.minSliderValue
                : renderer.classBreakInfos[0].minValue;
    const maxValue = (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.max)
        ? options.max
        : needNewStatistics
            ? undefined
            : authSizeVisVar
                ? authSizeVisVar.maxSliderValue
                : renderer.classBreakInfos[renderer.classBreakInfos.length - 1].maxValue;
    return modules.SizeCreator.createClassBreaksRenderer({
        layer,
        view: mapView,
        //theme: options.theme ? options.theme : authSizeVisVar.theme,
        field: fieldInfo.field,
        valueExpression: fieldInfo.expression,
        valueExpressionTitle: fieldInfo.expressionTitle,
        normalizationField,
        classificationMethod,
        standardDeviationInterval,
        numClasses: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.numClasses)
            ? options.numClasses
            : sizeVisVar || !keepNumClasses
                ? 4
                : renderer.classBreakInfos.length,
        minValue,
        maxValue,
        outlineOptimizationEnabled: mapImageSublayer
            ? false
            : (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.outlineOptimizationEnabled)
                ? options.outlineOptimizationEnabled
                : !!extras.sizeOutlineVisVar,
        legendOptions: options.legendOptions || renderer.legendOptions,
        defaultSymbolEnabled: (0,_commonFunctions_b0830e9e_js__WEBPACK_IMPORTED_MODULE_4__.i)(options.defaultSymbolEnabled)
            ? options.defaultSymbolEnabled
            : !!renderer.defaultSymbol,
        forBinning: ((_a = layer.featureReduction) === null || _a === void 0 ? void 0 : _a.type) === "binning"
    }).then((result) => {
        //console.log("createClassBreaksRenderer", result.renderer.toJSON());
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.l)(extras, result.renderer);
        if (symbol && result.renderer.classBreakInfos) {
            result.renderer.classBreakInfos.map((classBreakInfo) => {
                const sym = symbol.clone();
                (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(sym, (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(classBreakInfo.symbol));
                classBreakInfo.symbol = sym;
            });
        }
        if (defaultSymbol) {
            result.renderer.defaultSymbol = defaultSymbol;
            result.renderer.defaultLabel = defaultLabel;
        }
        if (backgroundFillSymbol) {
            result.renderer.backgroundFillSymbol = backgroundFillSymbol;
        }
        if (isInverted) {
            const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(result.renderer, "size");
            const tmp = sizeVisVar.minSize;
            sizeVisVar.minSize = sizeVisVar.maxSize;
            sizeVisVar.maxSize = tmp;
        }
        return Promise.resolve(result);
    }, (error) => Promise.reject(error));
}
function sameSizeField(options) {
    var _a;
    // not checking for normalizationField
    // we keep it if the renderer has it and it does not get overwritten
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).clone();
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    if ([
        "size",
        "size-age",
        "color-size",
        "color-size-age",
        "color-age-size",
        "type-size",
        "type-size-age",
        "relationship-size"
    ].indexOf(rendererType) > -1 &&
        options.normalizationField === undefined) {
        let renderFieldInfo;
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
        if (sizeVisVar) {
            // continuous
            if (["size-age", "color-size-age", "type-size-age"].indexOf(rendererType) > -1) {
                const authSizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "size");
                renderFieldInfo = {
                    field: authSizeVisVar.field
                };
            }
            else {
                renderFieldInfo = {
                    field: sizeVisVar.field,
                    expression: sizeVisVar.valueExpression,
                    expressionTitle: sizeVisVar.valueExpressionTitle
                };
            }
        }
        else {
            // classed
            renderFieldInfo = {
                field: renderer.field,
                expression: renderer.valueExpression,
                expressionTitle: renderer.valueExpressionTitle
            };
        }
        if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.x)((_a = options.fieldInfos) === null || _a === void 0 ? void 0 : _a[0], renderFieldInfo)) {
            return true;
        }
    }
    return false;
}
function getSizeSliderStops() {
    const { layer, mapView, modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(renderer, "size");
    const scale = mapView.scale;
    const { minSize, maxSize, minDataValue, maxDataValue } = sizeVisVar;
    let stops;
    if (sizeVisVar.stops) {
        stops = modules.esriLang.clone(sizeVisVar.stops);
    }
    else {
        let min, max;
        if (typeof minSize === "number") {
            min = minSize;
            max = maxSize;
        }
        else {
            const lastIdx = minSize.stops.length - 1;
            if (scale > minSize.stops[lastIdx].value) {
                min = minSize.stops[lastIdx].size;
                max = maxSize.stops[lastIdx].size;
            }
            else {
                minSize.stops.forEach((stop, idx) => {
                    if (scale <= stop.value) {
                        min = stop.size;
                        max = maxSize.stops[idx].size;
                    }
                });
            }
        }
        stops = [
            new modules.SizeStop({ value: minDataValue, size: min }),
            new modules.SizeStop({ value: maxDataValue, size: max })
        ];
    }
    return stops;
}
function getClassBreaksSizes() {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    return renderer.classBreakInfos.map((classBreakInfo) => {
        const sym = classBreakInfo.symbol;
        return {
            min: classBreakInfo.minValue,
            max: classBreakInfo.maxValue,
            size: (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.T)(sym)
        };
    });
}

/**
 * Updates the layer with a Color+size renderer with default settings
 * @param options: options
 */
function createColorSizeRenderer(options) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    options = options || {};
    // first size renderer, so we have the correct symbol types
    const secondField = options.fieldInfos.length > 1 ? options.fieldInfos[1] : options.fieldInfos[0];
    if (sameSizeField({ fieldInfos: [secondField] }) &&
        ["color-size", "color-age-size", "type-size"].indexOf(rendererType) > -1 &&
        authInfo &&
        (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) !== "above-and-below") {
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "size");
        if (sizeVisVar) {
            // re-use size renderer
            return createColorPartForRenderer((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), options).then((rendererResult) => {
                return Promise.resolve(rendererResult);
            }, (error) => Promise.reject(error));
        } // else classed
    }
    return createSizeRenderer(Object.assign(Object.assign({}, options), { fieldInfos: [secondField] })).then((sizeRendererResult) => {
        return createColorPartForRenderer(sizeRendererResult.renderer, options).then((rendererResult) => {
            return Promise.resolve(rendererResult);
        }, (error) => Promise.reject(error));
    }, (error) => Promise.reject(error));
}
/**
 * Updates the layer with a Color+size renderer with default settings
 * @param options: options
 */
function createColorAgeSizeRenderer(options) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    options = options || {};
    // first size renderer, so we have the correct symbol types
    const secondField = options.fieldInfos.length > 1 ? options.fieldInfos[1] : options.fieldInfos[0];
    if (sameSizeField({ fieldInfos: [secondField] }) &&
        ["color-size", "color-age-size", "type-size"].indexOf(rendererType) > -1 &&
        authInfo &&
        (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) !== "above-and-below") {
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "size");
        if (sizeVisVar) {
            // re-use size renderer
            return createColorAgePartForRenderer((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), options).then((rendererResult) => {
                return Promise.resolve(rendererResult);
            }, (error) => Promise.reject(error));
        } // else classed
    }
    return createSizeRenderer(Object.assign(Object.assign({}, options), { fieldInfos: [secondField] })).then((sizeRendererResult) => {
        return createColorAgePartForRenderer(sizeRendererResult.renderer, options).then((rendererResult) => {
            return Promise.resolve(rendererResult);
        }, (error) => Promise.reject(error));
    }, (error) => Promise.reject(error));
}
/**
 * Updates the layer with a Color+size renderer with default settings
 * @param options: options
 */
function createColorSizeAgeRenderer(options) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    options = options || {};
    // first size renderer, so we have the correct symbol types
    const secondField = options.fieldInfos.length > 1 ? options.fieldInfos[1] : options.fieldInfos[0];
    if (sameSizeField({ fieldInfos: [secondField] }) &&
        ["color-size-age", "type-size-age"].indexOf(rendererType) > -1 &&
        authInfo &&
        (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) !== "above-and-below") {
        const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), "size");
        if (sizeVisVar) {
            // re-use size renderer
            return createColorPartForRenderer((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer), options).then((rendererResult) => {
                return Promise.resolve(rendererResult);
            }, (error) => Promise.reject(error));
        } // else classed
    }
    return createSizeAgeRenderer(Object.assign(Object.assign({}, options), { fieldInfos: [secondField] })).then((sizeRendererResult) => {
        return createColorPartForRenderer(sizeRendererResult.renderer, options).then((rendererResult) => {
            return Promise.resolve(rendererResult);
        }, (error) => Promise.reject(error));
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Color&Size renderer with settings from current renderer
 */
function createColorSizeRendererFromExisting(options, rendererSubtype) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    options = options || {};
    // first size renderer, so we have the correct symbol types
    return createSizeRendererFromExisting(Object.assign(Object.assign({}, options), { fieldInfos: options.fieldInfos
            ? options.fieldInfos.length > 1
                ? [options.fieldInfos[1]]
                : [options.fieldInfos[0]]
            : null })).then((sizeRendererResult) => {
        return (0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_3__.b)(Object.assign(Object.assign({}, options), { fieldInfos: options.fieldInfos ? [options.fieldInfos[0]] : null })).then((colorRendererResult) => {
            copySizeToColorRenderer(colorRendererResult.renderer, sizeRendererResult.renderer);
            colorRendererResult.backgroundFillSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).backgroundFillSymbol;
            // handle situations where renderer recreation occurs from the size panel. Slider statistics must correspond to the size variable.
            if (rendererSubtype === "size") {
                colorRendererResult.statistics = sizeRendererResult.statistics;
            }
            return Promise.resolve(colorRendererResult);
        }, (error) => Promise.reject(error));
    }, (error) => Promise.reject(error));
}
/**
 * Creates a ColorAge&Size renderer with settings from current renderer
 */
function createColorAgeSizeRendererFromExisting(options, rendererSubtype) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    options = options || {};
    // first size renderer, so we have the correct symbol types
    return createSizeRendererFromExisting(Object.assign(Object.assign({}, options), { fieldInfos: options.fieldInfos
            ? options.fieldInfos.length > 1
                ? [options.fieldInfos[1]]
                : [options.fieldInfos[0]]
            : null })).then((sizeRendererResult) => {
        return (0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_3__.d)(Object.assign(Object.assign({}, options), { fieldInfos: options.fieldInfos ? [options.fieldInfos[0]] : null })).then((colorRendererResult) => {
            copySizeToColorRenderer(colorRendererResult.renderer, sizeRendererResult.renderer);
            colorRendererResult.backgroundFillSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).backgroundFillSymbol;
            // handle situations where renderer recreation occurs from the size panel. Slider statistics must correspond to the size variable.
            if (rendererSubtype === "size") {
                colorRendererResult.statistics = sizeRendererResult.statistics;
            }
            return Promise.resolve(colorRendererResult);
        }, (error) => Promise.reject(error));
    }, (error) => Promise.reject(error));
}
/**
 * Creates a Color&SizeAge renderer with settings from current renderer
 */
function createColorSizeAgeRendererFromExisting(options, rendererSubtype) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    options = options || {};
    // first size renderer, so we have the correct symbol types
    return createSizeAgeRendererFromExisting(Object.assign(Object.assign({}, options), { fieldInfos: options.fieldInfos
            ? options.fieldInfos.length > 1
                ? [options.fieldInfos[1]]
                : [options.fieldInfos[0]]
            : null })).then((sizeRendererResult) => {
        return (0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_3__.b)(Object.assign(Object.assign({}, options), { fieldInfos: options.fieldInfos ? [options.fieldInfos[0]] : null })).then((colorRendererResult) => {
            copySizeToColorRenderer(colorRendererResult.renderer, sizeRendererResult.renderer);
            colorRendererResult.backgroundFillSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).backgroundFillSymbol;
            // handle situations where renderer recreation occurs from the size panel. Slider statistics must correspond to the size variable.
            if (rendererSubtype === "size") {
                colorRendererResult.statistics = sizeRendererResult.statistics;
            }
            return Promise.resolve(colorRendererResult);
        }, (error) => Promise.reject(error));
    }, (error) => Promise.reject(error));
}
function createColorPartForRenderer(sizeRenderer, options) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    const authColorVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(renderer, "color");
    if ((0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_3__.s)(options) &&
        ["color", "color-size", "color-size-age"].indexOf(rendererType) > -1 &&
        authInfo &&
        (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) !== "above-and-below" &&
        ["centered-on", "extremes"].indexOf(authColorVisVar.theme) === -1) {
        // re-use color renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).clone();
        copySizeToColorRenderer(renderer, sizeRenderer);
        if (options.fieldInfos.length === 2) {
            // in case we're coming from an univariate Color+Size renderer
            const authInfo = renderer.authoringInfo;
            authInfo.type = null;
            authInfo.univariateTheme = null;
            authInfo.univariateSymbolStyle = null;
        }
        return Promise.resolve({ renderer });
    }
    return (0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_3__.c)(Object.assign(Object.assign({}, options), { fieldInfos: [options.fieldInfos[0]] })).then((colorRendererResult) => {
        copySizeToColorRenderer(colorRendererResult.renderer, sizeRenderer);
        return Promise.resolve(colorRendererResult);
    }, (error) => Promise.reject(error));
}
function createColorAgePartForRenderer(sizeRenderer, options) {
    const { layer } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer);
    const authInfo = renderer.authoringInfo;
    const rendererType = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.g)();
    if ((0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_3__.s)(options) &&
        ["color-age", "color-age-size"].indexOf(rendererType) > -1 &&
        authInfo &&
        (authInfo === null || authInfo === void 0 ? void 0 : authInfo.univariateTheme) !== "above-and-below") {
        // we can re-use the color renderer
        const renderer = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.h)(layer).clone();
        copySizeToColorRenderer(renderer, sizeRenderer);
        return Promise.resolve({ renderer });
    }
    return (0,_color_d6da0a9a_js__WEBPACK_IMPORTED_MODULE_3__.a)(Object.assign(Object.assign({}, options), { fieldInfos: [options.fieldInfos[0]] })).then((colorRendererResult) => {
        copySizeToColorRenderer(colorRendererResult.renderer, sizeRenderer);
        return Promise.resolve(colorRendererResult);
    }, (error) => Promise.reject(error));
}
function copySizeToColorRenderer(colorRenderer, sizeRenderer) {
    var _a;
    const { layer, mapView } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    if (!colorRenderer.authoringInfo) {
        // don't keep anything
        return;
    }
    colorRenderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(colorRenderer, "size") || [];
    colorRenderer.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.n)(colorRenderer, "size", "auto") || [];
    const sizeVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(sizeRenderer, "size");
    colorRenderer.visualVariables.push(sizeVisVar);
    colorRenderer.authoringInfo.visualVariables = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.o)(colorRenderer, "size") || [];
    const sizeAuthVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.p)(sizeRenderer, "size");
    colorRenderer.authoringInfo.visualVariables.push(sizeAuthVisVar);
    const infos = ((_a = sizeRenderer.classBreakInfos) === null || _a === void 0 ? void 0 : _a.length) ? sizeRenderer.classBreakInfos : sizeRenderer.uniqueValueInfos;
    let markerSymbol = (infos === null || infos === void 0 ? void 0 : infos.length) ? infos[0].symbol : (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, "color-size");
    if (markerSymbol.type === "picture-marker") {
        markerSymbol = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.S)(layer, mapView, "color-size");
    }
    if ((0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.q)(layer)) {
        colorRenderer.classBreakInfos.map((valueInfo) => {
            const color = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.t)(valueInfo.symbol);
            valueInfo.symbol = markerSymbol.clone();
            (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(valueInfo.symbol, color);
        });
        colorRenderer.backgroundFillSymbol = sizeRenderer.backgroundFillSymbol;
        const sizeOutlineVisVar = (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.a)(sizeRenderer, "size", "outline");
        if (sizeOutlineVisVar) {
            colorRenderer.visualVariables.push(sizeOutlineVisVar);
        }
    }
    updateMainSymbol(markerSymbol);
}
function updateMainSymbol(symbol) {
    // this symbol shows up if one of the fields is null
    const { modules } = _raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.s;
    if (symbol.type === "simple-line") {
        symbol.color = [0, 0, 0, 0.5];
        symbol.width = 1;
    }
    else if (symbol.type === "cim") {
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.r)(symbol, new modules.esriColor([0, 0, 0, 0.5]));
        //const outline = getCimPointOutline(symbol);
        //outline.color = [0, 0, 0, 0.5];
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, 4);
    }
    else {
        // simple-marker
        symbol.color = null;
        symbol.outline.color = [0, 0, 0, 0.5];
        (0,_raster_unique_value_0976ec7f_js__WEBPACK_IMPORTED_MODULE_0__.U)(symbol, 4);
    }
}



//# sourceMappingURL=colorSize-ce0ccdeb.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,