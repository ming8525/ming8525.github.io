"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-9f2c5e"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.en-c610c1cd.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.en-c610c1cd.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "OK";
const cancel = "Cancel";
const enterURL = "Enter Image Service URL";
const serviceURL = "Service URL";
const selectRaster = "Select Raster";
const failedToLoadLayer = "Failed to load Layer";
const loadingLayer = "Loading layer";
const selectFeature = "Select Feature Layer";
const enterFURL = "Enter Feature Service URL";
const addRaster = "Add Raster Variable";
const addScalar = "Add Constant";
const raster = "Raster";
const scalar = "Scalar";
const defaultModelName = "Raster Function Template";
const general = "General";
const parameters = "Parameters";
const variables = "Variables";
const name = "Name";
const description = "Description";
const parameter = "Parameter";
const isPublic = "IsPublic";
const isDataset = "IsDataset";
const unknownPixelType = "Unknown";
const outputPixelType = "Output Pixel Type";
const u8PixelType = "8 Bit Unsigned";
const s8PixelType = "8 Bit Signed";
const u16PixelType = "16 Bit Unsigned";
const s16PixelType = "16 Bit Signed";
const u32PixelType = "32 Bit Unsigned";
const s32PixelType = "32 Bit Signed";
const f32PixelType = "32 Bit Float";
const f64PixelType = "64 Bit Double";
const properties = "Properties";
const multidimensionalRules = "Multidimensional Rules";
const matchVariables = "Match Variables";
const unionDimensions = "Union Dimensions";
const rasterFunctionEditor = {
	invalidRFTMessage: "The Raster Function Template is not valid.",
	rfxArgsEditor: {
		outputRaster: "OutputRaster",
		raster: "Raster",
		unsupportedDataTypeWarning: "The following arguments are not displayed as they are not currently supported.",
		unsupportedFunction: "Contains currently unsupported raster function(s)."
	},
	rfxRasterInput: {
		selectLayer: "Select Layer",
		browseLayers: "Browse Layers",
		rfxVariable: "RasterFunctionVariable"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Method",
		bandLabel: "Band",
		combinationLabel: "Combination"
	},
	rfxRemapGrid: {
		minimum: "Minimum",
		maximum: "Maximum",
		output: "Output",
		noData: "NoData",
		remapValuesLabel: "Remap Values"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Raster Variables",
		deleteSelectedVars: "Remove selected variables"
	},
	rfxClippingGeometry: {
		clippingLayer: "Clipping Layer",
		clippingRaster: "Clipping Raster",
		clippingGeometry: "Clipping Geometry",
		customExtent: "Custom Extent",
		outputExtent: "Output Extent",
		currentExtent: "Current Map Extent",
		drawLabel: "Draw"
	},
	rfxCustomExtent: {
		top: "Top",
		right: "Right",
		bottom: "Bottom",
		left: "Left"
	},
	rfxRasterArrayEditor: {
		moveUp: "Move up",
		moveDown: "Move down",
		remove: "Remove"
	},
	rfxStatisticsGrid: {
		stdDev: "Std. Dev",
		min: "Min",
		max: "Max",
		mean: "Mean"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Weighted Sum Table",
		id: "ID",
		layer: "Layer",
		field: "Field",
		weight: "Weight",
		value: "Value",
		selectLayer: "Select Layer"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Weighted Overlay Table",
		id: "ID",
		layer: "Layer",
		field: "Field",
		influence: "Influence",
		sumOfInfluence: "Sum of Influence",
		value: "Value",
		remapTable: "Remap Table",
		scale: "Scale",
		scales: "Scales",
		selectRaster: "Select Raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Browse for a feature layer",
		addPointLayer: "Browse for a point layer"
	},
	rfxFieldSelect: {
		value: "Value",
		count: "Count"
	},
	rfxAttributeTable: {
		tableType: "Table Type",
		manual: "Manual",
		external: "External",
		minVal: "Minimum Value",
		maxVal: "Maximum Value",
		baseClassName: "Class Base Name",
		colorScheme: "Color Scheme",
		defaultClassName: "Label_",
		generateTable: "Generate Table",
		browseTable: "Browse Table",
		value: "Value",
		classname: "ClassName",
		color: "Color"
	},
	rfxFieldNumberSwitchable: {
		number: "Numeric",
		field: "Field",
		string: "String",
		linearUnit: "Linear Unit"
	},
	rfxPropertySet: {
		name: "Name",
		value: "Value"
	},
	rfxConversionGrid: {
		size: "Size"
	},
	rfxTransposeBit: {
		bitPattern: "Bit Pattern",
		outputBit: "Output Bit",
		inputBit: "Input Bit"
	},
	rfxSpatialReference: {
		placeHolder: "Refine by Keyword",
		coordinateSystem: "Coordinate System",
		gcs: "Geographic Coordinate System",
		pcs: "Projected Coordinate System",
		vcs: "Vertical Coordinate System"
	}
};
const rfxLicenseInfo = "This raster function template may be used to process your imagery using ArcGIS Image Server.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Calculates the inverse hyperbolic cosine of cells in a raster.",
		aCosHDesc: "The function calculates the inverse hyperbolic cosine of the pixels in a raster.",
		aCosName: "ACos",
		aCosSnip: "Calculates the inverse cosine of the pixels in a raster.",
		aCosDesc: "This raster function calculates the inverse cosine of cells in a raster. In mathematics, all trigonometric functions have a defined range of valid input values, called the domain. The output values from each function also have a defined range. For this tool, the domain is [-1, 1], and range is [0, pi].",
		aSinHName: "ASinH",
		aSinHSnip: "Calculates the inverse hyperbolic sine of cells in a raster.",
		aSinHDesc: "The function calculates the inverse hyperbolic sine of the pixels in a raster.",
		aSinName: "ASin",
		aSinSnip: "Calculates the inverse sine of cells in a raster.",
		aSinDesc: "The function calculates the inverse sine of the pixels in a raster.",
		aTan2Name: "ATan2",
		aTan2Snip: "Calculates the inverse tangent (based on x,y) of cells in a raster.",
		aTan2Desc: "The function calculates the inverse tangent (based on x,y) of the pixels in a raster.",
		aTanHName: "ATanH",
		aTanHSnip: "Calculates the inverse hyperbolic tangent of cells in a raster.",
		aTanHDesc: "The function calculates the inverse hyperbolic tangent of the pixels in a raster.",
		aTanName: "ATan",
		aTanSnip: "Calculates the inverse tangent of cells in a raster.",
		aTanDesc: "The function calculates the inverse tangent of the pixels in a raster.",
		absName: "Abs",
		absSnip: "Calculates the absolute value of the cells in a raster.",
		absDesc: "The Abs function calculates the absolute value of the pixels in a raster.",
		reflectanceName: "Apparent Reflectance",
		reflectanceSnip: "Converts raw imagery into Top of Atmosphere values by taking into account sensor characteristics, the position of the sun, and the acquisition time.",
		reflectanceDesc: "This function adjusts image brightness digital number (DN) values for some satellite sensors. The adjustments are based on sun elevation, acquisition date, and sensor properties to set the gain and bias for each band. This function is used to adjust reflectance, or brightness, values of some satellite imagery based on the scene illumination and sensor-gain settings. The images are adjusted to a theoretically common illumination condition, so there should be less variation between scenes from different dates and different sensors. This can be useful for image classification, color balancing, and mosaicking. This function can only be used with specific imagery. The applicable sensors are Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6, and Pleiades.<div><br/>The function performs two corrections. The first is based on the gain settings. The original brightness values are re-created from the image values by reversing the gain equations. The second correction has to do with differences in sun angle and brightness. The original brightness values are adjusted to a common lighting condition by normalizing scenes captured under variable illumination conditions. In general, while the output image data type is the same as the input image data type, the output values are lower than the input values and are clipped to the valid data range.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Computes arg statistics including Arg Max, Arg Min, Arg Median, and Duration.",
		argStatisticsDesc: "The function computes arg statistics. There are four methods in the ArgStatistics function: ArgMax, ArgMin, ArgMedian, and Duration.",
		arithmeticName: "Arithmetic",
		arithmeticSnip: "Performs an arithmetic operation between two rasters or a raster and a scalar.",
		arithmeticDesc: "The Arithmetic function performs an arithmetic operation between two rasters or a raster and a scalar and vice versa.",
		aspectSlopeName: "Aspect-Slope",
		aspectSlopeSnip: "Creates a raster that simultaneously displays the aspect (direction) and slope (steepness) of a continuous surface, as represented in a digital elevation model.",
		aspectSlopeDesc: "The Aspect Slope function creates a raster layer that simultaneously displays the aspect and slope of a surface. Aspect identifies the downslope direction of the maximum rate of change in value from each pixel to its neighbors. Aspect can be thought of as the slope direction. The values of the output raster will be the compass direction of the aspect, represented by a hue (color). Slope represents the rate of change of elevation for each digital elevation model (DEM) pixel. Slope represents the steepness of the surface and is symbolized into three classes that are shown using color saturation (brightness).<div><br/>The pixel values in the output aspect-slope raster reflect a combination of aspect and slope. Pixels with values below 20 are considered flat and are shown in gray. Aspect-slope values of 21 and above will be displayed with varying saturations as follows: 21 to 30 —Low slope saturation, 31 to 40—Moderate slope saturation, 41 and above—High slope saturation</div>",
		aspectName: "Aspect",
		aspectSnip: "Shows which direction a pixel is facing, where 0 is due north and angles increase clockwise to 360.",
		aspectDesc: "The Aspect function identifies the downslope direction of the maximum rate of change in value from each cell to its neighbors. Aspect can be thought of as the slope direction. The values of the output raster will be the compass direction of the aspect.<div><br/>The input for this function is Input Raster. The Aspect function is often applied to a digital elevation model (DEM). By default, the aspect appears as a grayscale image. You can add the Colormap function to specify a particular color scheme or allow the person viewing the mosaic to modify the symbology with their own color scheme.</div>",
		tableName: "Attribute Table",
		tableSnip: "Uses a table to name and symbolize the values in a dataset. Columns for the table are comma delimited: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "The Attribute Table function allows you to define an attribute table to symbolize a single-band mosaic dataset or raster dataset. <div><br/>This is useful when you want to present imagery that has undergone a classification to land use, such as forest land, wetlands, crop land, and urban. Additionally, if your table contains fields named red, green, and blue, values within those fields will be used like a color map when rendering the image.</div>",
		bandArithmeticName: "Band Arithmetic",
		bandArithmeticSnip: "Calculates indexes using predefined formulas or a user-defined expression.",
		bandArithmeticDesc: "The Band Arithmetic function performs an arithmetic operation on the bands of a raster dataset. You can choose predefined algorithms or you can enter your own single-line formula. The operators supported are -,+,/,*, and unary -.",
		thresholdName: "Binary Thresholding",
		thresholdSnip: "Organizes continuous data into foreground and background by minimizing the covariance between the two classes.",
		thresholdDesc: "When a raster dataset has a bimodal distribution, this function creates a new raster that divides the data into two distinct classes. It creates a low value class displayed with black pixels, and a high value class displayed with white pixels.",
		bitwiseAndName: "Bitwise And",
		bitwiseAndSnip: "Performs a Bitwise And operation on the binary values of two input rasters.",
		bitwiseAndDesc: "Bitwise And performs a Bitwise And operation on the binary values of two input rasters",
		bitwiseLeftShiftName: "Bitwise Left Shift",
		bitwiseLeftShiftSnip: "Performs a Bitwise Left Shift operation on the binary values of two input rasters.",
		bitwiseLeftShiftDesc: "Bitwise Left Shift performs a Bitwise Left Shift operation on the binary values of two input rasters",
		bitwiseNotName: "Bitwise Not",
		bitwiseNotSnip: "Performs a Bitwise Not (complement) operation on the binary values of two input rasters.",
		bitwiseNotDesc: "The function peforms a Bitwise Not (complement) operation on the binary value of an input raster.",
		bitwiseOrName: "Bitwise Or",
		bitwiseOrSnip: "Performs a Bitwise Or operation on the binary values of two input rasters.",
		bitwiseOrDesc: "The function performs a Bitwise Or operation on the binary values of two input rasters. ",
		bitwiseRightShiftName: "Bitwise Right Shift",
		bitwiseRightShiftSnip: "Performs a Bitwise Right Shift operation on the binary values of two input rasters.",
		bitwiseRightShiftDesc: "The function performs a Bitwise Right Shift operation on the binary values of two input rasters.",
		bitwiseXorName: "Bitwise Xor",
		bitwiseXorSnip: "Performs a Bitwise eXclusive Or operation on the binary values of two input rasters.",
		bitwiseXorDesc: "The function performs a Bitwise eXclusive Ir operation on the binary values of two input rasters",
		booleanAndName: "Boolean And",
		booleanAndSnip: "Performs a Boolean And operation on the cell values of two input rasters. If both input values are true (non-zero), the output value is 1. If one or both inputs are false (zero), the output is 0.",
		booleanAndDesc: "The function performs a Boolean And operation on the pixel values of two inputs. If both input values are true (nonzero), the output value is 1. If one or both input values are false (zero), the output value is 0. ",
		booleanNotName: "Boolean Not",
		booleanNotSnip: "Performs a Boolean Not (complement) operation on the cell values of the input raster. If the input values are true (non-zero), the output value is 0. If the input values are false (zero), the output is 1.",
		booleanNotDesc: "The function performs a Boolean Not (complement) operation on the pixel values of the input raster. If the input values are true (nonzero), the output value is 0. If the input values are false (zero), the output value is 1.",
		booleanOrName: "Boolean Or",
		booleanOrSnip: "Performs a Boolean Or operation on the cell values of the two input rasters. If one or both input values are true (non-zero), the output value is 1. If both input values are false (zero), the output is 0.",
		booleanOrDesc: "The function performs a Boolean Or operation on the cell values of two input rasters. If one or both input values are true (nonzero), the output value is 1. If both input values are false (zero), the output value is 0.",
		booleanXorName: "Boolean Xor",
		booleanXorSnip: "Performs a Boolean eXclusive Or operation on the cell values of two input rasters. If one input value is true (non-zero) and the other false (zero), the output is 1. If both input values are true or both are false, the output is 0.",
		booleanXorDesc: "The function performs a Boolean eXclusive Or operation on the cell values of two input rasters. If one input value is true (nonzero) and the other value is false (zero), the output value is 1. If both input values are true ir both are false, the output value is 0.",
		bufferedRasterName: "Buffered",
		bufferedRasterSnip: "Buffers the last accessed pixel block(s).",
		bufferedRasterDesc: "The Buffered function is used to optimize the performance of complex function chains. It stores the output in memory of the part of the function chain which comes before it. <div><br/>Insert this function in the Function Editor where you want to store the output.</div>",
		rasterCalculatorName: "Calculator",
		rasterCalculatorSnip: "Computes a raster from a raster based mathematical expression.",
		rasterCalculatorDesc: "The Calculator function allows you to create and run expressions and incorporate those into function chains.",
		cellStatisticsName: "Cell Statistics",
		cellStatisticsSnip: "Calculates a per-cell statistic from multiple rasters. The available statistics are Majority, Maximum, Mean, Median, Minimum, Minority, Percentile, Range, Standard Deviation, Sum, and Variety.",
		cellStatisticsDesc: "This function calculates statistics from multiple rasters, on a pixel-by-pixel basis. The available statistics are majority, maximum, mean, median, minimum, minority, range, standard deviation, sum, and variety.",
		classifyName: "Classify",
		classifySnip: "Assigns each pixel to a class. Incorporate ancillary data such as a segmented image.",
		classifyDesc: "This raster function classifies a raster dataset based on an Esri Classifier Definition (.ecd) file and raster dataset inputs. The .ecd file used in the Classify function contains all the information for a specific dataset and classifier and is generated by the classification training tools, such as the Train Support Vector Machine or Train Random Trees tools.",
		clipName: "Clip",
		clipSnip: "Sets the extent of a raster using coordinates or another dataset.",
		clipDesc: "This function clips a raster using a rectangular shape according to the extents defined or will clip a raster to the shape of an input polygon feature class. The shape defining the clip can clip the extent of the raster or clip out an area within the raster.",
		colorspaceConversionName: "Color Model Conversion",
		colorspaceConversionSnip: "Converts a raster from RGB to HSV and vice versa.",
		colorspaceConversionDesc: "The Color Model Conversion function converts the color model of an image from the hue, saturation, and value (HSV) color space to red, green, and blue (RGB), or vice versa.<div><br/>This function can be used in a mosaic dataset.</div>",
		colormapToRGBName: "Colormap To RGB",
		colormapToRGBSnip: "Converts a single-band raster with a colormap, to a three-band (red, green, and blue) raster.",
		colormapToRGBDesc: "This function converts a single-band raster with a colormap, to a three-band (red, green, and blue) raster.<div><br/>This function is useful when you need to create a three-band raster from a single-band raster with an associated color map. The values in the color map will be used to create each red, green, and blue band. This function can be used in a mosaic dataset.</div>",
		colormapName: "Colormap",
		colormapSnip: "Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",
		colormapDesc: "The Colormap function is a type of raster data renderer. It transforms the pixel values to display the raster data as either a grayscale or an RGB color image based on a color scheme or specific colors in a color map file. You can use a color map to represent analyzed data, such as a classified image or when displaying a topographic map (or an index color-scanned image).<div><br/>Color maps contain a set of values that are associated with colors used to display a single-band raster consistently with the same colors. Each pixel value is associated with a color, defined as a set of RGB values. Color maps are capable of supporting any bit depth except floating point. They also support positive and negative values and can contain missing color mapped values. When displaying a dataset with a color map containing missing values, the pixels with those missing values will not be displayed.</div>",
		complexName: "Complex",
		complexSnip: "Extracts the magnitude from complex numbers.",
		complexDesc: "This function computes magnitude from complex values.<div><br/>This function is typically used with RADAR imagery that has a complex data type. It can be used in a mosaic dataset.</div>",
		compositeBandName: "Composite Bands",
		compositeBandSnip: "Combines multiple datasets into one multiband raster.",
		compositeBandDesc: "The Composite Bands function allows you to combine rasters to form a multiband image.",
		conName: "Con",
		conSnip: "Performs a conditional If, Then, Else operation. When a Con operator is used, there usually needs to be two or more functions chained together, where one function states the criteria and the second function is the Con operator which uses the criteria and dictates what the true and false outputs should be.",
		conDesc: "Con function sets the pixels of the output raster based on an if\\else evaluation of each input pixel. It returns pixel values from the True Raster if the conditional evaluation is true (1) or returns the pixel values from the False Raster if the conditional evaluation is false (0). This criteria is specified by the output of a logical math function, which will be the input Raster.",
		constantName: "Constant",
		constantSnip: "Creates a virtual raster with a single pixel value.",
		constantDesc: "This function creates a virtual raster with a single pixel value that can be used in raster function templates and to process a mosaic dataset.<div><br/>The constant value is used for every pixel value in the raster.</div>",
		contourName: "Contour",
		contourSnip: "Creates contour lines.",
		contourDesc: "The Contour function generates contour lines by joining points with the same elevation from a raster elevation dataset. The contours are isolines created as rasters for visualization. The following key features make this function powerful: contours are quickly and dynamically generated on very large datasets, such as the World Elevation; contours can be smoothed to provide a more cartographic-pleasing appearance while maintaining the accuracy of the contours; dynamic control over the contour interval is provided; output options include contour lines, index contours, and filled contours.<div><br/>The creation of a contour layer as a raster product is valuable for a wide range of applications since the contours can be overlaid on a map and provide information regarding the terrain without obscuring the underlying data. They are useful in applications such as engineering, agriculture, and water management.</div>",
		contrastBrightnessName: "Contrast and Brightness",
		contrastBrightnessSnip: "Adjusts the contrast and brightness of a raster.",
		contrastBrightnessDesc: "The Contrast And Brightness function enhances the appearance of raster data by modifying the brightness and contrast within the image. Brightness increases the overall lightness of the image—for example, making dark colors lighter and light colors whiter—while contrast adjusts the difference between the darkest and lightest colors.<div><br/>Using this function alters the pixel values; therefore, this function should be used when you want to enhance the appearance of the data and not if you intend to use the data as part of an analysis that would require the raw pixel values. This function is useful when publishing the data as an image service that may be used in applications without the ability to alter the contrast and brightness of the imagery, or to ensure that it displays using your preferred settings.</div>",
		convolutionName: "Convolution",
		convolutionSnip: "Applies a filter to sharpen, blur, detect edges, smooth, or a gradient across a raster.",
		convolutionDesc: "The Convolution function performs filtering on the pixel values in an image, which can be used for sharpening an image, blurring an image, detecting edges within an image, or other kernel-based enhancements. Filters are used to improve the quality of the raster image by eliminating spurious data or enhancing features in the data. These convolution filters are applied on a moving, overlapping kernel (window or neighborhood), such as 3 by 3. Convolution filters work by calculating the pixel value based on the weighs of its neighbors.",
		corridorName: "Corridor",
		corridorSnip: "Calculates the sum of accumulative costs for two input accumulative rasters.",
		corridorDesc: "The Corridor function calculates the sum of accumulative costs for two input accummulative cost rasters. While any two rasters can be used for the input, to obtain a meaningful result they should be unaltered accumulative cost output rasters. The order of the two inputs is irrelevant.",
		cosHName: "CosH",
		cosHSnip: "Calculates the hyperbolic cosine of cells in a raster.",
		cosHDesc: "The function calculates the hyperbolic cosine of the pixels in a raster.",
		cosName: "Cos",
		cosSnip: "Calculates the cosine of a cell in raster.",
		cosDesc: "The function calculates the cosine of the pixels in a raster.",
		costAllocationName: "Cost Allocation",
		costAllocationSnip: "Calculates, for each cell, its least-cost source based on the least accumulative cost over a cost surface.",
		costAllocationDesc: "The Cost Allocation function calculates, for each cell, its least-cost source based on the least accumulative cost over a cost surface.",
		costBackLinkName: "Cost Back Link",
		costBackLinkSnip: "Defines the neighbor that is the next cell on the least accumulative cost path to the least-cost source.",
		costBackLinkDesc: "The Cost Back Link function defines the neighbor that is the next cell on the least accumulative cost path to the least-cost source.<div><br/>The backlink raster contains values of zero through eight, which define the direction or identify the next neighboring cell (the succeeding cell) along the least accumulative cost path from a cell to reach its least-cost source. If the path is to pass into the right neighbor, the cell will be assigned the value 1, 2 for the lower right diagonal cell, and continuing clockwise. The value 0 is reserved for source cells.</div>",
		costDistanceName: "Cost Distance",
		costDistanceSnip: "Calculates the least accumulative cost distance for each cell from or to the least-cost source over a cost surface.",
		costDistanceDesc: "The Cost Distance function calculates the least accumulative cost distance for each cell from or to the least-cost source over a cost surface.",
		costPathName: "Cost Path",
		costPathSnip: "Calculates the least-cost path from a source to a destination.",
		costPathDesc: "The global Cost Path function calculates the least-cost path from a source to a destination.<div><br/>This function produces an output raster that records the least-cost path or paths from selected locations to the closest source cell defined within the accumulative cost surface, in terms of cost distance.</div>",
		curvatureName: "Curvature",
		curvatureSnip: "Calculates the curvature of a raster surface, optionally including profile and plan curvature.",
		curvatureDesc: "The Curvature function displays the shape or curvature of the slope. A part of a surface can be concave or convex; you can tell that by looking at the curvature value. The curvature is calculated by computing the second derivative of the surface.<div><br/>The output of the Curvature function can be used to describe the physical characteristics of a drainage basin in an effort to understand erosion and runoff processes. The curvature value can be used to find soil erosion patterns as well as the distribution of water on land. The profile curvature affects the acceleration and deceleration of flow and, therefore, influences erosion and deposition. The planform curvature influences convergence and divergence of flow.</div>",
		divideName: "Divide",
		divideSnip: "Divides the values of two rasters on a cell-by-cell basis.",
		divideDesc: "The Divide function divides the values of two rasters on a pixel-by-pixel basis.",
		elevationVoidFillName: "Elevation Void Fill",
		elevationVoidFillSnip: "Creates pixels where holes exist in your elevation data.",
		elevationVoidFillDesc: "The Elevation Void Fill function is used to create pixels where holes exist in your elevation.<div><br/>Voids occur when there are no points collected within the area represented by a pixel in the resultant raster. Voids are often caused by water bodies, class type selection, or exclusion. Void filling is most commonly used when generating a ground surface.</div>",
		equalToName: "Equal To",
		equalToSnip: "Performs a Relational equal-to operation on two inputs on a cell-by-cell basis. Returns 1 for cells where the first raster equals the second raster and 0 for cells where it does not.",
		equalToDesc: "The function performs an equal-to operation on two rasters on a pixel-by-pixel basis. It returns the value 1 for pixels where the first raster equals the second raster and value 0 for pixels where they are not equal.",
		eucAllocationName: "Euclidean Allocation",
		eucAllocationSnip: "Calculates, for each cell, the nearest source based on Euclidean distance.",
		eucAllocationDesc: "The Euclidean Allocation function calculates, for each cell, the nearest source based on Euclidean distance.",
		eucDirectionName: "Euclidean Direction",
		eucDirectionSnip: "Calculates, for each cell, the direction, in degrees, to the nearest source.",
		eucDirectionDesc: "The Euclidean Direction function calculates, for each cell, the direction, in degrees, to the nearest source. <div><br/>The direction is calculated from each cell center to the center of the source cell that's nearest to it. The range of values is from 0 degrees to 360 degrees, with 0 reserved for the source cells. Due east (right) is 90 and the values increase clockwise (180 is south, 270 is west, and 360 is north).</div>",
		eucDistanceName: "Euclidean Distance",
		eucDistanceSnip: "Calculates, for each cell, the Euclidean distance to the closest source.",
		eucDistanceDesc: "The Euclidean Distance function calculates, for each cell, the Euclidean distance to the closest source.",
		exp10Name: "Exp10",
		exp10Snip: "Calculates the base 10 exponential of the cells in a raster.",
		exp10Desc: "The Exp 10 function calculates the base 10 exponential of the pixels in a raster.",
		exp2Name: "Exp2",
		exp2Snip: "Calculates the base 2 exponential of the cells in a raster.",
		exp2Desc: "This function calculates the base 2 exponential of the pixels in a raster.",
		expName: "Exp",
		expSnip: "Calculates the base e exponential of the cells in a raster.",
		expDesc: "This function calculates the base e exponential of the pixels in a raster.",
		extractBandName: "Extract Bands",
		extractBandSnip: "Specifies which bands to work with when using multiband datasets.",
		extractBandDesc: " The Extract Bands function allows you to extract one or more bands from, or reorders the bands in, a multiband raster dataset.<div><br/>You can use the Extract Bands function before other functions, such as Arithmetic, to control which bands are used as input in the next function.</div>",
		fillName: "Fill",
		fillSnip: "Fills sinks in a surface raster to remove small imperfections in the data.",
		fillDesc: "The global Fill function locates and fills sinks and peaks in an elevation surface raster to remove small imperfections in the data. The function will fill in an iterative process until all sinks are filled within the specified Z Limit.<div><br/>When an elevation surface is created with Ortho Mapping tools or by other means, there are often small but significant errors in the form of sinks and peaks in the data. In photogrammetry, sinks and peaks are often referred to as holes and spikes. Because surface data is often used in modeling, such as hydrologic modeling, it is important to correct these sink and peak errors in a manner consistent with the surrounding data.</div>",
		floatName: "Float",
		floatSnip: "Converts each cell value of a raster into a floating point representation.",
		floatDesc: "The Float function converts each pixel value of a raster into a floating-point representation.",
		flowAccumulationName: "Flow Accumulation",
		flowAccumulationSnip: "Creates a raster of accumulated flow into each cell. A weight factor can optionally be applied.",
		flowAccumulationDesc: "The Flow Accumulation global function creates a raster of accumulated flow into each pixel, as determined by accumulating the weight for all pixels that flow into each downslope pixel. If no weight raster is provided, a weight of 1 is applied to each pixel, and the value of pixels in the output raster is the number of pixels that flow into each pixel.<div><br/>Output pixels with a high flow accumulation are areas of concentrated flow and can be used to identify stream channels. Output pixels with a flow accumulation of zero are local topographic highs and can be used to identify ridges.</div>",
		flowDirectionName: "Flow Direction",
		flowDirectionSnip: "Creates a raster of flow direction from each cell to its steepest downslope neighbor.",
		flowDirectionDesc: "One of the keys to deriving hydrologic characteristics of a surface is the ability to determine the direction of flow from every pixel in the raster. The Flow Direction raster function takes a surface as input and creates a raster of flow direction from each pixel to its steepest downslope neighbor. The Flow Direction function supports three flow modeling methods: the D8 (eight directions), Multi-Flow Direction (MFD), and D-Infinity (DINF). ",
		flowDistanceName: "Flow Distance",
		flowDistanceSnip: "Computes, for each cell, the minimum downslope horizontal or vertical distance to cells on a stream or river into which they flow.",
		flowDistanceDesc: "For each pixel, the function will calculate the minimum downslope horizontal or vertical distance to pixel(s) on a river or stream into which they flow. If an optional flow direction raster is provided, the down slope direction(s) will be limited to those defined by the input flow direction raster. The output is a flow distance raster.",
		focalName: "Focal Statistics",
		focalSnip: "Calculates focal statistics for each pixel of an image based on a defined focal neighborhood.",
		focalDesc: "The Focal Statistics function calculates focal statistics for each pixel of an image based on a defined focal neighborhood.",
		geometricName: "Geometric",
		geometricSnip: "Increases the positional accuracy of a dataset by accounting for elevation.",
		geometricDesc: "The Geometric function produces an orthorectified image based on a sensor definition and a terrain model. It increases the positional accuracy of a dataset by accounting for elevation.",
		grayscaleName: "Grayscale",
		grayscaleSnip: "Converts a multiband image into a single-band grayscale image.",
		grayscaleDesc: "This function converts a multiband image into a single-band grayscale image.<div><br/>This function applies specified weights to each of the input bands, and normalizes the output image. The weights are often applied because some bands have variable importance depending on the application. For example, the blue band often contains more noise than other bands.</div>",
		greaterThanEqualName: "Greater Than Equal",
		greaterThanEqualSnip: "Performs a Relational greater-than-equal-to operation on two inputs on a cell-by-cell basis. Returns 1 for cells where the first raster is greater than or equal to the second raster and 0 if it is not.",
		greaterThanEqualDesc: "The function performs a Relational greater-than-or-equal-to operation on two inputs on a pixel-by-pixel basis. It returns a value of 1 for pixels where the first raster is greater than or equal to the second raster and a value of 0 for pixels where the first raster is not greater than or equal to the second raster.",
		greaterThanName: "Greater Than",
		greaterThanSnip: "Performs a Relational greater-than operation on two inputs on a cell-by-cell basis. Returns 1 for cells where the first raster is greater than the second raster and 0 for cells if it is not.",
		greaterThanDesc: "The function performs a Relational greater-than operation on two inputs on a pixel-by-pixel basis. Returns a value of 1 for pixels where the first raster is greater than the second raster and a value of 0 for pixels where the first raster is not greater than the second raster.",
		heatIndexName: "Heat Index",
		heatIndexSnip: "Combines ambient air temperature and releative humidity to return apparent temperature.",
		heatIndexDesc: "This function calculates apparent temperature based on ambient temperature and relative humidity. The apparent temperature is often described as how hot it feels to the human body.<div><br/>This index can be useful for calculating the dangers related to medical issues such as muscle cramping, dehydration, heat exhaustion, or the more serious heatstroke on hot and humid days. When relative humidity is high, it becomes increasingly difficult for the body's sweat to evaporate, leaving individuals without an effective natural way to cool off. Maps of heat advisories or warnings are often a product of reclassifying the heat index result into classes, where the higher the index value, the more likely it is to become a warning rather than just an advisory.</div>",
		hillshadeName: "Hillshade",
		hillshadeSnip: "Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",
		hillshadeDesc: "The Hillshade function produces a grayscale 3D representation of the terrain surface, with the sun's relative position taken into account for shading the image. <div><br/>Hillshading is a technique for visualizing terrain determined by a light source and the slope and aspect of the elevation surface. It is a qualitative method for visualizing topography and does not give absolute elevation values. </div>",
		intName: "Int",
		intSnip: "Converts each cell value of a raster into an integer by truncation.",
		intDesc: "The Int function converts each pixel value of a raster to an integer by truncation.",
		interpolateIrregularDataName: "Interpolate Irregular Data",
		interpolateIrregularDataSnip: "Interpolates from point clouds or irregular grids.",
		interpolateIrregularDataDesc: "Some netCDF or HDF datasets store their geolocation as irregularly spaced arrays of pixels or point data. When adding these datasets to a mosaic dataset, the interpolate irregular data function takes the irregularly gridded data and resamples it so each pixel is of uniform size and is square.<div><br/>When adding variables from netCDF or HDF to a mosaic dataset, it will automatically verify if the data is arrayed regularly. If it is not, the interpolate irregular data function can be used to convert the irregular data into a regularly gridded raster. You can change the interpolation method and cell size used in the interpolate irregular data raster function. For regular-spaced raster data, no interpolation will be applied and the data will be read as it is.</div>",
		isNullName: "Is Null",
		isNullSnip: "Determines which values from the input rasters are NoData on a cell-by-cell basis. Returns a value of 1 if the input values is NoData and 0 for cells that are not.",
		isNullDesc: "The Is Null function determines which values from the input raster are NoData on a pixel-by-pixel basis. It returns a value of 1 if the input value is NoData and a value of 0 for pixels that are not NoData.",
		kernelDensityName: "Kernel Density",
		kernelDensitySnip: "Calculates a magnitude-per-unit area from point or polyline features using a kernel function to fit a smoothly tapered surface to each point or polyline.",
		kernelDensityDesc: "This function calculates a magnitude-per-unit area from point or polyline features using a kernel function to fit a smoothly tapered surface to each point or polyline.",
		keyMetadataName: "Key Metadata",
		keyMetadataSnip: "Overrides or inserts key-metadata of a raster in a function chain.",
		keyMetadataDesc: "This function allows you to insert or override key metadata of a raster.<div><br/>The information in key metadata is used to assist the application with some processing and rendering, including providing some useful information such as the sensor name, band names, or cloud cover associated with the imagery.</div>",
		shortestPathName: "Least Cost Path",
		shortestPathSnip: "Performs a cost distance analysis using source and destination inputs which is then used to determine the least-cost path from a source to a destination.",
		shortestPathDesc: "The Least Cost Path function calculates the least-cost path from a source to a destination. The least accumulative cost distance is calculated for each pixel over a cost surface, to the nearest source. This produces an output raster that records the least-cost path, or paths, from selected locations to the closest source pixels defined within the accumulative cost surface, in terms of cost distance.<div><br/>Each least-cost path is assigned a value when encountered in the scanning process. The ending pixel on the Source Raster of a cost path receives a value of 1. The first path receives a value of 3, the second 4, and so on. When multiple paths merge and follow the remaining distance back to a source on the same route, the segment where the two paths travel together is assigned a value of 2. The merged portion of the path cannot be assigned the value of one of the paths, since the merged portion belongs to both routes.</div>",
		lessThanEqualName: "Less Than Equal",
		lessThanEqualSnip: "Performs a Relational less-than-or-equal-to operation on two inputs on a cell-by-cell basis. Returns 1 for cells where the first raster is less than or equal to the second raster and 0 where it is not.",
		lessThanEqualDesc: "The function performs a Relational less-than-or-equal-to operation on two inputs on a pixel-by-pixel basis. It returns a value of 1 for pixels where the first raster is less than or equal to the second raster and a value of 0 where it is not less than or equal to the second raster.",
		lessThanName: "Less Than",
		lessThanSnip: "Performs a Relational less-than operation on two inputs on a cell-by-cell basis. Returns 1 for cells where the first raster is less than the second raster and 0 if it is not.",
		lessThanDesc: "The function performs a Relational less-than operation on two inputs on a pixel-by-pixel basis. It returns a value of 1 for pixels where the first raster is less than the second raster and a value of 0 if it is not less than the second raster.",
		lnName: "Ln",
		lnSnip: "Calculates the natural logarithm (base e) of cells in a raster.",
		lnDesc: "The Ln function calculates the natural logarithm (base e) of each pixel in a raster.",
		log10Name: "Log10",
		log10Snip: "Calculates the base 10 logarithm of cells in a raster.",
		log10Desc: "The Log10 function calculates the base 10 logarithm of each pixel in a raster.",
		log2Name: "Log2",
		log2Snip: "Calculates the base 2 logarithm of cells in a raster.",
		log2Desc: "The Log2 function Calculates the base 2 logarithm of each pixel in a raster.",
		lookupName: "Lookup",
		lookupSnip: "Creates a new raster by looking up values found in another field in the table of the input raster.",
		lookupDesc: "The function creates a new raster by looking up values found in another field in the table of the input raster.",
		mlClassifyName: "ML Classify",
		mlClassifySnip: "Classifies imagery using a per-pixel approach. Mixed pixels are assigned to the feature with the highest percentage in that pixel.",
		mlClassifyDesc: "The ML Classify function allows you to perform a supervised classification, using the maximum likelihood classification algorithm, on a raster dataset or mosaic dataset. This function requires a classification signature file.",
		maskName: "Mask",
		maskSnip: "Sets values that you do not want to display.",
		maskDesc: "This raster function sets values that you do not want to display in your raster. Using the Mask function, you will specify one or more NoData values or a range of valid pixel values. ",
		minusName: "Minus",
		minusSnip: "Subtracts the value of the second input raster from the value of the first input raster on a cell-by-cell basis.",
		minusDesc: "The Minus function subtracts the value of the second input raster from the value of the first input raster on a pixel-by-pixel basis.",
		modName: "Mod",
		modSnip: "Finds the remainder (modulo) of the first raster when divided by the second raster on a cell-by-cell basis.",
		modDesc: "Mod function finds the remainder (modulo) of the first raster when divided by the second raster on a pixel-by-pixel basis. The order of the inputs is important and affects the output result.",
		mosaicRastersName: "Mosaic Rasters",
		mosaicRastersSnip: "Stitches a set of raster datasets together to create one dataset.",
		mosaicRastersDesc: "The Mosaic Rasters function creates a mosaic image out of multiple images. When there is overlap between the images, there are several methods you can choose from to determine which images are displayed.",
		ndviColorizedName: "NDVI Colorized",
		ndviColorizedSnip: "Creates a multiband dataset that represents vegetation health, based on the difference between the red and near infrared bands.",
		ndviColorizedDesc: "The NDVI Colorized function applies the NDVI function on the input image, and then uses a color map or color ramp to display the result.",
		ndviName: "NDVI",
		ndviSnip: "Calculates Normalized Difference Vegetation Index (NDVI).",
		ndviDesc: "The NDVI function creates a single band dataset that represents vegetation health, based on the difference between the red and near infrared bands.<div><br/>NDVI is a standardized index allowing you to generate an image displaying greenness, also known as relative biomass. This index takes advantage of the contrast of characteristics between two bands from a multispectral raster dataset: the chlorophyll pigment absorption in the red band and the high reflectivity of plant material in the near-infrared (NIR) band. Extremely low or negative NDVI values represent areas with no vegetation at all, such as cloud, water, or snow. Very low values represent areas of little to no vegetation, such as concrete, rock, or bare soil. Moderate values represent areas of shrubs and grassland. High values represent forest areas and lush vegetation.</div>",
		negateName: "Negate",
		negateSnip: "Changes the sign (multiplies by -1) of the cell values of the input raster on a cell-by-cell basis.",
		negateDesc: "Negate function changes the sign (mulitplies by -1) of the pixel values of the input raster on a pixel ",
		nibbleName: "Nibble",
		nibbleSnip: "Replaces cells of a raster corresponding to a mask with the values of nearest neighbors.",
		nibbleDesc: "The Nibble global function allows selected areas of a raster to be assigned the value of their nearest neighbor. This is useful for editing areas of a raster where the data may be erroneous.",
		notEqualName: "Not Equal",
		notEqualSnip: "Performs a Relational not-equal-to operation on two inputs on a cell-by-cell basis. Returns 1 for cells where the first raster is not equal to the second raster and 0 where it is equal.",
		notEqualDesc: "The function performs a Relational not-equal-to operation on two inputs on a pixel-by-pixel basis. It returns a value of 1 for pixels where the first raster is not equal to the second raster and a value of 0 for pixels where it is equal to the second raster.",
		pansharpeningName: "Pansharpen",
		pansharpeningSnip: "Artificially enhances the spatial resolution of a multiband image by fusing it with a higher resolution panchromatic image.",
		pansharpeningDesc: "The Pansharpening function uses a higher-resolution panchromatic image or raster band to fuse with a lower-resolution, multiband raster dataset to increase the spatial resolution of the multiband image.<div><br/>The purpose of pan sharpening is to create a higher quality visual image. Since the techniques alter the radiometry and spectral characteristics of the multiband imagery, pan sharpened imagery needs to be used with caution for analytical remote sensing purposes.</div>",
		pathAllocationName: "Path Distance Allocation",
		pathAllocationSnip: "Calculates the least-cost source for each cell based on the least accumulative cost over a cost surface, while accounting for surface distance along with horizontal and vertical cost factors.",
		pathAllocationDesc: "The Path Distance Allocation function calculates the nearest source for each cell based on the least accumulative cost over a cost surface, while accounting for surface distance and horizontal and vertical cost factors.",
		pathBackLinkName: "Path Distance Back Link",
		pathBackLinkSnip: "Defines the neighbor that is the next cell on the least accumulative cost path to the least-cost source, while accounting for surface distance along with horizontal and vertical cost factors.",
		pathBackLinkDesc: "The Path Distance Back Link function identifies the directionality of the neighbor that is the next cell on the least accumulative cost path to the nearest source, while accounting for surface distance and horizontal and vertical cost factors.",
		pathDistanceName: "Path Distance",
		pathDistanceSnip: "Calculates, for each cell, the least accmulative cost distance from or to the least-cost source, while accounting for surface distance along with horizontal and vertical cost factors.",
		pathDistanceDesc: "The Path Distance function calculates, for each cell, the least accumulative cost distance to the nearest source, while accounting for surface distance and horizontal and vertical cost factors.",
		plusName: "Plus",
		plusSnip: "Adds (sums) the values of two rasters on a cell-by-cell basis.",
		plusDesc: "Plus function adds (sums) the values of two rasters on a pixel-by-pixel basis.",
		powerName: "Power",
		powerSnip: "Raises the cell values in a raster to the power of the values found in another raster.",
		powerDesc: "Power function raises the pixel values in a raster to the power of the values found in another raster.",
		radarCalibrationName: "Radar Calibration",
		radarCalibrationSnip: "Converts RADARSAT-2 backscatter.",
		radarCalibrationDesc: "This function can be used to calibrate RADARSAT-2 imagery in a mosaic dataset or as a raster product. Calibration is performed on radar imagery so that the pixel values are a true representation of the radar backscatter.",
		rasterInfoName: "RasterInfo",
		rasterInfoSnip: "Modifies properties of the raster, such as bit depth, NoData value, cell size, and so on.",
		rasterInfoDesc: "The Raster Info opens a dialog with raster dataset properties, such as the number of columns and rows, the number of bands, the pixel type, the extent, and the spatial reference. You can edit these properties by selecting a raster dataset to use as a template. ",
		rasterizeAttributesName: "Rasterize Attributes",
		rasterizeAttributesSnip: "Enriches a raster through additional bands derived from values of specified attributes of an external table or a feature service.",
		rasterizeAttributesDesc: "The Rasterize Attribute function enriches a raster by adding bands derived from values of specified attributes, from an external table or a feature service. You can optionally specify a zone raster and the associated zone ID attribute to enable region-based look-up.",
		rasterizeFeatureClassName: "Rasterize Features",
		rasterizeFeatureClassSnip: "Converts features to raster.",
		rasterizeFeatureClassDesc: "This function converts polygon, polyline and point feature class data to a raster layer.<div><br/>Features are assigned pixel values based on the features' OBJECTID (default). Optionally, the pixel values can be based on a user defined value field in the input feature's attribute table.</div>",
		recastName: "Recast",
		recastSnip: "Modifies the parameters of a function chain in a mosaic dataset or image service. This is often used with LAS datasets to avoid having to create a separate mosaic dataset for different representations of terrain.",
		recastDesc: "The Recast function is used to dynamically modify the function parameter used in a mosaic dataset or image service without physically persisting the changes.",
		regionGroupName: "Region Group",
		regionGroupSnip: "For each cell in the output, the identity of the connected region to which that cell belongs is recorded. A unique number is assigned to each region.",
		regionGroupDesc: "The Region Group global function records, for each cell in the output, the identify of the connected region to which that cell belongs. A unique number is assigned to each region.<div><br/>The first region scanned receives the value one, the second two, and so forth, until all regions are assigned a value. The scan moves from left to right, top to bottom. The values assigned to the output zones are based on when they are encountered in the scanning process.</div>",
		regionGrowName: "Region Grow",
		regionGrowSnip: "Grows regions from seed points.",
		regionGrowDesc: "The Region Grow function groups neighboring pixels into groups depending on the specified radius from the seed point. The group of pixels or object is assigned a specified fill value.",
		remapName: "Remap",
		remapSnip: "Changes pixel values by assigning new values to ranges of pixel values or using an external table.",
		remapDesc: "The Remap function allows you to change or reclassify the pixel values of the raster data. This can be done by either specifying a range of pixel values to map to an output pixel value, or using a table to map the pixel values to output pixel value.",
		reprojectName: "Reproject",
		reprojectSnip: "Modifies the projection of a raster dataset, mosaic dataset, or raster item in a mosaic dataset. It can also resample the data to a new cell size and define an origin.",
		reprojectDesc: "The Reproject function modifies the projection of a raster dataset, mosaic dataset, or raster item in a mosaic dataset. It can also resample the data to a new cell size and define an origin.<div><br/>The Reproject function can be used when creating a cache from a raster or mosaic dataset that is not in the required projection. For example, when creating a cached image service that may be integrated by applications with other cached services, it's important that they all be in the same projection. This is often a Web Mercator projection. Since the mosaic dataset cannot be reprojected, you can do one of two things—either create a referenced mosaic dataset from your mosaic dataset in the projection needed, or add the Reproject function to the mosaic dataset's function chain. Another example uses this function on the raster item in a mosaic dataset. When using the Cached Raster function, you may want to insert the Reproject function so the cache is created in the new projection. Raster items in a mosaic dataset can be cached when the processing is intense and you are trying to publish an image service that is fast, without caching the entire image service.</div>",
		resampleName: "Resample",
		resampleSnip: "Changes the cell size of a raster.",
		resampleDesc: "The Resample function changes the cell size, resampling type, or both.<div><br/>The Resample function should only be used with specific computing requirements; for example, when you are computing the wind or current magnitude-direction that requires resampling from the source resolution.</div>",
		roundDownName: "Round Down",
		roundDownSnip: "Returns the next lower integer value, just represented as a floating point, for each cell in a raster.",
		roundDownDesc: "Round Down function returns the next lower integer, as a floating-point value, for each pixel in a raster.",
		roundUpName: "Round Up",
		roundUpSnip: "Returns the next higher integer value , just represented as a floating point, for each cell in a raster.",
		roundUpDesc: "Round Up returns the next higher integer, as a floating-point value, for each pixel in a raster.",
		segmentMeanShiftName: "Segment Mean Shift",
		segmentMeanShiftSnip: "Groups neighboring pixels with similar spectral characteristics together into segments.",
		segmentMeanShiftDesc: "This function identifies objects, features, or segments in your imagery by grouping adjacent pixels together that have similar spectral and spatial characteristics. You can control the amount of spatial and spectral smoothing to help derive features of interest.",
		s1RadiometricCalibrationName: "Sentinel-1 Radiometric Calibration",
		s1RadiometricCalibrationSnip: "Performs different types of radiometric calibration on Sentinel-1 data.",
		s1RadiometricCalibrationDesc: "This raster function performs three different calibrations for Sentinel 1 datasets, including beta nought and gamma, and outputs the calibrated dataset. The objective of SAR calibration is to provide imagery in which pixel values can be directly related to the radar backscatter of the scene. Though uncalibrated SAR imagery is sufficient for qualitative use, calibrated SAR images are essential to quantitative use of SAR data.<div><br/>Typical SAR data processing, which produces Level 1 images, does not include radiometric corrections and significant radiometric bias remains. Therefore, it is necessary to apply radiometric correction to SAR images so that the pixel values of the images truly represent the radar backscatter of the reflecting surface. Radiometric correction is also necessary for the comparison of SAR images acquired with different sensors, or acquired from the same sensor at different times, in different modes, or processed by different processors.</div>",
		s1ThermalNoiseRemovalName: "Sentinel-1 Thermal Noise Removal",
		s1ThermalNoiseRemovalSnip: "Removes thermal noise from Sentinel-1 data.",
		s1ThermalNoiseRemovalDesc: "Thermal noise correction can be applied to Sentinel-1 Level-1 Single Look Complex (SLC) products as well as Level-1 Ground Range Detection (GRD) products which have not already been corrected. The operator can also remove this correction based on the product annotations to re-introduce the noise signal that was removed to produce the original product. Product annotations will be updated accordingly to allow for re-application of the correction. ",
		setNullName: "Set Null",
		setNullSnip: "Set Null sets identified cell locations to NoData based on a specified criteria. It returns NoData if a conditional evaluation is true, and returns the value specified by another raster if it is false.",
		setNullDesc: "Set Null function sets the identified pixels to NoData , based on the specific criteria. It returns NoData if a conditional evaluation is true (1) and returns the value specified in the False Raster if a conditional evaluation is false (0). This criteria is specified by the output of a logical math function, which will be the input Raster.",
		shadedReliefName: "Shaded Relief",
		shadedReliefSnip: "Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",
		shadedReliefDesc: "The Shaded relief function creates a color 3D representation of the terrain is created by merging the images from the elevation-coded and hillshade methods. This function uses the altitude and azimuth properties to specify the sun's position.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Calculates the hyperbolic sine of cells in a raster.",
		sinHDesc: "The function calculates the hyperbolic sine of the pixels in a raster.",
		sinName: "Sin",
		sinSnip: "Calculates the sine of cells in a raster.",
		sinDesc: "The function calculates the sine of the pixels in a raster.",
		slopeName: "Slope",
		slopeSnip: "Calculates the rate of change from one pixel value to its neighbors.",
		slopeDesc: "This raster function calculates slope which is the rate of change of elevation for each digital elevation model (DEM) cell. It's the first derivative of a DEM.<div><br/>This function uses an accelerated atan() function. It is six times faster, and the approximation error is always less than 0.3 degrees.</div>",
		speckleName: "Speckle",
		speckleSnip: "Provides filters to denoise synthetic aperture radar datasets.",
		speckleDesc: "Speckle is the high-frequency noise on a radar data. The images generated by synthetic aperture radar (SAR) systems are highly subject to speckling effects due to the processing of scattered signals and interference of electromagnetic waves scattered from surfaces or objects. This Speckle function filters the speckled radar dataset and smooths out the noise while retaining the edges or sharp features in the image.",
		spectralConversionName: "Spectral Conversion",
		spectralConversionSnip: "Applies a matrix to a multiband image.",
		spectralConversionDesc: "The Spectral Conversion function applies a matrix to a multiband image to affect the color values of the output.<div><br/>Some sensors do not collect blue bands because of a low signal to noise ratio. This can be used, for example, to convert a false color infrared image to a pseudo natural color image.</div>",
		squareRootName: "Square Root",
		squareRootSnip: "Calculates the square root of the cell values in a raster.",
		squareRootDesc: "Square Root fucntion calculates the square root of the pixel values in a raster.",
		squareName: "Square",
		squareSnip: "Calculates the square of the cell values in a raster.",
		squareDesc: "Square calculates the square of the pixel values in a raster.",
		statisticsHistogramName: "Statistics and Histogram",
		statisticsHistogramSnip: "Define or associate statistics and histogram.",
		statisticsHistogramDesc: "The Statistics and Histogram function is used to define the statistics and histogram of a raster. You can insert this function at the end of the function chain to describe the statistics and histogram of a raster function template (RFT). This may be needed to control the default display of the processing result, especially when defining a function chain that contains many functions.<div><br/>You can define statistics by typing the values or importing from a raster dataset or an XML file. Histograms can only be defined by importing a file.</div>",
		statisticsName: "Statistics",
		statisticsSnip: "Calculates focal statistics for each pixel of an image based on a defined focal neighborhood.",
		statisticsDesc: "The Statistics function calculates focal statistics for each pixel of an image based on a defined focal neighborhood.<div><br/>The Statistics function can be used to fill dropped lines in an image. Dropped lines are often caused by problems in the sensor where data is not collected. This has happened in sensors such as Landsat 7's Enhanced Thematic Mapper Plus (ETM+). This missing data causes problems for analysis and also when looking at the imagery. There is little that can be done when using the imagery for analysis; however, if there was an overlapping image, it could be used in place of the missing content. The same could be done if the imagery is being used for visualization. However, there isn't always an extra image to fill in the missing content, so it must be derived from the existing data.</div>",
		streamLinkName: "Stream Link",
		streamLinkSnip: "Assigns unique values to sections of a raster linear network between intersections.",
		streamLinkDesc: "The global Stream Link function assigns unique values to sections of a raster linear network between intersections.<div><br/>Links are the sections of a stream channel connecting two successive junctions, a junction and the outlet, or a junction and the drainage divide. In hydrology, these stream segments are called reaches. A junction is related to a pour point and helps delineate a watershed or drainage sub-basin boundary.</div>",
		stretchName: "Stretch",
		stretchSnip: "Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",
		stretchDesc: "The Stretch function enhances an image by changing properties such as brightness, contrast, and gamma through multiple stretch types. This function uses the statistics from the rasters within the mosaic dataset; therefore, if you use this function, you must make sure statistics have been calculated.<div><br/>The stretch type defines a histogram stretch that will be applied to the rasters to enhance their appearance. Stretching improves the appearance of the data by spreading the pixel values along a histogram from the minimum and maximum values defined by their bit depth. </div>",
		swathName: "Swath",
		swathSnip: "Interpolates from irregular grids or swath data.",
		swathDesc: "Some netCDF or HDF datasets store their geolocation as irregularly spaced arrays. When adding these datasets to a mosaic dataset, the swath function takes the irregularly gridded data and resamples it so that each pixel is of uniform size and is square.<div><br/>When adding variables from netCDF or HDF to a mosaic dataset, it will automatically verify if the data is arrayed regularly. If it is not, the swath function is applied automatically to convert the irregular raster into points and then to a regularly gridded raster. You can change the interpolation method and cell size used in the swath raster function. For regular-spaced raster data, no interpolation will be applied, data will be read as it is.</div>",
		tanHName: "TanH",
		tanHSnip: "Calculates the hyperbolic tangent of cells in a raster.",
		tanHDesc: "The function calculates the hyperbolic tangent of the pixels in a raster.",
		tanName: "Tan",
		tanSnip: "Calculates the tangent of cells in a raster.",
		tanDesc: "The function calculates the tangent of the pixels in a raster. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Calculates levels of vegetation, wetness and brightness. This technique relies on coefficients that must be calculated specifically for a sensor.",
		tasseledCapDesc: "The Tasseled Cap (Kauth-Thomas) transformation is designed to analyze and map vegetation phenomenology and urban development changes detected by various satellite sensor systems. It is known as the Tasseled Cap transformation due to the shape of the graphical distribution of data. The transformation provided a rationale for the patterns found in Landsat MSS data of agricultural fields as a function of the life cycle of the crop. Essentially, as crops grow from seed to maturity, there is a net increase in near-infrared and decrease in red reflectance based on soil color<div><br/>The utility of this transformation has expanded from monitoring crops to analyzing and mapping vegetation to support a variety of applications such as forestry, industrial vegetation management, ecosystem mapping and management, inventory and monitoring for carbon sequestering and credits, urban development, and more. It has also expanded from supporting Landsat MSS to include other popular satellite systems such as Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 and RapidEye multispectral sensors.</div>",
		timesName: "Times",
		timesSnip: "Multiplies the values of two rasters on a cell-by-cell basis.",
		timesDesc: "The Times function multiplies the values of two raster on a pixel-by-pixel basis.",
		transposeBitsName: "Transpose Bits",
		transposeBitsSnip: "Unpacks the bits of the input pixel, and maps them to specified bits in the output pixel. The purpose of this function is to manipulate bits from a couple inputs, such as Landsat 8 quality band products.",
		transposeBitsDesc: "The Transpose Bit function unpacks the bits of the input pixel and maps them to specified bits in the output pixel. The purpose of this function is to manipulate bits from a couple of inputs, such as the Landsat 8 quality band products.",
		unitConversionName: "Unit Conversion",
		unitConversionSnip: "Changes values from one unit of measurement to another.",
		unitConversionDesc: "This function converts pixels from one unit to another. It supports conversion of distance, speed, and temperature.",
		vectorFieldName: "Vector Field",
		vectorFieldSnip: "Displays datasets with both magnitude (u) and direction (v) as arrows where magnitude is represented by the size and direction is represented by the angle of the arrow.",
		vectorFieldDesc: "The Vector Field function is used to composite and convert two rasters into a two-band raster that is either of data type Magnitude-Direction or data type U-V.<div><br/>The U value is sometimes referred to as the zonal velocity, and V value is sometimes referred to as the meridional velocity.</div>",
		viewshed2Name: "Viewshed",
		viewshed2Snip: "Determines the raster surface locations visible to a set of observer features, using geodesic methods.",
		viewshed2Desc: "The Viewshed function determines the raster surface locations visible to a set of observer features using geodesic methods<div><br/>The visibility of each pixel center is determined by a line-of-sight test between the target and each observer. If an observer can see the target at the pixel center, the pixel is considered visible. This tool always considers the curvature of the earth when the visibility is determined.</div>",
		watershedName: "Watershed",
		watershedSnip: "Determines the contributing area above a set of cells in a raster",
		watershedDesc: "The global Watershed function determines the contributing area above a set of pixels in a raster. Watersheds are delineated from a flow direction raster which identifies the flow direction from every pixel.",
		weightedOverlayName: "Weighted Overlay",
		weightedOverlaySnip: "Overlays several rasters using a common measurement scale and weights each according to its importance.",
		weightedOverlayDesc: "This function allows you to overlay several rasters using a common measurement scale and weight each according to its importance.",
		weightedSumName: "Weighted Sum",
		weightedSumSnip: "Weights and adds an array of rasters on a cell-by-cell basis.",
		weightedSumDesc: "The Weighted Sum function allows you to overlay several rasters, multiplying each by their given weight and summing them together.",
		windchillName: "Wind Chill",
		windchillSnip: "Combines ambient air temperature and wind-speed to compute windchill factor.",
		windchillDesc: "The Wind Chill function is useful for identifying dangerous winter conditions that, depending on exposure times to the elements, can result in frostbite or even hypothermia. Wind chill is a way to measure how cold an individual feels when wind is taken into account with already cold temperatures. The faster the wind speed, the more quickly the body will lose heat and the colder they will feel.",
		zonalRemapName: "Zonal Remap",
		zonalRemapSnip: "Remap pixels in a raster based on zones defined in another raster and zone-dependent value mapping defined in a table.",
		zonalRemapDesc: "This function allows you to remap pixels in a raster based on zones defined in another raster and zone-dependent value mapping defined in a table.",
		zonalStatisticsName: "Zonal Statistics",
		zonalStatisticsSnip: "Calculates statistics on values of a raster within the zones of another dataset.",
		zonalStatisticsDesc: "The function calculates statistics on values of a raster within the zones of another dataset. A zone is defined as all areas in the input that have the same value. These areas do not have to be contiguous. When the zone and value inputs are both rasters of the same resolution, they will be used directly. If the resolutions are different, an internal resampling is applied to make the resolutions match before the zonal operation is performed.",
		flowLengthName: "Flow Length",
		flowLengthSnip: "Calculates the upstream or downstream distance, or weighted distance, along the flow path for each cell.",
		flowLengthDesc: "This is a global raster function. This function creates a raster layer of upstream or downstream distance, or weighted distance, along the flow path for each cell.<div><br/>A primary use of the Flow Length function is to calculate the length of the longest flow path within a given basin. This measure is often used to calculate the time of concentration of a basin. This is done using the Upstream option. The function can also be used to create distance-area diagrams of hypothetical rainfall and runoff events using the weight raster as an impedance to movement downslope.</div>",
		streamOrderName: "Stream Order",
		streamOrderSnip: "Assigns a numeric order to segments of a raster representing branches of a linear network",
		streamOrderDesc: "This is a global raster function. This function creates a raster layer that assigns a numeric order to segments of a raster representing branches of a linear network.<div><br/>The output of the Stream Order function will be of higher quality if the input stream raster layer and input flow direction raster layer are derived from the same surface. If the stream raster is derived from a rasterized streams dataset, the output may not be usable because, on a cell-by-cell basis, the direction will not correspond with the location of stream cells. The results of the Flow Accumulation function can be used to create a raster stream network by applying a threshold value to select cells with a high accumulated flow. For example, cells that have more than 100 cells flowing into them are used to define the stream network. Use the Con or Set Null function to create a stream network raster where flow accumulation values of 100 or greater go to one, and the remainder are put to the background (NoData). The resulting stream network can be used in the Stream Order function. This function only supports a D8 input flow direction raster layer. D8 flow directions can be created using the Flow Direction function and run with the default flow direction type D8.</div>",
		snapPourPointName: "Snap Pour Point",
		snapPourPointSnip: "Snaps pour points to the cell of highest flow accumulation within a specified distance",
		snapPourPointDesc: "This is a global raster function. This function snaps pour points to the cell of highest flow accumulation within a specified distance.<div><br/>The Snap Pour Point function is used to ensure the selection of points of high accumulated flow when delineating drainage basins using the Watershed function. Snap Pour Point will search within a snap distance around the specified pour points for the cell of highest accumulated flow and move the pour point to that location. The output is an integer raster layer when the original pour point locations have been snapped to locations of higher accumulated flow.</div>",
		sinkName: "Sink",
		sinkSnip: "Creates a raster identifying all sinks or areas of internal drainage",
		sinkDesc: "This is a global raster function. This function creates a raster layer identifying all sinks or areas of internal drainage. A sink is a cell or set of spatially connected cells with a flow direction that cannot be assigned one of the eight valid values in a flow direction raster. This can occur when all neighboring cells are higher than the processing cell or when two cells flow into each other, creating a two-cell loop.<div><br/>The Sink function only supports a D8 input flow direction raster layer. D8 flow directions can be created using the Flow Direction function and run with default flow direction type D8. The output of the Sink function is an integer raster, with each sink being assigned a unique value. These unique values have a range that is between one and the total number of sinks. For example, if the total number of sinks were 1000, the unique values range from 1 to 1000.</div>",
		aggregateName: "Aggregate",
		aggregateSnip: "Generates a reduced-resolution version of a raster.",
		aggregateDesc: "The Aggregate function resamples an input raster to a coarser resolution based on a specified aggregation strategy. Each output cell contains the Sum, Minimum, Maximum, Mean, or Median of the input cells that are encompassed by the extent of that cell.<div><br/>You can specify the factor by which to multiply the cell size of the input raster. For example, a cell factor value of 3 would result in an output where the cell size is three times larger than that of the input raster. You can define how to handle the extent of the output if the number of rows or columns in the input is not an exact multiple of the cell factor. By default, the top and right boundaries will be expanded to cover a larger spatial extent than that of the input raster, in order to ensure all the input cells are processed. Alternatively, the top and right boundaries can be reduced to cover a smaller extent, so that the number of rows and columns processed is an exact multiple of the cell factor. You can define how NoData cells are to be handled by the aggregation calculation. The default mechanism is that input NoData cells that fall within the spatial extent of a larger cell in the output raster will be ignored when determining the value of that output cell. Alternatively, you can specify that if there is even a single input NoData cell within the spatial extent of an output cell, that cell will be NoData in the output raster.</div>",
		ccdcName: "CCDC Analysis",
		ccdcSnip: "Evaluates changes in pixel values over time using the Continuous Change Detection and Classification (CCDC) algorithm and generates model results.",
		ccdcDesc: "The CCDC Analysis function evaluates changes in pixel values over time using the Continuous Change Detection and Classification (CCDC) algorithm and generates a multidimensional raster containing the model results. It is only supported in conjunction with the Detect Change Using Change Analysis function in a raster function template. To produce a raster output, connect the CCDC Analysis function with the Detect Change Using Change Analysis function, save as a raster function template, and run Raster Analysis with the function template.<div><br/>This function uses the Continuous Change Detection and Classification (CCDC) algorithm to evaluate changes in pixel values over time for a stack of images. In a time series of optical imagery or imagery derivatives (for example, NDVI), pixel values can fluctuate for several reasons: 1. Seasonal change -- Pixel value changes reflect changes in vegetation due to seasonal variability of temperature and precipitation. In the Northern Hemisphere, for example, we expect to see higher density of green vegetation in summer compared to winter; 2. Gradual change -- Pixel value changes reflect trends in vegetation or surface water due to climate variability or long-term land management practices. For example, bare soil may gradually increase in area due to long-term decline in precipitation; and 3. Abrupt change -- Pixel value changes reflect land cover changes that occur suddenly due to deforestation, urban development, natural disaster, and so on. The CCDC algorithm identifies all three change types with the primary purpose of identifying abrupt change. Harmonic regression and trend models are fitted to the data to estimate seasonal and gradual change, and sudden deviations from the trend models are indications of abrupt change.<div><br/>The CCDC algorithm was originally designed for Landsat TM, Landsat ETM+ and Landsat OLI data Surface Reflectance or Brightness Temperature data. However, Detect Change Using Change Analysis fucntion in conjunction with this function will detect change for multiband imagery from any supported sensor, as well as single band imagery derivatives such as band indexes. For example, you can perform continuous change detection on a Normalize Difference Vegetation Index (NDVI) raster, because abrupt changes in NDVI can be indicative of deforestation.</div>",
		computeChangeName: "Compute Change",
		computeChangeSnip: "Computes the difference between two categorical or continuous raster datasets.",
		computeChangeDesc: "The Compute Change function can be used to enumerate the differences between two classified rasters for land cover change analysis, or it can be used to examine changes between two single-band continuous rasters such as elevation, temperature, canopy cover, and so on.",
		detectChangeName: "Detect Change Using Change Analysis",
		detectChangeSnip: "Generates a raster layer containing pixel change information using the output change analysis raster.",
		detectChangeDesc: "<div>The Detect Change Using Change Analysis function generates a raster layer containing pixel date-of-change information using the change analysis raster. The change analysis raster must be generated by the Analyze Change Using CCDC tool or the Analyze Changes Using LandTrendr tool, or the CCDC Analysis raster function or the LandTrendr Analysis raster function.</div><br><div>This raster function can be combined with the CCDC Analysis raster function or the LandTrendr Analysis raster function in a raster function template. To produce a permanent raster output, connect the CCDC Analysis or LandTrendr Analysis function output to the Detect Change Using Change Analysis function, save as a raster function template, and run Raster Analysis with the template.</div><br><div>The <strong>Change Type</strong> parameter indicates the information that is generated. Information is extracted from the change analysis raster. When running this function on the output from the CCDC function/tool, you can choose    from the following options:</div><ul><li><strong>Time of latest change</strong>--The most recent date and time at which a pixel was flagged as being changed.</li><li><strong>Time of earliest change</strong>--The earliest date and time at which a pixel was flagged as being changed.</li><li><strong>Time of largest change</strong>--The date and time at which the calculated change was the most significant for a pixel.</li><li> <strong>Number of changes</strong>--The total number of times the pixel changed.</li></ul><div>When running this function on the output from the LandTrendr function/tool, the following additional options are available:</div><ul><li><strong>Time of longest change</strong>--The date at which a pixel was flagged as being changed, at the beginning or end of the longest period of change.</li><li><strong>Time of shortest change</strong>--The date at which a pixel was flagged as being changed, at the beginning or end of the shortest period of change.</li><li><strong>Time of fastest change</strong>--The date at which a pixel was flagged as being changed, at the beginning or end of the fastest period of change.</li><li><strong>Time of slowest change</strong>--The date at which a pixel was flagged as being changed, at the beginning or end of the slowest period of change.</li></ul><div>The output raster is a multiband raster in which each band contains change information depending on the change type    selected and the maximum number of changes specified. For example, if <strong>Change Type</strong> is set to <strong>Time of Earliest Change</strong> and <strong>Maximum Number of Changes</strong> is set to 2, the function calculates the two earliest dates when change occurred throughout the time series for every pixel. The result is a raster in which the first band contains the dates of the earliest change per pixel, and the second band contains the    dates of the second-earliest change per pixel.</div><br><div>When applying this function on the output from the LandTrendr tools, you can choose whether to extract the date that marks the beginning of a change or the end of a change using the <strong>Segment Date</strong> parameter. For example, to understand how the most recent change in the time series started, set the <strong>Change Type</strong> to <strong>Time of latest change</strong> and the <strong>Segment Date</strong> to <strong>Beginning of segment</strong>.</div><br><div>Use the following filtering parameters to extract more specific dates of change from your change analysis raster:</div><ul><li><strong>Filter by year</strong>--Identify changes that occurred within a specific time period, for example, if you are looking for changes that occurred in a landscape during five years of drought.</li><li><strong>Filter by duration</strong>--Identify changes that occurred over a given range of years, for example, if you are only looking for abrupt changes that took place over 1 or 2 years. You can calculate the duration you are interested in using the formula <strong>end year - start year +1</strong>. Gaps in the time series will be included.</li><li><strong>Filter by magnitude</strong>--Identify changes of a given magnitude, for example, if you are only looking for large changes in the vegetation index NDVI. Magnitude is an absolute value, so the minimum and maximum values cannot be negative. To specify directional change, use the <strong>Change Direction</strong> parameter.</li></ul>",
		distanceAccumulationName: "Distance Accumulation",
		distanceAccumulationSnip: "Calculates accumulated distance for each cell to sources, allowing for straight-line distance, cost distance, true surface distance, as well as vertical and horizontal cost factors.",
		distanceAccumulationDesc: "Distance Accumulation calculates the distance to each location in the study area to the closest, or least cost, source. If only the sources are provided for input, then a straight-line distance is calculated to each location in the study area. If both sources and barriers are used as input, then Distance Accumulation calculates the straight-line distance around barriers. For both the source raster and the barrier raster, the background value should be NoData, while sources and barriers are represented with valid cell values. Valid values include zero. <div><br/>When a surface raster is supplied as input, then the actual surface distance between cells is calculated. To perform cost analysis using Distance Accumulation, a cost surface is needed. If a cost surface is provided, then the result is an accumulated cost distance raster. When horizontal and vertical factors are supplied, then directionality is considered as cost is accumulated. There are four source characteristics that can be used. These characteristics, which can be either of the source or the movers from the source, are controlled by specific parameters: 1. Initial accumulation: sets the initial cost before the movement begins. 2. Maximum accumulation: specifies how much cost a source can accumulate before reaching its limit. 3. Multiplier to apply to costs: specifies the mode of travel or magnitude at the source. 4. Travel direction: identifies whether the mover is starting at a source and moving to non-source locations, or, is starting at non-source locations and moving back to a source.<div><br/>By default, the result from Distance Accumulation is a single band, which is the distance accumulation raster. However, a second band can also be created, the back direction band.  This band indicates from each location in the study area what direction to go to get to the least cost source.  Both bands will be needed to determine optimal paths within the study area. To generate a path, first use the Extract Band function to extract the distance accumulation raster and the back direction raster. Use these layers as input to the Cost Path function. In the function, use the distance accumulation raster as the Cost Distance Raster input, and the back direction raster as the Cost Backlink Raster input.</div>",
		distanceAllocationName: "Distance Allocation",
		distanceAllocationSnip: "Calculates distance allocation for each cell to the provided sources based on straight-line distance, cost distance, true surface distance, as well as vertical and horizontal cost factors.",
		distanceAllocationDesc: "Distance Allocation calculates the which source each location in the study area is allocated to. If only the sources are provided for input, then locations are allocated using a straight-line distance to the closest source. If both sources and barriers are used as input, then Distance Allocation calculates the straight-line distance around barriers to determine which source a location is allocated to. For both the source raster and the barrier raster, the background value should be NoData, while sources and barriers are represented with valid cell values. Valid values include zero.<div><br/>To perform cost analysis using Distance Allocation, a cost surface is needed. If a cost surface is provided, then the result is an allocation raster based on accumulative cost, not on straight line distance. When horizontal and vertical factors are supplied, then directionality is considered as cost is accumulated. When a surface raster supplied as input, then the actual surface distance covered when passing between cells is calculated when allocation is determined. There are four source characteristics that can be used. These characteristics, which can be either of the source or the movers from the source, are controlled by specific parameters: 1. Initial Accumulation: sets the initial cost before the movement begins. 2. Maximum Accumulation: specifies how much cost a source can accumulate before reaching its limit. 3. Multiplier to apply to costs: specifies the mode of travel or magnitude at the source. 4. Travel direction: identifies whether the mover is starting at a source and moving to non-source locations, or, is starting at non-source locations and moving back to a source.<div><br/>By default, the result from Distance Allocation is a single band, which is the distance allocation raster. Checking the Boolean option Generate source row and column as additional bands in output will result in a multiband raster consisting of three bands. The first band is the distance allocation band, the second band contains a row index, and the third band contains a column index. These indices identify the location of the source cell that is the least accumulated cost distance away. The source row index and source column index can be used together to perform intensity mapping. If you query any location in your study area across bands two and three, you will know the row and column of the least cost source for that location.</div>",
		eucBackDirectionName: "Euclidean Back Direction",
		eucBackDirectionSnip: "Calculates, for each cell, the direction, in degrees, to the neighboring cell along the shortest path back to the closest source while avoiding barriers.",
		eucBackDirectionDesc: "The Euclidean Back Direction function results in a continuous floating-point raster that represents the direction in degrees back to the closet source while avoiding barriers, if barriers are provided.<div><br/>The inputs to Euclidean Back Direction are the source that direction will be calculated to. An optional input is a raster that represents barriers within the study area. For both the source raster and the barrier raster, the background value should be NoData, while sources and barriers are represented with valid values. Valid values include zero. By default, the calculation will process to the combined extent of the sources and barriers, plus 2 rows and columns. If the analysis is only needed within a specified distance from the sources, then the Maximum Distance parameter can be used. Euclidean Back Direction supports both a Planar method and a Geodesic method in the calculation. The Planar method calculation will be performed on a projected flat plane using a 2D Cartesian coordinate system. The Geodesic method calculation will be performed on the ellipsoid, which means that regardless of input or output projection, the results do not change.<div><br/>The result from the Euclidean Back Direction function can be used in conjunction with the result from the Euclidean Distance function to determine the shortest paths from locations within the study area back to the source. Both the Euclidean Back Direction result and the Euclidean Distance result are used in the Cost Path function along with destinations to generate the shortest paths.</div>",
		expandName: "Expand",
		expandSnip: "Expands selected zones of a raster by zones by a specified number of cells.",
		expandDesc: "With the Expand global function, you can generalize, or simplify, rasters by making particular zones larger. You can also control the amount of generalization that will occur.<div><br/>The zones you select will increase in size by expanding into other zones. Conceptually, the selected Zone Values can be viewed as foreground zones, while the other values remain background zones. The foreground zones can expand into the background zones.<div><br/>The amount of generalization can be controlled with the Number of Cells parameter. By default, this value is 1, which means that the selected zones will expand by the amount corresponding to one cell's size. To increase the degree of generalization, you can specify a larger value for this parameter. Conceptually, this is like running the tool as many times as the number specified, with the results of the previous run being the input into the subsequent iteration.</div>",
		trendAnalysisName: "Generate Trend",
		trendAnalysisSnip: "Estimates the trend for each pixel along a dimension for one or more variables in a multidimensional raster.",
		trendAnalysisDesc: "<div>This function can be used to fit data along a linear, harmonic, or polynomial trend line, or it can be used to perform trend detection using the Mann-Kendall or Seasonal-Kendall test.</div><br><div>The output trend raster generated with this function is used as the input to the <strong>Predict Using Trend</strong> function.</div><br><div>The Mann-Kendall and Seasonal-Kendall tests are used to determine whether there is a monotonic trend in the data. They are nonparametric, meaning they do not assume a specific distribution of data. The Mann-Kendall test does not consider serial correlation or seasonal effects. If the data is seasonal, the Seasonal-Kendall test is more appropriate.</div><br><div>If the tool is used to perform either the Mann-Kendall or Seasonal-Kendall test, the output is a five-band raster as follows:</div><ul><li>Band 1 = Sen's slope</li><li>Band 2 = p-value</li><li>Band 3 = Mann-Kendall score (S)</li><li>Band 4 = S Variance</li><li>Band 4 = S Variance</li><li>Band 5 = Z-score</li></ul><div>The outputs from the Mann-Kendall or Seasonal-Kendall test can be used to determine which pixels in your multidimensional time series have a statistically significant trend. You can use this information in conjunction with the linear, harmonic, or polynomial trend analysis to extract significant trends in your time series. You can generate a mask including pixels with significant p-values, apply the mask to the multidimensional raster, and use this masked multidimensional raster as the input to the tool to perform linear, harmonic, or polynomial trend analysis.</div><br><div>There are three trend line options for fitting a trend to the variable values along a dimension: linear, polynomial, and harmonic.</div><br><div>For linear trend analysis, the output is a three-band raster as follows:</div><ul><li>Band 1 = Slope</li><li>Band 2 = Intercept</li><li>Band 3 = Root Mean Square Error (RMSE) or the error around the line of best fit</li></ul><div>For polynomial trend analysis, the number of bands in the output depends on the polynomial order. Second-order polynomial fitting produces a four-band raster as follows:</div><ul><li>Band 1 = Polynomial_2</li><li>Band 2 = Polynomial_1</li><li>Band 3 = Polynomial_0</li><li>Band 4 = RMSE</li></ul><div>Third-order polynomial fitting produces a five-band raster as follows:</div><ul><li>Band 1 = Polynomial_3</li><li>Band 2 = Polynomial_2</li><li>Band 3 = Polynomial_1</li><li>Band 4 = Polynomial_0</li><li>Band 5 = RMSE</li></ul><div>For harmonic trend analysis, the number of bands in the output depends on the harmonic frequency. When the frequency is set to 1, the output is a five-band raster as follows:</div><ul><li>Band 1 = Slope</li><li>Band 2 = Intercept</li><li>Band 3 = Harmonic_sin1</li><li>Band 4 = Harmonic_cos1</li><li>Band 5 = RMSE</li></ul><div>When the frequency is set to 2, the output is a seven-band raster as follows:</div><ul><li>Band 1 = Slope</li><li>Band 2 = Intercept</li><li>Band 3 = Harmonic_sin1</li><li>Band 4 = Harmonic_cos1</li><li>Band 5 = Harmonic_sin2</li><li>Band 6 = Harmonic_cos2</li><li>Band 7 = RMSE</li></ul><div>The <strong>Length of Cycle</strong> parameter for harmonic trend analysis is used to indicate the number and length of cycles you expect to see in your data throughout a day or year. For example, if you expect your data to go through two cycles of variation in one year, the length of cycle will be 182.5 days or 0.5 years. If you have temperature data collected every three hours, and there is one cycle of variation per day, the length of cycle is one day.</div><br><div>The <strong>Frequency</strong> parameter for harmonic trend analysis is used to describe the harmonic model to fit to the data. If the frequency is set to 1, a combination of linear and the first order harmonic curve will be used to fit the model. If the frequency is 2, a combination of linear, first order harmonic curve, and second order harmonic curve will be used to fit the data. If the frequency is 3, an additional third order harmonic curve will be used to model the data, and so on.</div><br><div>Model goodness-of-fit statistics can be generated as optional outputs. The root mean-square error (RMSE), R-squared, and the trend slope p-value can be calculated and symbolized. Symbolize the output trend raster layer using the <strong>RGB</strong> symbology and specify the statistics as the red, green and blue bands.</div><br>",
		spectralUnmixingName: "Linear Spectral Unmixing",
		spectralUnmixingSnip: "Performs subpixel classification and calculates the fractional abundance of different land cover types for individual pixels.",
		spectralUnmixingDesc: "The Linear Spectral Unmixing function calculates the fractional cover for individual pixels that contain multiple land cover types. It generates a multiband layer, where each band corresponds to the fractional abundance of each land cover class. For example, you can use it to perform land cover classification on a multispectral image to identify photosynthetic vegetation, bare soil, and dead or nonphotosynthetic vegetation.<div><br/>The order of the output multiband raster follows the order of the input spectral profile. The number of classes cannot exceed the number of bands in the input raster. For example, you cannot extract information about more than 8 classes from an 8-band raster.</div>",
		multidimensionalFilterName: "Multidimensional Filter",
		interpolateRasterByDimensionFunctionName: "Interpolate Raster by Dimension",
		interpolateRasterByDimensionFunctionSnip: "Interpolates a multidimensional raster at specified dimension values using adjacent slices.",
		interpolateRasterByDimensionFunctionDesc: "<p>This function allows you to estimate pixel values for an undefined dimension slice in a multidimensional raster. For example, if you have a dataset containing ocean temperature at surface level and at 100 meters below sea level and you want to estimate the temperature at 50 meters below sea level, you can use this function to get an estimate at that depth using the By Values dimension definition.</p><p>You can also downsample a monthly dataset into a daily dataset using the By Interval dimension definition and specifying the Step parameter value as 1 and the Unit parameter value as Days.</p><p>Use the By Target Raster dimension definition to estimate the value for the Target Raster.</p>",
		multidimensionalFilterSnip: "Creates a raster layer from a multidimensional raster dataset or a multidimensional raster layer by slicing data along defined variables and dimensions.",
		multidimensionalFilterDesc: "The Multidimensional Filter creates a multidimensional raster layer by filtering and extracting a subset of variables from a multidimensional raster. For example, you have a multidimensional dataset that contains 30 years of monthly precipitation data, and you only want to extract data for each January to see how precipitation has changed for that month.<div><br/>Use the Dimension Definition parameter to slice dimensions using an interval, a value, or a range of values. For example, if you have 10 years of ocean salinity data, collected monthly and at every 2 meters depth up to 500 meters, you might use the different dimension definition options for the following scenarios. Scenario 1: Extract salinity data for the month of January over the 10-year period. Choose By Values, set Dimension to StdTime, and set Values to January. Scenario 2: Slice salinity data over a depth range from 0 to 150 meters. Choose By Ranges, set Dimension to StdZ, and set Minimum Value to -150 and Maximum Value to 0. Scenario 3: Extract salinity data for the first 10 days of every January over a 10-year period. Choose By Iteration, set Dimension to StdTime, set Start of first iteration and End of first iteration to the corresponding start and end of the iteration period, set Step to 1, and set Unit to Years.</div>",
		multidimensionalRasterName: "Multidimensional Raster",
		multidimensionalRasterSnip: "Adds multidimensional data to a map as a multidimensional raster layer.",
		multidimensionalRasterDesc: "The Multidimensional Raster function adds multidimensional data to a map as a multidimensional raster layer. This function is useful when performing raster analysis workflows using a function chain.<div><br/>Supported multidimensional raster datasets include netCDF, GRIB, HDF, and Esri's CRF. Multidimensional mosaic datasets are also supported.</div>",
		optimalPathAsRasterName: "Optimal Path As Raster",
		optimalPathAsRasterSnip: "Calculates the least-cost path from a source to a destination.",
		optimalPathAsRasterDesc: "This global function produces an output raster that records the optimal path or paths from selected locations to the closest source cell defined within the accumulative cost surface, in terms of cost distance.<div><br/>One or more of the weighted cost functions (Distance Accumulation or Distance Allocation) are generally required to be run prior to running the Optimal Path As Raster function to create the input distance accumulation and back direction rasters. These are mandatory input raster layers to the Optimal Path function. The values on the output optimal path represent the number of paths at a given location. In many cases, paths follow the same route, leaving a source and then diverging to go to different destinations. For example, a value of one indicates that there is only one optimal path at a given location, while a value of five means at that location there are five optimal paths going through that cell in the study area.<div><br/>The input destination data must be a raster layer. The set of destination cells consists of all cells in the input raster that have valid values. Cells that have NoData values are not included in the set. The value zero is considered a legitimate destination. A destination raster can be created using the extraction tools. If you have destination or source features, you can convert them to raster using the Rasterize Features function. Use the distance accumulation or back direction raster as the Raster input to the rasterization function. This will ensure the feature is rasterized using the same cell size, extent, and spatial reference as the other rasters going into the Optimal Path As Raster function. The Optimal Path As Raster function can also be used to derive the path of least resistance down a digital elevation model (DEM). In this case, use the DEM for the input distance accumulation raster and the output from the Flow Direction function for the back direction Raster.</div>",
		trendName: "Predict Using Trend",
		trendSnip: "Computes a forecasted multidimensional raster layer using the output trend raster from the Generate Trend function or Generate Trend Raster geoprocessing tool.",
		trendDesc: "The Predict Using Trend function computes a forecasted multidimensional raster layer using the output trend raster from the Generate Trend function or Generate Trend Raster geoprocessing tool.",
		rasterCollectionName: "Process Raster Collection",
		rasterCollectionSnip: "Processes each slice in a multidimensional raster or each item in a mosaic raster. This function can also aggregate multiple slices into a single slice.",
		rasterCollectionDesc: "The Process Raster Collection function processes each slice in a multidimensional raster or each item in a mosaic raster. This function can also aggregate multiple slices into a single slice.<div><br/>This function processes each slice in multidimensional raster or mosaic raster using a raster function template. This function supports the following options: 1. Specify a raster function template for Item Function. For example, you have a mosaic dataset that contains 20 years of Landsat imagery and you want to calculate the NDVI for each scene in the time series. For Item Function, specify a raster function template that contains the NDVI raster function. 2. Specify a raster function template for the Aggregation Function. For example, you have a multidimensional raster that contains 10 years of daily temperature data and you want to calculate the maximum temperature for each year. In the Aggregation Function, specify a raster function template that contains the Cell Statistics function, with the operation set to Maximum. Under Aggregation Definition, set Dimension to StdTime, set Type to Interval Keyword, and set the Keyword Interval to Yearly. Please note that if the input mosaic dataset is not multidimensional, the aggregation function will not honor the aggregation definition. The aggregation function will aggregate all items or each group into one if they are defined in the aggregation function template. For more information on the use of groups in a mosaic dataset, see Using Mosaic Dataset Items in Raster Function Templates. 3. Specify a raster function template for Processing Function. The function or function chain in this template is used to display the new processed raster. For example, specify a raster function template that contains the Colormap function to change how the processed raster layer is displayed. Please note that if the input is a multidimensional raster, the processing function is applied to the current display slice. If the input is a mosaic layer or mosaic dataset, the processing function is applied to the mosaic raster using the First method to resolve overlaps. 3. Specify templates for any combination of the three functions. For example, you have a mosaic dataset that contains time series Landsat imagery and you want to generate a composite image of maximum NDVI. For Item Function, specify a raster function template that contains the NDVI raster function. For Aggregation Function, specify a raster function template that contains the Cell Statistics function, with the operation set to Maximum. For Processing Function, specify a raster function template that contains the Colormap function. Please note that the function processing order follows the order of the input parameters. For example, the Item Function will be processed first.</div>",
		randomName: "Random",
		randomSnip: "Creates a raster with random pixel values drawn from a pseudorandom distribution. Several distributions and random number generators are supported.",
		randomDesc: "The Random function creates a raster with random pixel values that can be used in raster function templates or mosaic datasets.<div><br/>While many functions work on one or more input rasters, the Random function does not require an input raster. This means that it behaves more like a raster dataset than a function, so particular care must be taken when adding it to or removing it from the function chain.</div>",
		shrinkName: "Shrink",
		shrinkSnip: "Shrinks the selected zones by a specified number of cells by replacing them with the value of the cell that is most frequent in its neighborhood.",
		shrinkDesc: "With the Shrink global function, you can generalize, or simplify, rasters by making particular zones smaller. You can also control the amount of generalization that will occur.<div><br/>The zones you select will shrink, or reduce in size, by having cells from surrounding zones expand into them. Conceptually, the selected Zone Values can be viewed as foreground zones, while the other values remain background zones. The cells in the foreground zones can be replaced by cells in the background zones. Thin islands inside a zone, which can be viewed as sharing boundaries with the zone, may also be replaced.<div><br/>The amount of generalization can be controlled with the Number of Cells parameter. By default, this value is 1, which means that the selected zones will shrink by the amount corresponding to one cell's size. To increase the degree of generalization, you can specify a larger value for this parameter. Conceptually, this is like running the tool as many times as the number specified, with the results of the previous run being the input into the subsequent iteration.</div>",
		trendToRGBName: "Trend To RGB",
		trendToRGBSnip: "Converts a trend raster to a three-band (red, green, and blue) raster.",
		trendToRGBDesc: "The Trend To RGB function converts a trend raster to a three-band (red, green, and blue) raster. The trend raster is generated from the Generate Trend raster function or the CCDC Analysis raster function.<div><br/>This function is useful for visualizing model coefficient data from the Generate Trend function or the CCDC Analysis function. Both functions estimate trends in changing pixel values, but the results of the functions are difficult to interpret directly.<div><br/>Like many raster functions, you may need to use Dynamic Range Adjustment (DRA) to better display the results of this function.</div>",
		landTrendrName: "LandTrendr Analysis",
		landTrendrSnip: "Evaluates changes in pixel values over time using the Landsat-based detection of trends in disturbance and recovery (LandTrendr) method and generates a change analysis raster containing the model results.",
		landTrendrDesc: "This raster function can only be used as input to the Detect Change Using Change Analysis raster function. To generate a raster output, connect the LandTrendr Analysis function to the Detect Change Using Change Analysis function in a raster function template, and use the template as input in the Generate Raster From Raster Function geoprocessing tool. The result is a raster containing information regarding the time at which pixel values changed.<div><br>The purpose of this raster function is to extract changes in an observed feature, so the ideal input multidimensional imagery should capture a consistent observation throughout time and should not include atmospheric or sensor interference, clouds, or cloud shadow. The best practice is to use data that has been normalized and can be masked using a QA band, for example Landsat Collection 1 Surface Reflectance products with a cloud mask.<div><br>The function performs analysis on one image per year, and the number of yearly slices must be equal to or greater than the value specified in the <strong>Minimum Number of Observations</strong> parameter. It is recommended that you have at least six years of data.<div><br>If you have monthly, weekly, or daily data, it is recommended that you select several images from each year (preferably from the same season), remove clouds and cloud shadow, and combine the images to generate a single image that captures the observation well. If monthly, weekly, or daily data is provided as the input multidimensional raster, the function will identify one slice for analysis based on the date closest to that provided in the <strong>Snapping Date</strong> parameter.<div><br>A feature in a landscape will often take time to recover from a nonpermanent change such as a forest fire or insect infestation. To control the rate of recovery recognized by the model, set the Recovery Threshold parameter. A distinct segment cannot have a recovery rate that is faster than 1/recovery threshold.<div><br>The recovery from a change in landscape can occur in the positive or negative direction. For example, when a landscape experiences forest loss, a time series of vegetation index values shows a drop in index values, and the recovery shows a gradual increase in vegetation index values, or a positive recovery trend. Specify the direction of recovery trend with the <strong>Recovery Has Increasing Trend</strong> parameter.",
		aggregateMultidimensionalName: "Aggregate Multidimensional",
		aggregateMultidimensionalSnip: "Combines existing multidimensional raster variable data along a dimension.",
		aggregateMultidimensionalDesc: "The Aggregate Multidimensional function creates a multidimensional raster layer by combining existing multidimensional raster variable data along a dimension.<div><br>Use the <strong>Dimension Definition</strong> parameter to first filter the input data you want to aggregate. For example, if you have 30 years of monthly data, but you only want to create an aggregated layer for the first 15 years, you can use the <strong>Dimension Definition</strong> parameter to specify the years to include in the analysis.<div><br><ul><li>Extract salinity data for the month of January over the 10-year period. Choose <strong>By Values</strong>, set <strong>Dimension</strong> to <strong>StdTime</strong>, and set <strong>Values</strong> to <strong>January</strong>.</li><li>Slice salinity data over a depth range from 0 to 150 meters. Choose <strong>By Ranges</strong>, set <strong>Dimension</strong> to <strong>StdZ</strong>, and set <strong>Minimum Value</strong> to <strong>-150</strong> and <strong>Maximum Value</strong> to <strong>0</strong>.</li><li>Extract salinity data for the first 10 days of every January over a 10-year period. Choose <strong>By Iteration</strong>, set <strong>Dimension</strong> to <strong>StdTime</strong>, set <strong>Start of first iteration</strong> and <strong>End of first iteration</strong> to the corresponding start and end of the iteration period, set <strong>Step</strong> to <strong>1</strong>, and set <strong>Unit</strong> to <strong>Years</strong>.</li></ul><div><br>Use the <strong>Aggregation Definition</strong> parameters to choose the dimension to assess and the aggregation interval using a keyword, a value, or a range of values. For example, if you have 30 years of sea surface temperature data, collected daily and at every 5 meters depth up to 100 meters, you can use the different interval options for the following scenarios:<div><br><ul><li>Aggregate daily temperature data into monthly data, where the result is a multidimensional raster with 12 time slices, and each slice is the aggregate of each month across all the years. Choose <strong>Interval Keyword</strong> and set the keyword to <strong>Recurring Monthly</strong>.</li><li>Aggregate daily temperature data into monthly data, where the result is a multidimensional raster with 360 slices, or 12 time slices per year (30 years x 12 months = 360 slices). Choose <strong>Interval Keyword</strong> and set the keyword to <strong>Monthly</strong>.</li><li>Aggregate monthly temperature data into 4-month intervals. Choose <strong>Interval Value</strong>, set <strong>Value Interval</strong> to 4, and set <strong>Unit</strong> to <strong>Months</strong>.</li><li>Aggregate temperature data from 0 to 25 meters, then from 25 to 50 meters, then from 50 to 100 meters. Choose <strong>Interval Ranges</strong> and specify minimum and maximum depths as <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Merge Rasters",
		mergeRastersSnip: "Combines multiple raster datasets spatially, or across variables and dimensions.",
		mergeRastersDesc: "This function creates a merged raster from a list of rasters. For example, if you have a mosaic dataset that contains 30 years of monthly precipitation data and another dataset with 10 years of monthly temperature data, you can combine them into a multidimensional raster with both variables. <div><br>If the input multidimensional rasters contain different variables, the output multidimensional raster will contain all the variables. <div><br>If the input multidimensional rasters contain different dimensions or dimension values, the output multidimensional raster will include all the dimensions and dimension values. <div><br>If the input multidimensional rasters contain the same dimensions and variables but different spatial extents, the output multidimensional raster will include the variables and dimensions across the merged spatial extents.<div><br>This function can also be used when you have multiple rasters that you want treated as a single item, such as calculating the same statistics for all, or when color balancing so you don't need to color balance each image separately. This is useful when working with imagery stored as separate tiles due to file size constraints; this way, the tiles will be treated as part of the same image.",
		boundaryCleanName: "Boundary Clean",
		boundaryCleanSnip: "Smooths the boundary between zones.",
		boundaryCleanDesc: "<p>The function generalizes, or simplifies, rasters by smoothing the boundaries between zones. The function provides options for controlling how the cells of the zones in the input influence the smoothing and the amount of smoothing that will be applied. Each input cell is evaluated using its eight immediate neighbors.</p><p>The smoothing process first sorts the neighbor cells by a particular priority. The priority determines which zone from the neighboring cells can replace the value of the processing cell in the output.</p><p>The priority can be based on either the value of the zones or the size of the zones. The <strong>Sort type</strong> parameter determines the sorting type to use. </p><p>The default <strong>Do not sort</strong> setting assesses the priority based on the value of the zones. Cells from zones with larger values will have a higher priority to expand into zones with smaller values.</p><p>The size, or total area, of the zones can be used to sort the priority. With the <strong>Descending</strong> setting, the zones are sorted by size in descending order. The zones with larger total areas will have the priority to expand into zones with smaller areas. With the <strong>Ascending</strong> setting, the opposite is true: zones with smaller total areas will have the priority to expand into zones with larger total areas.</p><p>The amount of smoothing is controlled by the <strong>Run expansion and shrinking twice</strong> parameter, which determines the number of times the expand and shrinking process will be performed.</p><p>With the unchecked setting, the expand and shrink process is performed once. With the checked setting , the expand and shrink process is performed twice, resulting in an additional degree of smoothing of the zone boundaries.</p><p>If the values of all eight neighbor cells are the same as the processing cell, the output cell will retain the value of the input cell.</p>",
		predictUsingRegressionName: "Predict Using Regression",
		predictUsingRegressionSnip: "Computes a predicted raster based on raster data inputs and a regression model. The regression model is the output from the \"Train Random Trees Regression Model\" raster geoprocessing tool.",
		predictUsingRegressionDesc: "<p>The regression model is defined in an Esri regression definition (.ecd) file. It contains all the information for a specific dataset or a set of datasets, and the regression model, and is generated by the <strong>Train Random Trees Regression Model</strong> raster geoprocessing tool.</p><p>The input can be a single band, a multiband, or a multidimensional raster, or a list of these types. The types of the input rasters must be the same type of raster trained by the regression model.</p><ul><li>When input is a multiband raster, each band is treated as a predictor variable. The bands must be in the same order as the multiband input for the regression model training tool.</li><li>When input is a multidimensional raster, each variable is treated as a predictor variable, and the variable must be single band and have a time dimension. The variable order and names must be the same as the input when the regression model was trained. The output is a multidimensional raster.</li><li>The input can be a list of items. The number of the items and the order of the items must match the input when the regression model was trained.</li></ul>",
		dimensionalMovingStatisticsName: "Dimensional Moving Statistics",
		dimensionalMovingStatisticsSnip: "Calculates statistics over a moving window on multidimensional data along a specified dimension.",
		dimensionalMovingStatisticsDesc: "<p>The Dimensional Moving Statistics function calculates various statistics within a predefined window for all dimension values along a dimension. This function takes a multidimensional raster layer as input and creates a multidimensional raster layer as output that has the same dimensional size as the input layer.</p><p>You can specify a dimension for which dimension values are considered during calculation. By default, it calculates along the first non-spatial dimension. You can also specify a window size by specifying the Backward Window and Forward Window parameters.</p><p>When the Statistics Type is set to Percentile, the Percentile Value and Percentile Interpolation Type parameters become available. You can use these parameters to specify the percentile to calculate and choose the interpolation type to use, respectively. When the Statistics Type is set to Circular Mean, the Circular Wrap Value parameter becomes available. The circular wrap value is used to convert a linear value to the range of a given circular mean.</p>",
		terrainFlattenFunctionName: "Terrain Flatten",
		terrainFlattenFunctionSnip: "Corrects the input synthetic aperture radar (SAR) data for radiometric distortions due to topography.",
		terrainFlattenFunctionDesc: "<p>The Terrain Flatten raster function corrects the input synthetic aperture radar (SAR) data for radiometric distortions due to topography.</p><p>The input radar data must first be calibrated to beta nought. Use the Apply Radiometric Calibration tool to calibrate radar data to beta nought.</p><p>If the input DEM does not span the entire SAR dataset, the tool will output NoData values for the pixels outside of the DEM extent for gamma nought, sigma nought, scattering area, and geometric distortion outputs. For the geometric distortion mask output, the tool will output undetermined values for pixels outside of the DEM extent.</p><p>The input DEM must be in the WGS 1984 (EPSG:4326) geographic coordinate system.</p>",
		createColorCompositeFunctionName: "Create Color Composite",
		createColorCompositeFunctionSnip: "Creates a three-band raster from a multiband raster dataset in which each band can use an algebraic calculation based on band algebra.",
		createColorCompositeFunctionDesc: "<p>The Create Color Composite raster function creates a three-band raster from a multiband raster dataset in which each band can use an algebraic calculation based on band algebra.</p><p>When defining a band arithmetic algorithm, you can enter a single-line algebraic formula for each expression to create a multiband output. The supported operators are unary, plus (+), minus (-), times (*), and divide (/).</p><p>When using a Band ID in an expression, identify the band by prefixing B or b to the band number.</p><p>A common band combination used for synthetic aperture radar (SAR) in linear units is VV for red, VH for green, and VV/VH for blue. If the input data is in decibels, the band combination should be VV for red, VH for green, and VV-VH for blue.</p>",
		surfaceParametersName: "Surface Parameters",
		surfaceParametersSnip: "Determines parameters of a surface raster such as aspect, slope, and several types of curvatures using geodesic methods.",
		surfaceParametersDesc: "<p>The Surface Parameters function determines parameters of a surface raster such as aspect, slope, and several types of curvatures using geodesic methods.</p><p>This function can be used for the following applications:</p><ul><li>Calculate aspect and slope using geodesic methods.</li><li>Calculate different types of curvatures from an input surface raster, for example, <strong>Tangential (normal contour) curvature</strong> which characterizes topographic convergence and divergence of flow across the surface.</li></ul>",
		leastCostCorridorName: "Least Cost Corridor",
		leastCostCorridorSnip: "Calculates the sum of two accumulative cost distance rasters with the option to apply a threshold based on percentage or accumulative cost.",
		leastCostCorridorDesc: "<p>The input rasters should be distance accumulation and back direction rasters output from the <strong>Distance Accumulation</strong> or <strong>Distance Allocation</strong> function. These should be based on cost distance, and the same parameter settings should be used when creating the layers for each source. No parameters that depend on directionality (horizontal factor, vertical factor, and travel direction) should be used in creating these rasters.</p><p>The values in the output corridor raster are the sum of the accumulative cost to reach a given location with the same units as the input accumulative cost distance rasters.</p><p>If a specified <strong>Threshold</strong> value is greater than the maximum accumulative cost when the two distance accumulation rasters are summed, the output corridor raster will cover the same area as the input accumulative rasters.</p><p>If a specified threshold value is less than the minimum value in the corridor raster, a warning message is returned, and the output raster will be empty.</p><p>The output corridor raster may contain cells with slightly greater accumulative costs than the threshold value. This is from the back direction rasters using cells assigned slightly higher costs than the threshold to connect disconnected cells to the corridor.</p>",
		geometricMedianName: "Geometric Median",
		geometricMedianSnip: "The Geometric Median function calculates the geometric median across pixels in a time series of multiband imagery.",
		geometricMedianDesc: "<p>This function reduces noise and outliers in time series imagery by calculating a geometric median pixel for each pixel array across the image stack. The algorithm maintains the spectral relationships between bands in the pixel spectra, so the output can be used in analysis, such as vegetation indices.</p><p>Clouds and shadows should be masked using the dataset QA band before applying this function.</p><p>If the input image is floating point, such as surface reflectance with values between 0 and 1, an epsilon value of 0.001 should produce quality results.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Color Scheme Type",
		colormapName: "Colormap",
		colormapNameName: "Colormap Name",
		colorRampName: "Color Ramp",
		contrastOffsetName: "Contrast Offset",
		brightnessOffsetName: "Brightness Offset",
		methodName: "Method",
		bandNamesName: "Band Names",
		bandWavelengthsName: "Band Wavelengths",
		bandIdsName: "Band IDs",
		missingBandActionName: "Missing Band Action",
		conversionParametersName: "Conversion Parameters",
		hillshadeTypeName: "Hillshade Type",
		azimuthName: "Azimuth",
		altitudeName: "Altitude",
		slopeTypeName: "Scaling",
		zFactorName: "Z Factor",
		PSPowerName: "Pixel Size Power",
		PSZFactorName: "Pixel Size Factor",
		removeEdgeEffectName: "Disable default edge pixel interpolation",
		fromUnitName: "From Unit",
		toUnitName: "To Unit",
		rasterTypeName: "Type",
		minName: "Output Minimum",
		maxName: "Output Maximum",
		minPercentName: "Percent Clip Minimum",
		maxPercentName: "Percent Clip Maximum",
		numberOfStandardDeviationName: "Number of standard deviations",
		sigmoidStrengthLevelName: "Sigmoid Strength Level",
		estimateStatsHistogramName: "Estimate Statistics",
		DRAName: "Dynamic Range Adjustment",
		statisticsName: "Statistics",
		histogramsName: "Histograms",
		statisticsHistogramName: "Define Statistics and Histogram",
		computeGammaName: "Auto Gamma",
		useGammaName: "Use Gamma",
		gammaName: "Gamma",
		inputNamesName: "Names",
		expressionName: "Expression",
		cellsizeTypeName: "Cellsize Type",
		extentTypeName: "Extent Type",
		classifierDefinitionFileName: "Input Definition File",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "True Raster",
		falseRasterName: "False Raster",
		noDataInterpretationName: "NoData Interpretation",
		noDataValuesName: "NoData Values",
		includedRangesName: "Included Ranges",
		curvatureTypeName: "Curvature Type",
		rastersName: "Rasters",
		attributeTableName: "Table",
		attributeTableTypeName: "Table Type",
		rowsName: "Number of Rows",
		columnsName: "Number of Columns",
		kernelName: "Kernel",
		mirrorEdgesName: "Mirror Edges",
		influencesName: "Influences",
		fieldsName: "Fields",
		remapsName: "Remap Table",
		evalFromName: "Evaluation Scale From",
		evalToName: "Evaluation Scale To",
		weightsName: "Weights",
		DEMName: "DEM",
		shortRangeIDWRadiusName: "Short Range IDW Radius",
		maxVoidWidthName: "Max Void Width",
		sigmaGaussianName: "Adaptive Smoothing",
		contourTypeName: "Contour Type",
		zBaseName: "Z Base",
		numberOfContoursName: "Number Of Contours",
		contourIntervalName: "Contour Interval",
		nthContourLineInBoldName: "Nth ContourLine In Bold",
		featureClassName: "Input Features",
		classIndexFieldName: "Field",
		resolveOverlapMethodName: "Resolve Overlap Method",
		resamplingTypeName: "Resampling Type",
		inputCellsizeName: "Input Cellsize",
		outputCellsizeName: "Output Cellsize",
		pointFeatureClassName: "Seed Points",
		maxGrowthRadiusFieldName: "Max Growth Radius Field",
		similarityThresholdFieldName: "Similarity Threshold Field",
		fillValueFieldName: "Fill Value Field",
		spectralDetailName: "Spectral Detail [1..20]",
		spatialDetailName: "Spatial Detail [1..20]",
		minNumPixelsPerSegmentName: "Minimum Segment Size in Pixels",
		boundariesOnlyName: "Segment boundaries only",
		statisticsTypeName: "Statistics Type",
		fillNoDataOnlyName: "Only fill NoData pixels",
		inputDataTypeName: "Input Data Type",
		angleReferenceSystemName: "Angle Reference System",
		outputDataTypeName: "Output Data Type",
		inputSamplePointFeatureClassName: "Input Samples",
		valueFieldName: "Value Field",
		rasterInfoName: "Raster Info",
		interpolationMethodName: "Interpolation Method",
		radiusName: "Radius",
		radianceGainValuesName: "Radiance Gain",
		radianceBiasValuesName: "Radiance Bias",
		reflectedGainValuesName: "Reflectance Gain",
		reflectedBiasValuesName: "Reflectance Bias",
		sunElevationName: "Sun Elevation (degrees)",
		albedoName: "Albedo",
		scaleFactorName: "Scale Factor",
		offsetName: "Offset",
		thresholdTypeName: "Threshold Type",
		thresholdsName: "Thresholds",
		undefinedClassName: "Undefined Class",
		minValueName: "Min",
		maxValueName: "Max",
		operationName: "Operation",
		clippingTypeName: "Clipping Type",
		clippingGeometryName: "Clipping Geometry / Raster",
		extentName: "Output Extent",
		useInputFeatureGeometryName: "Use input features for clipping geometry",
		remapDefinitionTypeName: "Remap Definition Type",
		inputRangeName: "Input Ranges",
		outputValuesName: "Output Values",
		noDataRangeName: "NoData Ranges",
		inputFieldName: "Input Field",
		outputFieldName: "Output Field",
		inputMaxFieldName: "Input Max Field (optional)",
		remapTableTypeName: "Remap Table Type",
		allowUnmatchedName: "Allow Unmatched Pixel Values",
		changeMissingValuesToNoDataName: "Change missing values to NoData",
		visibleBandIDName: "Visible Band ID",
		infraredBandIDName: "Infrared Band ID",
		scientificOutputName: "Scientific Output",
		bandIndexesName: "Band Indexes",
		constantName: "Constant",
		weightName: "Weight",
		minimumName: "Minimum",
		maximumName: "Maximum",
		sourceDataName: "Source Raster",
		sourceFieldName: "Source Field",
		costRasterName: "Cost Raster",
		maxDistanceName: "Maximum Distance",
		valueRasterName: "Value Raster",
		costMultiplierName: "Multiplier to Apply to Costs",
		startCostName: "Start Cost",
		accumCostResistanceRateName: "Accumulative Cost Resistance Rate",
		capacityName: "Capacity",
		travelDirectionName: "Travel Direction",
		cellSizeName: "Cellsize",
		populationFieldName: "Population Field",
		areaUnitsName: "Area Units",
		outputValueTypeName: "Output Cell Values",
		barriersName: "Input Barriers",
		destinationDataName: "Destination Raster",
		destinationFieldName: "Destination Field",
		pathTypeName: "Path Type",
		observerFeaturesName: "Observer Features",
		analysisMethodName: "Analysis Method",
		analysisTypeName: "Analysis Type",
		verticalErrorName: "Vertical Error",
		refractivityCoefficientName: "Refractivity Coefficient",
		surfaceOffsetName: "Surface Offset",
		observerElevationName: "Observer Elevation",
		observerOffsetName: "Observer Offset",
		innerRadiusName: "Inner Radius",
		innerRadiusIs3DDistanceName: "Inner Radius is 3D Distance",
		outerRadiusName: "Outer Radius",
		outerRadiusIs3DDistanceName: "Outer Radius is 3D Distance",
		horizontalStartAngleName: "Horizontal Start Angle",
		horizontalEndAngleName: "Horizontal End Angle",
		verticalUpperAngleName: "Vertical Upper Angle",
		verticalLowerAngleName: "Vertical Lower Angle",
		zoneDataName: "Zone Raster",
		zoneFieldName: "Zone Field",
		ignoreNoDataName: "Ignore NoData in calculations",
		temperatureRasterName: "Temperature Raster",
		inTemperatureUnitsName: "Temperature Units",
		outHeatIndexTemperatureUnitsName: "Heat Index Units",
		relativeHumidityRasterName: "Relative Humidity Raster",
		outWindChillTemperatureUnitsName: "Wind Chill Units",
		windSpeedRasterName: "Wind-speed Raster",
		inWindSpeedUnitsName: "Wind-speed Units",
		valueName: "Value",
		propertyName: "Property Name",
		jsonName: "Metadata JSON",
		zoneTableName: "Zonal Attributes Table",
		attributeFieldNames: "Attribute Field Names",
		backgroundName: "Background Value",
		whereClauseName: "Where Clause",
		minimumValueFieldName: "Minimum Value Field Name",
		maximumValueFieldName: "Maximum Value Field Name",
		outValueFieldName: "Output Value Field Name",
		defaultValueName: "Default Output Value",
		conversionMatrixName: "Conversion Matrix",
		IsPseudoColorOutputName: "Is a pseudo color output",
		unmappedAsRandomColorName: "Randomly Assign Color To Unmapped Pixels",
		distanceMethodName: "Distance Method",
		flowDirRasterName: "Flow Direction Raster",
		pourPointName: "Pour Point(s) Raster",
		pourPointFieldName: "Pour Point Field",
		constantZName: "Constant Z",
		zOffsetName: "Z Offset",
		geoIdName: "Geoid",
		calibrationTypeName: "Calibration Type",
		filterTypeName: "Filter Type",
		filterSizeName: "Filter Size",
		noiseModelName: "Noise Model",
		noiseVarianceName: "Noise Variance",
		additiveNoiseMeanName: "Additive Noise Mean",
		multiplicativeNoiseMeanName: "Multiplicative Noise Mean",
		numberofLooksName: "Number of Looks",
		dampingFactorName: "Damping Factor",
		maskRasterName: "Mask Raster",
		nibbleValuesName: "Use NoData values if they are the nearest neighbor",
		nibbleNoDataName: "Nibble NoData cells",
		zLimitName: "Z Limit",
		flowDirectionTypeName: "Flow Direction Type",
		weightRasterName: "Weight Raster",
		forceEdgeName: "Force all edge cells to flow outward",
		streamRasterName: "Stream Raster",
		surfaceRasterName: "Surface Raster",
		conversionType: "Conversion Type",
		distanceRaster1: "Distance Raster 1",
		distanceRaster2: "Distance Raster 2",
		costDistanceRaster: "Cost Distance Raster",
		costBacklinkRaster: "Cost Backlink Raster",
		overridesName: "Overrides",
		fieldName: "Field",
		signatureFileOrUrl: "Signature File or URL",
		redName: "Red",
		greenName: "Green",
		blueName: "Blue",
		infraredName: "Infrared",
		panchromaticName: "Panchromatic",
		multispectralName: "Multispectral",
		pansharpeningType: "Pansharpening Type",
		sensorName: "Sensor",
		spatialReferenceName: "Spatial Reference",
		xCellsizeName: "X Cellsize",
		yCellsizeName: "Y Cellsize",
		xOriginName: "X Registration Point",
		yOriginName: "Y Registration Point",
		percentileName: "Percentile Value",
		neighborhoodType: "Neighborhood Type",
		widthName: "Width",
		heightName: "Height",
		startAngleName: "Start Angle",
		endAngleName: "End Angle",
		neighborhoodValues: "Neighborhood Values",
		horizontalRaster: "Horizontal Raster",
		horizontalFactor: "Horizontal Factor",
		verticalRaster: "Vertical Raster",
		verticalFactor: "Vertical Factor",
		streamRaster: "Stream Raster",
		flowDirRaster: "Flow Direction Raster",
		numberNeighborCells: "Number of Neighbor Cells",
		zoneConnectivity: "Zone Connectivity",
		addLinkBehavior: "Add Link",
		excludedValue: "Excluded Value",
		constantFillCheck: "Generate Fill Raster from Constant",
		fillRaster: "Fill Raster",
		constantFillValue: "Constant Value",
		inputBitPositions: "Input Bit",
		outputBitPositions: "Output Bit",
		distanceTypeName: "Distance Type",
		barrierDataName: "Raster Barriers",
		pourPointDataName: "Pour Point Raster",
		accumulationRasterName: "Flow Accumulation Raster",
		snapDistanceName: "Snap Distance",
		orderMethodName: "Order Method",
		directionMeasurementName: "Direction of Measurement",
		processAsMultiband: "Process As Multiband",
		processMultidimensional: "Process as multidimensional",
		forceFlowDirectionConvention: "Force flow direction convention fo backlink raster",
		initialAccumulation: "Initial Accumulation",
		maximumAccumulation: "Maximum Accumulation",
		sourceLocationBands: "Generate source row and column as additional bands in output",
		backDirectionBand: "Generate back direction as additional band in output",
		numberOfCells: "Number of Cells",
		zoneValues: "Zone Values",
		shrinkMethod: "Shrink Method",
		expandMethod: "Expand Method",
		inputSpectralProfileType: "Spectral Profile Type",
		spectralProfileFileName: "Spectral Profile",
		trainingFeatureFileName: "Training Feature",
		nonNegative: "Non-negative",
		sumToOne: "Sum to One",
		randomDistribution: "Distribution",
		meanName: "Mean",
		probabilityName: "Probability",
		alphaName: "Alpha",
		betaName: "Beta",
		rName: "r",
		nName: "N",
		seed: "Seed",
		randomNumberGenerator: "Random Number Generator",
		cellFactor: "Cell Factor",
		aggregationType: "Aggregation technique",
		extentHandling: "Expand extent if needed",
		trendAnalysisDimensionName: "Dimension Name",
		trendAnalysisType: "Trend Type",
		harmonicFrequency: "Harmonic Frequency",
		polynomialOrder: "Polynomial Order",
		cycleLengthName: "Length of Cycle",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-Squared",
		trendAnalysisSlopePValue: "P-Value of Slope Coefficient",
		trendAnalysisSeasonalPeriod: "Seasonal Period",
		cycleUnitName: "Cycle Unit",
		predictDimensionValues: "Values",
		dimensionDefinitionType: "Dimension Definition",
		predictDimensionStart: "Start",
		predictDimensionEnd: "End",
		predictDimensionInterval: "Value Interval",
		dimensionUnit: "Unit",
		interpolationCellsizeName: "Interpolation Cellsize",
		variableName: "Variables",
		dimensionlessName: "Dimensionless",
		mdimDefinition: "Dimension Definition",
		dimensionName: "Dimension",
		iterationStart: "Start of first iteration",
		iterationEnd: "End of first iteration",
		intervalStart: "Start of Interval",
		intervalEnd: "End of Interval",
		stepName: "Step",
		rangesName: "Ranges",
		minValue: "Minimum Value",
		maxValue: "Maximum Value",
		changeAnalysisRasterName: "Change Analysis Raster",
		changeTypeName: "Change Type",
		segmentDate: "Segment Date",
		changeDirectionName: "Change Direction",
		maxNumChangesName: "Maximum Number of Changes",
		filterByYear: "Filter By Year",
		minimumYear: "Minimum Value",
		maximumYear: "Maximum Value",
		filterByDuration: "Filter By Duration",
		minimumDuration: "Minimum Duration",
		maximumDuration: "Maximum Duration",
		filterByMagnitude: "Filter By Magnitude",
		minimumMagnitude: "Minimum Magnitude",
		maximumMagnitude: "Maximum Magnitude",
		filterByStartValue: "Filter By Start Value",
		minimumStartValue: "Minimum Start Value",
		maximumStartValue: "Maximum Start Value",
		filterByEndValue: "Filter By End Value",
		minimumEndValue: "Minimum End Value",
		maximumEndValue: "Maximum End Value",
		modelTypeName: "Model Type",
		fromRasterName: "From Raster",
		toRasterName: "To Raster",
		computeChangeMethod: "Compute Change Method",
		fromClassValues: "From Class Values (Example: 2 5)",
		toClassValues: "To Class Values (Example: 2 5)",
		keepMethod: "Filter Method",
		useColorMethod: "Define Transition Colors",
		detectChangeBands: "Bands for Detecting Change (start at 0)",
		tmaskBands: "Bands for Temporal Masking (start at 0)",
		chiSquaredThreshold: "Chi-squared Threshold for Detect Change",
		minAnomaly: "Minimum Consecutive Anomaly Observations",
		updatingFrequency: "Updating Fitting Frequency (in years)",
		distanceAccumulationRasterName: "Distance Accumulation Raster",
		costBackdirectionRasterName: "Back Direction or Flow Direction Raster",
		rasterCollectionName: "Raster Collection",
		itemFunctionName: "Item Function",
		aggregationFunctionName: "Aggregation Function",
		processingFunctionName: "Processing Function",
		aggregationDefinitionName: "Aggregation Definition",
		queryGeometryName: "Query Geometry",
		factorFunctionZeroFactor: "Zero Factor",
		factorFunctionCutAngle: "Cut Angle",
		factorFunctionSideFactor: "Side Factor",
		factorFunctionSlope: "Slope",
		factorFunctionLowCutAngle: "Low Cut Angle",
		factorFunctionHighCutAngle: "High Cut Angle",
		factorFunctionCosPower: "Cosine Power",
		factorFunctionSecPower: "Secant Power",
		factorFunctionTablePath: "Table Path",
		processingBand: "Processing Band",
		processingBandName: "Processing Band Name",
		snappingDate: "Snapping Date",
		maxNumSegments: "Maximum Number of Segments",
		vertexCountOvershoot: "Vertex Count Overshoot",
		spikeThreshold: "Spike Threshold",
		recoveryThreshold: "Recovery Threshold",
		minNumObs: "Minimum Number of Observations",
		pValueThreshold: "P-Value Threshold",
		bestModelProportion: "Best Model Proportion",
		preventOneYearRecovery: "Prevent One Year Recovery",
		recoveryIncreaseTrend: "Recovery Has Increasing Trend",
		outputOtherBands: "Output Other Bands",
		sortType: "Sort Type",
		numberOfRuns: "Run expansion and shrinking twice",
		percentileValue: "Percentile Value",
		percentileInterpolationType: "Percentile interpolation type",
		rasterInfoProperty: "Property",
		rasterInfoValue: "Value",
		rasterInfoColumns: "Columns",
		rasterInfoRows: "Rows",
		rasterInfoBandCount: "Number of Bands",
		rasterInfoPixelSizeX: "Cell Size X",
		rasterInfoPixelSizeY: "Cell Size Y",
		rasterInfoPixelType: "Pixel Type",
		rasterExtentTop: "Top",
		rasterExtentBottom: "Bottom",
		rasterExtentLeft: "Left",
		rasterExtentRight: "Right",
		rasterStatisticsNotCalculated: "Statistics have not been calculated.",
		spatialReferenceProjection: "Projection",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Previous WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Previous VCSWKID",
		spatialReferenceAuthority: "Authority",
		spatialReferenceLinearUnit: "Linear Unit",
		spatialReferenceAngularUnit: "Angular Unit",
		spatialReferenceFalseEasting: "False Easting",
		spatialReferenceFalseNorthing: "False Northing",
		spatialReferenceCentralMeridian: "Central Meridian",
		spatialReferencePrimeMeridian: "Prime Meridian",
		spatialReferenceStandardParallel1: "Standard Parallel 1",
		spatialReferenceStandardParallel2: "Standard Parallel 2",
		spatialReferenceLatitudeOfOrigin: "Latitude of Origin",
		spatialReferenceAuxiliarySphereType: "Auxiliary Sphere Type",
		spatialReferenceDatum: "Datum",
		spatialReferenceSpheroid: "Spheroid",
		spatialReferenceSemimajorAxis: "Semimajor Axis",
		spatialReferenceSemiminorAxis: "Semiminor Axis",
		spatialReferenceInverseFlattening: "Inverse Flattening",
		inputDefinitionFileName: "Input Definition File",
		deleteName: "Delete",
		addVariableName: "Add variable",
		maxNumPixelsPerSegment: "Maximum Segment Size in Pixels",
		forwardWindowName: "Forward Window",
		backwardWindowName: "Backward Window",
		noDataHandlingName: "NoData Handling",
		circularWrapValueName: "Circular Wrap Value",
		fromClassNameFieldName: "Field Name For Class Names In From Raster",
		toClassNameFieldName: "Field Name For Class Names In To Raster",
		targetRasterName: "Target Raster",
		circularWrapValue: "Circular Wrap Value",
		bandIndexesR: "Red Expression",
		bandIndexesG: "Green Expression",
		bandIndexesB: "Blue Expression",
		exampleName: "Example",
		inputName: "Input",
		outputName: "Output",
		optionalName: "Optional",
		browseDefinitionFile: "Browse Definition File",
		selectDefinitionFile: "Select Input Definition File",
		inputDefinitionURL: "Input Definition File URL",
		enterDefinitionFileURL: "Enter Definition File URL",
		browseXMLFile: "Browse XML File",
		selectStatsFile: "Select Statistics and Histograms File",
		enterXMLFileURL: "Enter XML File URL",
		xmlFileURL: "XML File URL",
		circularCalculation: "Calculate Circular Statistics",
		localSurfaceType: "Local Surface Type",
		surfaceParameterType: "Parameter Type",
		neighborhoodDistance: "Neighborhood Distance",
		useAdaptiveNeighborhood: "Use Adaptive Neighborhood",
		outputSlopeType: "Output Slope Measurement",
		projectAzimuths: "Project Geodesic Azimuths",
		useEquatorialAspect: "Use Equatorial Aspect",
		zUnit: "Z Unit",
		analysisMask: "Analysis Mask",
		stdDeviation: "Standard Deviation",
		"true": "True",
		"false": "False",
		costDistanceRaster1: "Input Accumulative Cost Distance Raster 1",
		costDistanceRaster2: "Input Accumulative Cost Distance Raster 2",
		threshold: "Threshold",
		thresholdMethod: "Threshold Method",
		directionRaster1: "Input Back Direction Raster 1",
		directionRaster2: "Input Back Direction Raster 2",
		maxIterations: "Maximum Number of Iterations",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Manual",
		attributeTableTypeExternal: "External",
		clrSchemeTypeColormap: "Colormap",
		clrSchemeTypeColorRamp: "Color Ramp",
		colormapTypeElevation: "Elevation",
		colormapTypeGray: "Gray",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Random",
		none: "None",
		slopeTypeAdjusted: "Adjusted",
		slopeTypeDegree: "Degree",
		slopeTypePercentRise: "PercentRise",
		slopeTypeScaled: "Scaled",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmoid",
		stretchTypeStdDev: "StdDev",
		hillshadeTypeSimple: "Traditional",
		hillshadeTypeMultidirectional: "Multidirectional",
		bandComboByNames: "Band Names",
		bandComboByWavelength: "Band Wavelengths",
		bandComboByIDs: "Band IDs",
		missingBandActionBestMatch: "Best Match",
		missingBandActionFail: "Fail",
		unitTypeCelsius: "Celsius",
		unitTypeCentimeters: "Centimeters",
		unitTypeDecimeters: "Decimeters",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Feet",
		unitTypeFeetPerSec: "Feet Per Second (ft/s)",
		unitTypeInches: "Inches",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilometers",
		unitTypeKmsPerHour: "Kilometers Per Hour (km/h)",
		unitTypeKnots: "Knots (kn)",
		unitTypeMeters: "Meters",
		unitTypeMetersPerSec: "Meters Per Second (m/s)",
		unitTypeMiles: "Miles",
		unitTypeMilesPerHour: "Miles Per Hour (mph)",
		unitTypeMillimeters: "Millimeters",
		unitTypeNauticalMiles: "Nautical Miles",
		unitTypeYards: "Yards",
		unitTypeDecimalDegrees: "Decimal degrees",
		unitTypePoints: "Points",
		unitTypeUnknown: "Unknown",
		unitTypeSqMapUnits: "Square Map Units",
		unitTypeSqMiles: "Square Miles",
		unitTypeSqKms: "Square Kilometers",
		unitTypeAcres: "Acres",
		unitTypeHectares: "Hectares",
		unitTypeSqYards: "Square Yards",
		unitTypeSqFt: "Square Feet",
		unitTypeSqInches: "Square Inches",
		unitTypeSqMts: "Square Meters",
		unitTypeSqCms: "Square Centimeters",
		unitTypeSqMms: "Square Millimeters",
		cellsizeTypeFirst: "First Of",
		cellsizeTypeMin: "Min Of",
		cellsizeTypeMax: "Max Of",
		cellsizeTypeMean: "Mean Of",
		cellsizeTypeLast: "Last Of",
		extentTypeFirst: "First Of",
		extentTypeIntersection: "Intersection Of",
		extentTypeUnion: "Union Of",
		extentTypeLast: "Last Of",
		noDataInterpretAny: "Match Any",
		noDataInterpretAll: "Match All",
		curvatureTypeStandard: "Standard",
		curvatureTypeProfile: "Profile",
		curvatureTypePlanform: "Planform",
		filterTypeLineDetectionHorizontal: "Line Detection Horizontal",
		filterTypeLineDetectionVertical: "Line Detection Vertical",
		filterTypeLineDetectionLeftDiagonal: "Line Detection Left Diagonal",
		filterTypeLineDetectionRightDiagonal: "Line Detection Right Diagonal",
		filterTypeGradientNorth: "Gradient North",
		filterTypeGradientWest: "Gradient West",
		filterTypeGradientEast: "Gradient East",
		filterTypeGradientSouth: "Gradient South",
		filterTypeGradientNorthEast: "Gradient North East",
		filterTypeGradientNorthWest: "Gradient North West",
		filterTypeSmoothArithmeticMean: "Smooth Arithmetic Mean",
		filterTypeSmoothing3x3: "Smoothing 3x3",
		filterTypeSmoothing5x5: "Smoothing 5x5",
		filterTypeSharpening3x3: "Sharpening 3x3",
		filterTypeSharpening5x5: "Sharpening 5x5",
		filterTypeLaplacian3x3: "Laplacian 3x3",
		filterTypeLaplacian5x5: "Laplacian 5x5",
		filterTypeSobelHorizontal: "Sobel Horizontal",
		filterTypeSobelVertical: "Sobel Vertical",
		filterTypeSharpen: "Sharpen",
		filterTypeSharpen2: "Sharpen More",
		filterTypePointSpread: "Point Spread",
		userDefined: "User Defined",
		ContourTypeLines: "Contour Lines",
		ContourTypeFill: "Contour Fill",
		ContourTypeSmoothOnly: "Smooth Surface Only",
		rasterizeFirst: "First",
		rasterizeLast: "Last",
		rasterizeSmallest: "Smallest",
		rasterizeLargest: "Largest",
		resamplingTypeNearest: "Nearest Neighbor",
		resamplingTypeBilinear: "Bilinear Interpolation",
		resamplingTypeCubic: "Cubic Convolution",
		resamplingTypeMajority: "Majority",
		resamplingTypeBilinearPlus: "Bilinear Interpolation Plus",
		resamplingTypeGauss: "Gauss Blur",
		resamplingTypeGaussPlus: "Gauss Blur Plus",
		resamplingTypeAverage: "Average",
		resamplingTypeMinimum: "Minimum",
		resamplingTypeMaximum: "Maximum",
		resamplingTypeVectorAvg: "Vector Average",
		minimum: "Minimum",
		maximum: "Maximum",
		mean: "Mean",
		stdDeviation: "Standard Deviation",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Magnitude-Direction",
		unknown: "Unknown",
		angleRefSysGeographic: "Geographic",
		angleRefSysArithmetic: "Arithmetic",
		interpolateIrregularDataNearest: "Nearest Neighbor",
		interpolateIrregularDataBilinear: "Bilinear",
		interpolateIrregularDataTinningLinear: "Linear Tinning",
		interpolateIrregularDataTinningNaturalNeighbor: "Natural Neighbor",
		interpolateIrregularDataTinningIDW: "Inverse Distance Weighted",
		esriRasterThresholdTypeConstant: "Constant",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg Max",
		argStatsTypeMin: "Arg Min",
		argStatsTypeMedian: "Arg Median",
		argStatsTypeDuration: "Duration",
		arithmeticOpPlus: "Plus",
		arithmeticOpMinus: "Minus",
		arithmeticOpMultiply: "Multiply",
		arithmeticOpDivide: "Divide",
		arithmeticOpPower: "Power",
		arithmeticOpMode: "Mode",
		clipTypeOutside: "Clip Outside",
		clipTypeInside: "Clip Inside",
		yes: "Yes",
		no: "No",
		densities: "Densities",
		expectedCounts: "Expected Counts",
		planar: "Planar",
		geodesic: "Geodesic",
		eachCell: "Each Cell",
		eachZone: "Each Zone",
		bestSingle: "Best Single",
		allSightlines: "All Sightlines",
		perimeterSightlines: "Perimeter Sightlines",
		frequency: "Frequency",
		observers: "Observers",
		majority: "Majority",
		median: "Median",
		minority: "Minority",
		percentile: "Percentile",
		range: "Range",
		sum: "Sum",
		variety: "Variety",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Transformed SAVI",
		bandArithmeticMethodMSAVI: "Modified SAVI",
		bandArithmeticMethodSultan: "Sultan's Formula",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Iron Oxide",
		ferrousMinerals: "Ferrous Minerals",
		clayMinerals: "Clay Minerals",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Square Root",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Bitwise Not",
		localBooleanNot: "Boolean Not",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Int",
		localIsNull: "Is Null",
		localFloat: "Float",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Negate",
		localRoundDown: "Round Down",
		localRoundUp: "Round Up",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Plus",
		localMinus: "Minus",
		localTimes: "Times",
		localPower: "Power",
		localBitwiseAnd: "Bitwise And",
		localBitwiseLeftShift: "Bitwise Left Shift",
		localBitwiseOr: "Bitwise Or",
		localBitwiseRightShift: "Bitwise Right Shift",
		localBitwiseXor: "Bitwise Xor",
		localBooleanAnd: "Boolean And",
		localBooleanOr: "Boolean Or",
		localBooleanXor: "Boolean Xor",
		localDivide: "Divide",
		localEqualTo: "Equal To",
		localGreaterThan: "Greater Than",
		localGreaterThanEqual: "Greater Than Equal",
		localLessThan: "Less Than",
		localLessThanEqual: "Less Than Equal",
		localMod: "Mod",
		localNotEqual: "Not Equal",
		localATan2: "ATan2",
		localSquare: "Square",
		localSetNull: "Set Null",
		remapDefTypeList: "List",
		remapDefTypeTable: "Table",
		remapTableTypeSimple: "Simple",
		remapTableTypeDynamic: "Dynamic",
		remapTableTypeReassignment: "Reassignment",
		geomCorrectionByConstZ: "Use Constant Z",
		geomCorrectionByDEM: "Use DEM",
		radarCalibBetaNought: "Beta nought",
		radarCalibSigmaNought: "Sigma nought",
		radarCalibGammaNought: "Gamma nought",
		speckleFilterTypeLee: "Lee Filter",
		speckleFilterTypeEnhancedLee: "Enhanced Lee Filter",
		speckleFilterTypeFrost: "Frost Filter",
		speckleFilterTypeKuan: "Kuan Filter",
		speckleNoiseModelMul: "Multiplicative Noise",
		speckleNoiseModelAdd: "Additive Noise",
		speckleNoiseModelAddnMul: "Additive and Multiplicative Noise",
		mosaicOpTypeFirst: "First",
		mosaicOpTypeLast: "Last",
		mosaicOpTypeMin: "Min",
		mosaicOpTypeMax: "Max",
		mosaicOpTypeMean: "Mean",
		mosaicOpTypeBlend: "Blend",
		mosaicOpTypeSum: "Sum",
		integer: "Integer",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Vertical",
		horizontal: "Horizontal",
		localCellStatisticsMajority: "Majority",
		localCellStatisticsMax: "Maximum",
		localCellStatisticsMean: "Mean",
		localCellStatisticsMedian: "Median",
		localCellStatisticsMin: "Minimum",
		localCellStatisticsMinority: "Minority",
		localCellStatisticsRange: "Range",
		localCellStatisticsStdDev: "Standard Deviation",
		localCellStatisticsSum: "Sum",
		localCellStatisticsVariety: "Variety",
		localCellStatisticsMajorityIgnoreND: "Majority (Ignore NoData)",
		localCellStatisticsMaxIgnoreND: "Maximum (Ignore NoData)",
		localCellStatisticsMeanIgnoreND: "Mean (Ignore NoData)",
		localCellStatisticsMedianIgnoreND: "Median (Ignore NoData)",
		localCellStatisticsMinIgnoreND: "Minimum (Ignore NoData)",
		localCellStatisticsMinorityIgnoreND: "Minority (Ignore NoData)",
		localCellStatisticsRangeIgnoreND: "Range (Ignore NoData)",
		localCellStatisticsStdDevIgnoreND: "Standard Deviation (Ignore NoData)",
		localCellStatisticsSumIgnoreND: "Sum (Ignore NoData)",
		localCellStatisticsVarietyIgnoreND: "Variety (Ignore NoData)",
		localCellStatisticsTypePercentileIgnoreND: "Percentile (Ignore NoData)",
		fromSource: "From Source",
		toSource: "To Source",
		colorspaceConversionRgbToHsv: "RGB to HSV",
		colorspaceConversionHsvToRgb: "HSV to RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Mean",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Rectangle",
		circleNeighborhood: "Circle",
		annulusNeighborhood: "Annulus",
		wedgeNeighborhood: "Wedge",
		irregularNeighborhood: "Irregular",
		weightNeighborhood: "Weight",
		four: "Four",
		eight: "Eight",
		within: "Within",
		cross: "Cross",
		addLink: "Add Link",
		noLink: "No Link",
		weightedMean: "Weighted Mean",
		ls8QCBitPatternCirrus: "Landsat 8 Cirrus",
		ls8QCBitPatternCloud: "Landsat 8 Cloud",
		ls8QCBitPatternCloudShadow: "Landsat 8 Cloud Shadow",
		ls8QCBitPatternDesignatedFill: "Landsat 8 Designated Fill",
		ls8QCBitPatternDroppedFrame: "Landsat 8 Dropped Frame",
		ls8QCBitPatternSnowIce: "Landsat 8 Snow/Ice",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 Terrain Occlusion",
		ls8QCBitPatternVegetation: "Landsat 8 Vegetation",
		ls8QCBitPatternWater: "Landsat 8 Water",
		downStream: "Downstream",
		upStream: "Upstream",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Current Slice",
		allSlices: "All Slices",
		expandDistance: "DISTANCE",
		expandMorphological: "MORPHOLOGICAL",
		spectralProfileFile: "Spectral Profile",
		trainingFeatureFile: "Training Feature",
		randomDistributionTypeUniform: "Uniform",
		randomDistributionTypeUniformInteger: "Integer",
		randomDistributionTypeNormal: "Normal",
		randomDistributionTypeExponential: "Exponential",
		randomDistributionTypePoisson: "Poisson",
		randomDistributionTypeGamma: "Gamma",
		randomDistributionTypeBinomial: "Binomial",
		randomDistributionTypeGeometric: "Geometric",
		randomDistributionTypeNegativeBinomial: "Negative Binomial",
		randomGeneratorTypeStandardCRand: "Standard C Rand",
		randomGeneratorTypeAlgorithmACM599: "ACM collected algorithm 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Sum",
		medainName: "Median",
		trendLinear: "Linear",
		trendHarmonic: "Harmonic",
		trendPolynomial: "Polynomial",
		trendMannKendall: "Mann-Kendall",
		trendSeasonalKendall: "Seasonal Kendall",
		dimensionByValue: "By Value",
		dimensionByInterval: "By Interval",
		mdimDefTypeAll: "All",
		mdimDefTypeByValues: "By Values",
		mdimDefTypeByRanges: "By Ranges",
		mdimDefTypeByIteration: "By Iteration",
		mdimDefTypeByInterval: "By Interval",
		mdimDefTypeByTargetRaster: "By Target Raster",
		esriTimeUnitsHours: "Hours",
		esriTimeUnitsDays: "Days",
		esriTimeUnitsWeeks: "Weeks",
		esriTimeUnitsMonths: "Months",
		esriTimeUnitsYears: "Years",
		esriTimeIntervalKeywordHourly: "Hourly",
		esriTimeIntervalKeywordDaily: "Daily",
		esriTimeIntervalKeywordWeekly: "Weekly",
		esriTimeIntervalKeywordDekadly: "Dekadly",
		esriTimeIntervalKeywordPentadly: "Pentadly",
		esriTimeIntervalKeywordMonthly: "Monthly",
		esriTimeIntervalKeywordQuarterly: "Quarterly",
		esriTimeIntervalKeywordYearly: "Yearly",
		esriTimeIntervalKeywordRecurringDaily: "Recurring daily",
		esriTimeIntervalKeywordRecurringWeekly: "Recurring weekly",
		esriTimeIntervalKeywordRecurringMonthly: "Recurring monthly",
		esriTimeIntervalKeywordRecurringQuarterly: "Recurring quarterly",
		aggDefTypeAll: "All",
		aggDefTypeIntervalKeyword: "Interval Keyword",
		aggDefTypeIntervalValue: "Interval Value",
		aggDefTypeIntervalRanges: "Interval Ranges",
		latestChange: "Time of Latest Change",
		earliestChange: "Time of Earliest Change",
		largestChange: "Time of Largest Change",
		numberOfChanges: "Number of Changes",
		longestChange: "Time of Longest Change",
		shortestChange: "Time of Shortest Change",
		fastestChange: "Time of Fastest Change",
		slowestChange: "Time of Slowest Change",
		allChanges: "All",
		increaseChanges: "Increase",
		decreaseChanges: "Decrease",
		segmentBeginning: "Beginning of segment",
		segmentEnd: "End of segment",
		esriComputeChangeMethodDifference: "Difference",
		esriComputeChangeMethodRelativeDifference: "Relative Difference",
		esriComputeChangeMethodCategorical: "Categorical Difference",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spectral Euclidean Distance",
		esriComputeChangeMethodMultispectralAngularDifference: "Spectral Angle Difference",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Band With Most Change",
		esriComputeChangeKeepAll: "Keep All",
		esriComputeChangeKeepChangedOnly: "Keep Changed Pixels Only",
		esriComputeChangeKeepUnchangedOnly: "Keep Unchanged Pixels Only",
		esriComputeChangeUseColorAverage: "Average From And To Colors",
		esriComputeChangeUseColorFrom: "Use From Colors",
		esriComputeChangeUseColorTo: "Use To Colors",
		factorFunctionBinary: "Binary",
		factorFunctionForward: "Forward",
		factorFunctionLinear: "Linear",
		factorFunctionInvLinear: "Inverse Linear",
		factorFunctionTable: "Table",
		factorFunctionSymLinear: "Symetric Linear",
		factorFunctionSymInvLinear: "Symetric Inverse Linear",
		factorFunctionCos: "Cosine",
		factorFunctionSec: "Secant",
		factorFunctionCosSec: "Cosine Secant",
		factorFunctionSecCos: "Secant Cosine",
		noSort: "Do Not Sort",
		ascend: "Ascend",
		descend: "Descend",
		autoDetect: "Auto-detect",
		nearest: "Nearest",
		linear: "Linear",
		esriMonthJanuary: "January",
		esriMonthFebruary: "February",
		esriMonthMarch: "March",
		esriMonthApril: "April",
		esriMonthMay: "May",
		esriMonthJune: "June",
		esriMonthJuly: "July",
		esriMonthAugust: "August",
		esriMonthSeptember: "September",
		esriMonthOctober: "October",
		esriMonthNovember: "November",
		esriMonthDecember: "December",
		dimensionalMovingIgnoreNoData: "Data",
		dimensionalMovingPropagateNoData: "NoData",
		dimensionalMovingFillOnlyNoData: "Fill NoData",
		circularMean: "Circular Mean",
		circularName: "Circular",
		arithmeticName: "Arithmetic",
		slopeName: "Slope",
		aspectName: "Aspect",
		meanCurvature: "Mean curvature",
		profileCurvature: "Profile (normal slope line) curvature",
		tangentialCurvature: "Tangential (normal contour) curvature",
		planCurvature: "Plan (projected contour) curvature",
		contourGeodesicTorsion: "Contour geodesic torsion",
		gaussianCurvature: "Gaussian curvature",
		casoratiCurvature: "Casorati curvature",
		localSurfaceTypeQuadratic: "Quadratic",
		localSurfaceTypeBiquadratic: "Biquadratic",
		thresholdNoThreshold: "No Threshold",
		thresholdPercentLeastCost: "Percent of Least Cost",
		thresholdAccumulativeCost: "Accumulative Cost",
		clrmapTypeHillshade: "Hillshade"
	},
	categoryLabels: {
		sourceCharacteristics: "Source Characteristics",
		neighborhoodSettings: "Neighborhood Settings",
		statistics: "Statistics",
		gamma: "Gamma",
		viewshedParameters: "Viewshed Parameters",
		observerParameters: "Observer Parameters",
		irregularDataInterpolation: "Irregular Data Interpolation",
		modelStatistics: "Model Statistics",
		aggregationDef: "Aggregation Definition",
		filterByAttributes: "Filter By Attributes",
		percentileName: "Percentile",
		rasterInfo: "Raster Information",
		extent: "Extent",
		spatialReference: "Spatial Reference"
	},
	outputRasterHelpTexts: {
		outputName: "<p>The name of the layer that will be created and added to the map.</p>",
		resultType: "<p>The type of output that will be created. The outputs can be Tiled imagery layers or Dynamic imagery layers.</p>",
		saveResultIn: "<p>The name of the folder in  <b>My Content</b> where the result will be saved.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Environment settings for analysis in  Map Viewer. </p>",
		outSR: "<p>Specifies the coordinate system for analysis and the result layer.</p>",
		extent: "<p>Specifies the area to be used for analysis.</p>",
		snapRaster: "<p>Adjusts the extent of the output so it matches the cell alignment of the specified snap raster layer.</p>",
		cellSize: "<p>Specifies the cell size or resolution that will be used for analysis and to create the output raster layer.</p>",
		mask: "<p>Specifies a mask layer in which only the cells that fall within the mask area will be used for analysis.</p>",
		resamplingMethod: "<p>Specifies how to interpolate pixel values when the input and output rasters do not line up.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Unsupported type",
		currentlyUnsupported: " A default editor for the ${missingType} is pending but coming soon. Temporary placeholder text box for specifying string based inputs.",
		unsupportedOverrideWarning: "An override editor component providing a better UX for working with following parameter(s) is pending but coming soon:",
		overrideWidgetMissing: "Override editor component missing!",
		uiIncomplete: "Job submission failed. The function is unable to run because some of the required fields are incomplete or missing from the UI.",
		count: "Count",
		selectVariables: "Select variables",
		selectFeature: "Select a feature layer",
		greaterThanErrorMessage: "The input number must be greater than ${min}",
		lesserThanErrorMessage: "The input number must be lower than ${max}",
		greaterThanOrEqualErrorMessage: "The input number must be greater than or equal to ${min}",
		lesserThanOrEqualErrorMessage: "The input number must be lower than or equal to ${max}",
		allowScalar: "Select a layer or enter a constant",
		selectField: "Select field",
		parameterRequired: "This parameter is required.",
		enterAValue: "Enter a value ...",
		invalidInput: "The value entered is not valid.",
		itemNotFound: "The item does not exist or is inaccessible.",
		itemPermissionDenied: "You do not have permissions to access this item.",
		layerNotAvailable: "Failed to load layer ${layerName}.",
		multipleLayersNotAvailable: "Failed to load layer ${layerName} and others.",
		learnMoreLabel: "Learn More",
		fieldNotAvailable: "Failed to load field.",
		allowAnalysis: "Analysis is not allowed on the image service.",
		allowAnalysisReason: "One or more layers from the map aren’t listed here because they do not allow analysis.",
		learnMoreText: "Learn more",
		atLeastOneRasterInput: "At least one input layer should be a raster layer.",
		browseAnalysisLayers: "Browse layers",
		activeMapViewExtent: "Use Current Map Extent",
		chooseRaster: "Choose Clipping Raster",
		chooseGeometry: "Choose Clipping Geometry",
		resultType: "Result type",
		saveInFolder: "Save in folder",
		outputName: "Output name",
		outputLayerType: "Output layer type",
		dynamicImageryLayer: "Dynamic imagery layer",
		tiledImageryLayer: "Tiled imagery layer",
		custom: "Custom",
		loading: "Loading...",
		layerMissing: "One or more layers from the map aren't listed here because they do not allow analysis. Learn more.",
		browseCoordinateSystems: "Browse coordinate systems",
		unableToRepopulateOutSR: "Unable to populate output coordinate system.",
		defaultTitle: "See more",
		"ARC (equal arc-second)": "ARC (equal arc-second)",
		Africa: "Africa",
		Antarctica: "Antarctica",
		Argentina: "Argentina",
		Asia: "Asia",
		"Asteroid Belt": "Asteroid Belt",
		"Atlantic Ocean": "Atlantic Ocean",
		Australia: "Australia",
		"Australia and New Zealand": "Australia and New Zealand",
		Austria: "Austria",
		"BLM (US Feet)": "BLM (US Feet)",
		Bangladesh: "Bangladesh",
		"Beijing 1954": "Beijing 1954",
		Bhutan: "Bhutan",
		CGCS2000: "CGCS2000",
		Canada: "Canada",
		Caribbean: "Caribbean",
		"Caribbean Sea": "Caribbean Sea",
		"Central America": "Central America",
		"Central and North America": "Central and North America",
		Colombia: "Colombia",
		Continental: "Continental",
		"County Systems": "County Systems",
		"Democratic Republic of the Congo": "Democratic Republic of the Congo",
		"EPSG Arctic": "EPSG Arctic",
		Earth: "Earth",
		"Ellipsoidal-based": "Ellipsoidal-based",
		Europe: "Europe",
		Finland: "Finland",
		France: "France",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss Kruger",
		"Geographic Coordinate Systems": "Geographic Coordinate Systems",
		Germany: "Germany",
		"Gravity-related": "Gravity-related",
		"Greenwich-based": "Greenwich-based",
		"Highways England": "Highways England",
		Illinois: "Illinois",
		"Indian Ocean": "Indian Ocean",
		"Indian Subcontinent": "Indian Subcontinent",
		Indiana: "Indiana",
		Indonesia: "Indonesia",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Ireland and United Kingdom",
		Italy: "Italy",
		Japan: "Japan",
		Jupiter: "Jupiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libya",
		Malaysia: "Malaysia",
		"Malaysia and Singapore": "Malaysia and Singapore",
		Mars: "Mars",
		Mercury: "Mercury",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (US Feet)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (Intl Feet)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (Meters)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (US Feet)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (Intl Feet)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (Meters)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (US Feet)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (Intl Feet)",
		"NAD 1983 (Meters)": "NAD 1983 (Meters)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (Meters)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (US Feet)",
		"NAD 1983 (US Feet)": "NAD 1983 (US Feet)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (Intl Feet)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (Meters)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (US Feet)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (Intl Feet)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (Meters)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (US Feet)",
		"National Grids": "National Grids",
		Navajo: "Navajo",
		Neptune: "Neptune",
		"New Beijing": "New Beijing",
		"New Zealand": "New Zealand",
		"North America": "North America",
		"Northern Hemisphere": "Northern Hemisphere",
		Norway: "Norway",
		Oceans: "Oceans",
		Oregon: "Oregon",
		"Other GCS": "Other GCS",
		"Pacific Ocean": "Pacific Ocean",
		Pluto: "Pluto",
		Polar: "Polar",
		Portugal: "Portugal",
		"Projected Coordinate Systems": "Projected Coordinate Systems",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Replaced",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturn",
		"Solar System": "Solar System",
		"South Africa": "South Africa",
		"South America": "South America",
		"South Korea": "South Korea",
		"Southern Hemisphere": "Southern Hemisphere",
		"Spheroid-based": "Spheroid-based",
		"State Plane": "State Plane",
		"State Systems": "State Systems",
		Sweden: "Sweden",
		"Switzerland and Liechtenstein": "Switzerland and Liechtenstein",
		Texas: "Texas",
		Tribal: "Tribal",
		Turkey: "Turkey",
		"US Feet": "US Feet",
		"USA and territories": "USA and territories",
		UTM: "UTM",
		Ukraine: "Ukraine",
		"Unknown Height Systems": "Unknown Height Systems",
		Uranus: "Uranus",
		Venus: "Venus",
		"Vertical Coordinate Systems": "Vertical Coordinate Systems",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "World",
		"World (Sphere-based)": "World (Sphere-based)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Done",
		noResults: "No results found",
		searchPlaceholder: "Name or WKID",
		browseTemplate: "Browse raster function templates",
		saveTemplate: "Save raster function template",
		preview: "Preview",
		previewDescription: "Preview the result before running analysis.",
		showPreview: "Show preview",
		previewLayer: "Preview layer ${number}",
		newPreview: "New preview",
		previewPopup: "Enable the preview of the analysis results based on the input parameters.",
		updatePreviewLayer: "Update selected preview layer",
		createPreviewLayer: "Create new preview layer",
		maximumPreviewAllowed: "Maximum number of preview layers allowed: ${maxCount}",
		previewFailure: "This preview layer is unavailable. Check the input parameters and update this preview layer again.",
		header: "Select item",
		content: "You have unsaved changes in ${rftTitle}. If you start over with a new template, those changes will be lost.",
		dontSave: "Don't save",
		"continue": "Continue",
		stretch: "Fit to window",
		pan: "Pan",
		newTemplate: "Create new template",
		openTemplate: "Open template",
		addFunction: "Add raster functions",
		addConstant: "Add constant",
		addRaster: "Add raster variable",
		move: "Move",
		zoom: "Zoom",
		saveAs: "Save as",
		clear: "Clear",
		addRasterFunctionTitle: "Add raster functions",
		templatePropertiesTitle: "Template properties",
		browseRFT: "Browse raster function templates",
		defaultToolDescription: "${toolTitle} analysis tool.",
		openToolText: "Open Tool",
		toolDropdownText: "Tool Dropdown",
		addToMap: "Confirm and add to map",
		confirm: "Confirm",
		select: "Select",
		selectTask: "Select task",
		unsupportedLayer: "This parameter does not support the following layers: ${layerName}.",
		viewDetails: "View full item details",
		rename: "Rename",
		duplicate: "Duplicate",
		launch: "Open to run",
		templateEditor: "Template Editor",
		createItem: "Save Raster Function Template",
		actionLabel: "Filter",
		filterPopoverHeading: "Filter the functions",
		defaultSearchPlaceholder: "Search by name",
		settings: "Settings",
		summary: "Summary",
		definitionQuery: "Definition query",
		matchVariables: "Match variables",
		unionDimension: "Union dimension",
		nameEditorPlaceholder: "Enter title",
		summaryEditorPlaceholder: "Enter a short description.",
		definitionQueryPlaceholder: "Enter...",
		upload: "Upload",
		chooseImage: "Click to choose a file",
		update: "Update",
		thumbnailErrors: {
			wrongImageType: "Wrong image type selected",
			notAvailable: "Thumbnail not available",
			loadError: "Couldn't load the image",
			chooseFile: "Click to choose file"
		}
	}
};
const copy = "Copy";
const save = "Save";
const title = "Title";
const folder = "Folder";
const tags = "Tags";
const savingMessage = "Saving item to";
const shareWith = "Share With";
const share = "Share";
const setSharingLevel = "Set Sharing Level";
const setGroupSharing = "Set Group Sharing";
const owner = "Owner";
const organization = "Organization";
const everyone = "Everyone (public)";
const groups = "Groups:";
const type = "Type";
const mosaic = "Mosaic";
const itemGroup = "Item Group";
const item = "Item";
const definitionQuery = "Definition Query";
const groupItemsBy = "Group Items By";
const groupFieldName = "Group Field Name";
const tagFieldName = "Tag Field Name";
const noTitleTagErrorMsg = "You must provide a title for your item and tags to allow your map to be found through searches.";
const noTitleErrorMsg = "You must provide a title for your item.";
const noTagErrorMsg = "You must provide at least one tag to help people find your item through searches.";
const error = "Error";
const warning = "Warning";
const success = "Success";
const details = "Details:";
const tryAgain = "Try Again";
const toolModeler = {
	save: "Save",
	editProperties: "Edit Properties",
	saveAs: "Save As",
	savingNotification: "Saving changes to item...",
	savingTitle: "Saving",
	saveFailedMessage: "Failed to save changes.",
	saveWithErrorsMessage: "Changes were saved with the following errors.",
	viewItemMessage: "View the saved item",
	here: "here.",
	itemCreatedMessage: "New item has been created.",
	clickToViewItemMessage: "Click OK to view the item details page; click Cancel to continue.",
	readingFailed: "Failed to load the selected raster function template.",
	failedToLoadXML: "Failed to load the selected raster function template in XML format.",
	learnMore: "Learn more",
	overwriteTitle: "Confirm overwrite",
	overwriteMessage: "Do you want to overwrite existing item?",
	overwriteSuccessMessage: "Item has been updated."
};
const toolEditor = {
	run: "Run",
	save: "Save",
	deleteSelected: "Delete Selected Items",
	addRaster: "Add Raster",
	addScalar: "Add Scalar",
	layout: "Auto Layout",
	errorTitle: "Error",
	invalidToolMessage: "Raster function template is not valid.",
	out: "Out",
	zoomIn: "Zoom In",
	zoomOut: "Zoom Out",
	zoomToFit: "Fit to Window",
	panOn: "Switch to pan mode",
	panOff: "Turn off pan mode",
	defaultModelName: "Tool Model",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Raster Function Template",
	defaultToolDescription: "Add a brief summary about the raster function.",
	defaultHelpText: "Click on the help icon to edit the help text",
	editHelpTitle: "Edit Help",
	saveLabel: "Save",
	cancelLabel: "Cancel",
	thumbnail: {
		wrongImageType: "Wrong image type selected",
		notAvailable: "Thumbnail not available",
		loadError: "Couldn't load the image",
		chooseFile: "Click to choose file"
	}
};
const saveUtils = {
	thumbnail: "Thumbnail",
	sharing: "Sharing"
};
const close = "Close";
const unsavedWarningExisting = "Would you like to save changes to the item <b>${itemTitle}</b> ?";
const unsavedWarningNew = "Would you like to save your changes?";
const saveAs = "Save As";
const dontSave = "Don't Save";
const unsavedTitle = "Unsaved Changes";
const invalidRFTMessage = "The created raster function template is not valid.";
const errorTitle = "Error";
const breadcrumb = "Raster Function Editor";
const breadcrumbEditor = "Content > Raster Function Editor";
const viewerModeTitle = "Read Only";
const viewerModeMessage = "Raster function template item is read-only. Changes can not be saved.";
const userStartDirection = "Select a function to start building a raster function template.";
const selectFunction = "Add Function";
const deselectFunction = "Remove Function";
const dialogTitle = "System";
const category = "Categories";
const search = "Search Raster Functions";
const categoryNames = {
	analysis: "Analysis",
	appearance: "Appearance",
	classification: "Classification",
	conversion: "Conversion",
	correction: "Correction",
	dataManagement: "Data Management",
	distance: "Distance",
	distanceLegacy: "Distance (Legacy)",
	hydrology: "Hydrology",
	math: "Math",
	mathConditional: "Math: Conditional",
	mathLogical: "Math: Logical",
	mathTrigonometric: "Math: Trigonometric",
	reclass: "Reclass",
	statistical: "Statistical",
	surface: "Surface"
};
const commonStrings_en = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_en);


//# sourceMappingURL=common-strings.en-c610c1cd.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,