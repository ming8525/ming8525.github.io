"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-070c8a"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js":
/*!**************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ addItemState),
/* harmony export */   b: () => (/* binding */ addItemUrlState),
/* harmony export */   c: () => (/* binding */ addItemRequestState),
/* harmony export */   d: () => (/* binding */ addItemStore)
/* harmony export */ });
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const addItemStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__.c)({
    typeKeywords: [],
    customParameters: [],
    analyzedLocationTypes: [],
    allowStoredAuth: true,
    isSecured: null,
    checkAuth: false
});
// Entire add item state object
const addItemState = addItemStore.state;
// Subsets of add item state
const addItemRequestState = addItemStore.state;
const addItemUrlState = addItemStore.state;



//# sourceMappingURL=add-item-dbbe2f57.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-tile-layer-select.entry.js":
/*!******************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-new-item-pages-tile-layer-select.entry.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_new_item_pages_tile_layer_select: () => (/* binding */ ArcgisNewItemPagesTileLayerSelect)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./add-item-dbbe2f57.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js");
/* harmony import */ var _ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui-bca7bcd1.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-bca7bcd1.js");
/* harmony import */ var _tile_layer_cf04fa97_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tile-layer-cf04fa97.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-cf04fa97.js");
/* harmony import */ var _tile_layer_f0f9ef4b_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tile-layer-f0f9ef4b.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-f0f9ef4b.js");
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */








const arcgisNewItemPagesTileLayerSelectCss = ".tile-select{margin-top:1.25rem}.tile-select:not(:last-child){margin-bottom:2.5rem}";

const ArcgisNewItemPagesTileLayerSelect = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.newItemUpdatePage = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "newItemUpdatePage", 7);
        this.rasterOptions = {
            upload: { icon: "upload-to", page: "layerUpload" },
            store: { icon: "data-cloud", page: "dataStoreList" },
            existing: { icon: "layers", page: "tileLayerFromExisting" }
        };
        this.vectorOptions = {
            upload: { icon: "upload-to", page: "layerUpload" },
            store: { icon: "data-cloud", page: "dataStoreList" },
            existing: { icon: "layers", page: "tileLayerFromExisting" }
        };
        this.selectedSource = "existing";
        this.selectedLayerType = "vector";
        this.options = this.vectorOptions;
    }
    async componentWillLoad() {
        this.selectedSource = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.addTileLayerOption || "upload";
        const storeTileLayerPublishType = _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.tileLayerPublishType;
        this.selectedLayerType =
            storeTileLayerPublishType === "3dTiles"
                ? "3dTiles"
                : storeTileLayerPublishType === "tiles"
                    ? "raster"
                    : "vector";
        this.i18n = _ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_3__.u.i18n.tileLayerSelect;
    }
    handleNewLayerTypeChange(newType) {
        const { rasterOptions, vectorOptions, selectedSource } = this;
        const isPortal = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.isPortal;
        this.selectedLayerType = newType;
        this.options = newType === "raster" ? rasterOptions : vectorOptions;
        if (
        // ! We don't support publishing a vector tile layer from feature layer in Enterprise
        (newType === "vector" && selectedSource === "existing" && isPortal) ||
            // ! This is the only option for 3dTiles
            newType === "3dTiles") {
            this.selectedSource = "upload";
        }
    }
    handleNext() {
        const { selectedSource, selectedLayerType } = this;
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.addTileLayerOption = selectedSource;
        _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_2__.a.tileLayerPublishType =
            selectedLayerType === "3dTiles"
                ? "3dTiles"
                : selectedLayerType === "raster"
                    ? "tiles"
                    : "vectorTiles";
        (0,_tile_layer_f0f9ef4b_js__WEBPACK_IMPORTED_MODULE_5__.b)();
        this.newItemUpdatePage.emit(this.options[selectedSource].page);
    }
    render() {
        const { i18n, options, selectedLayerType } = this;
        const isPortal = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.portal.isPortal;
        const { helpMap, helpBase } = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_1__.c.config;
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-description", { header: i18n.layerTypeHeading, headerLink: {
                text: _ui_bca7bcd1_js__WEBPACK_IMPORTED_MODULE_3__.u.i18n.common.learnMore,
                href: `${helpBase}${helpMap["120003719"]}`
            } }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select-group", { layout: "vertical", class: "tile-select" }, _tile_layer_cf04fa97_js__WEBPACK_IMPORTED_MODULE_4__.d.map((layerType) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select", { checked: this.selectedLayerType === layerType, heading: i18n.layerTypeOptions[layerType].title, description: i18n.layerTypeOptions[layerType].description, name: "tile-layer-type", "input-enabled": true, width: "full", type: "radio", value: layerType, onCalciteTileSelectChange: (e) => {
                const newType = e.target.value;
                this.handleNewLayerTypeChange(newType);
            } })))), selectedLayerType !== "3dTiles" && ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.F, null, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("arcgis-new-item-description", { header: i18n.sourceHeading }), (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select-group", { layout: "vertical", class: "tile-select" }, Object.keys(options)
            .filter((option) => isPortal
            ? option !== "existing" || selectedLayerType === "raster"
            : option !== "store")
            .map((key, index) => ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-tile-select", { key: `${key}-${index}`, checked: this.selectedSource === key, heading: i18n.sourceOptions[key][key === "upload" && selectedLayerType === "raster" ? "titleRaster" : "title"], description: i18n.sourceOptions[key][key === "upload" && selectedLayerType === "raster"
                ? "rasterDescription"
                : "description"], name: "tile-layer-create-mode", "input-enabled": true, width: "full", type: "radio", value: key, onCalciteTileSelectChange: (e) => {
                this.selectedSource = e.target.value;
            } }))))))));
    }
    get el() { return (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.d)(this); }
};
ArcgisNewItemPagesTileLayerSelect.style = arcgisNewItemPagesTileLayerSelectCss;



//# sourceMappingURL=arcgis-new-item-pages-tile-layer-select.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js":
/*!************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ configState),
/* harmony export */   o: () => (/* binding */ onConfigChange)
/* harmony export */ });
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const configStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__.c)({
    portal: null,
    user: null,
    api: 4,
    scale: "m"
});
const configState = configStore.state;
const onConfigChange = configStore.onChange;



//# sourceMappingURL=config-75adf962.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js":
/*!***********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createStore)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.g)();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.f));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};



//# sourceMappingURL=index-05956cab.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-cf04fa97.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-cf04fa97.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DEFAULT_TILE_LAYER_3D_TILES_LAYER_TYPE),
/* harmony export */   T: () => (/* binding */ TILE_LAYER_SCALE_MIN),
/* harmony export */   a: () => (/* binding */ presetRasterTileCacheInfo),
/* harmony export */   b: () => (/* binding */ presetVectorTileImageInfo),
/* harmony export */   c: () => (/* binding */ presetRasterTileImageInfo),
/* harmony export */   d: () => (/* binding */ tileLayerTypes),
/* harmony export */   e: () => (/* binding */ TILE_LAYER_SCALE_MAX),
/* harmony export */   f: () => (/* binding */ tileLayerBasemaps),
/* harmony export */   g: () => (/* binding */ presetLods),
/* harmony export */   p: () => (/* binding */ presetVectorTileCacheInfo),
/* harmony export */   t: () => (/* binding */ tilesLayer3dTilesLayerTypes)
/* harmony export */ });
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */
const tileLayerBasemaps = ["standard", "custom"];
const tilesLayer3dTilesLayerTypes = ["IntegratedMesh", "3DObject"];
const DEFAULT_TILE_LAYER_3D_TILES_LAYER_TYPE = tilesLayer3dTilesLayerTypes[0];
const tileLayerTypes = ["vector", "raster", "3dTiles"];
// TODO: switch this back once the SettingTileLayer supports this number
// export const TILE_LAYER_SCALE_MIN = 591657527.591555;
const TILE_LAYER_SCALE_MIN = 147914382;
const TILE_LAYER_SCALE_MAX = 0;
const presetLods = [
    { level: 0, label: "1:591,657,528", scale: 591657527.591555 },
    { level: 1, label: "1:295,828,764", scale: 295828763.795777 },
    { level: 2, label: "1:147,914,382", scale: 147914381.897889 },
    { level: 3, label: "1:73,957,191", scale: 73957190.948944 },
    { level: 4, label: "1:36,978,595", scale: 36978595.474472 },
    { level: 5, label: "1:18,489,298", scale: 18489297.737236 },
    { level: 6, label: "1:9,244,649", scale: 9244648.868618 },
    { level: 7, label: "1:4,622,324", scale: 4622324.434309 },
    { level: 8, label: "1:2,311,162", scale: 2311162.217155 },
    { level: 9, label: "1:1,155,581", scale: 1155581.108577 },
    { level: 10, label: "1:577,791", scale: 577790.554289 },
    { level: 11, label: "1:288,895", scale: 288895.277144 },
    { level: 12, label: "1:144,448", scale: 144447.638572 },
    { level: 13, label: "1:72,224", scale: 72223.819286 },
    { level: 14, label: "1:36,112", scale: 36111.909643 },
    { level: 15, label: "1:18,056", scale: 18055.954822 },
    { level: 16, label: "1:9,028", scale: 9027.977411 },
    { level: 17, label: "1:4,514", scale: 4513.988705 },
    { level: 18, label: "1:2,257", scale: 2256.994353 },
    { level: 19, label: "1:1,128", scale: 1128.497176 },
    { level: 20, label: "1:564", scale: 564.248588 },
    { level: 21, label: "1:282", scale: 282.124294 },
    { level: 22, label: "1:141", scale: 141.062147 }
];
const presetRasterTileCacheInfo = {
    spatialReference: { wkid: 102100, latestWkid: 3857 },
    origin: { x: -20037508.342787, y: 20037508.342787 },
    rows: 256,
    cols: 256,
    dpi: 96,
    preciseDpi: 96,
    lods: [
        { level: 0, resolution: 156543.033928, scale: 591657527.591555 },
        { level: 1, resolution: 78271.5169639999, scale: 295828763.795777 },
        { level: 2, resolution: 39135.7584820001, scale: 147914381.897889 },
        { level: 3, resolution: 19567.8792409999, scale: 73957190.948944 },
        { level: 4, resolution: 9783.93962049996, scale: 36978595.474472 },
        { level: 5, resolution: 4891.96981024998, scale: 18489297.737236 },
        { level: 6, resolution: 2445.98490512499, scale: 9244648.868618 },
        { level: 7, resolution: 1222.99245256249, scale: 4622324.434309 },
        { level: 8, resolution: 611.49622628138, scale: 2311162.217155 },
        { level: 9, resolution: 305.748113140558, scale: 1155581.108577 },
        { level: 10, resolution: 152.874056570411, scale: 577790.554289 },
        { level: 11, resolution: 76.4370282850732, scale: 288895.277144 },
        { level: 12, resolution: 38.2185141425366, scale: 144447.638572 },
        { level: 13, resolution: 19.1092570712683, scale: 72223.819286 },
        { level: 14, resolution: 9.55462853563415, scale: 36111.909643 },
        { level: 15, resolution: 4.77731426794937, scale: 18055.954822 },
        { level: 16, resolution: 2.38865713397468, scale: 9027.977411 },
        { level: 17, resolution: 1.19432856685505, scale: 4513.988705 },
        { level: 18, resolution: 0.597164283559817, scale: 2256.994353 },
        { level: 19, resolution: 0.298582141647617, scale: 1128.497176 },
        { level: 20, resolution: 0.14929107082380833, scale: 564.248588 },
        { level: 21, resolution: 0.07464553541190416, scale: 282.124294 },
        { level: 22, resolution: 0.03732276770595208, scale: 141.062147 }
    ]
};
const presetVectorTileCacheInfo = {
    spatialReference: {
        wkid: 102100,
        latestWkid: 3857
    },
    origin: {
        x: -2.0037508342787e7,
        y: 2.0037508342787e7
    },
    rows: 512,
    cols: 512,
    dpi: 96,
    preciseDpi: 96,
    lods: [
        { level: 0, resolution: 78271.51696399994, scale: 2.95828763795777e8 },
        { level: 1, resolution: 39135.75848200009, scale: 1.47914381897889e8 },
        { level: 2, resolution: 19567.87924099992, scale: 7.3957190948944e7 },
        { level: 3, resolution: 9783.93962049996, scale: 3.6978595474472e7 },
        { level: 4, resolution: 4891.96981024998, scale: 1.8489297737236e7 },
        { level: 5, resolution: 2445.98490512499, scale: 9244648.868618 },
        { level: 6, resolution: 1222.992452562495, scale: 4622324.434309 },
        { level: 7, resolution: 611.4962262813797, scale: 2311162.217155 },
        { level: 8, resolution: 305.74811314055756, scale: 1155581.108577 },
        { level: 9, resolution: 152.87405657041106, scale: 577790.554289 },
        { level: 10, resolution: 76.43702828507324, scale: 288895.277144 },
        { level: 11, resolution: 38.21851414253662, scale: 144447.638572 },
        { level: 12, resolution: 19.10925707126831, scale: 72223.819286 },
        { level: 13, resolution: 9.554628535634155, scale: 36111.909643 },
        { level: 14, resolution: 4.77731426794937, scale: 18055.954822 },
        { level: 15, resolution: 2.388657133974685, scale: 9027.977411 },
        { level: 16, resolution: 1.1943285668550503, scale: 4513.988705 },
        { level: 17, resolution: 0.5971642835598172, scale: 2256.994353 },
        { level: 18, resolution: 0.29858214164761665, scale: 1128.497176 },
        { level: 19, resolution: 0.14929107082380833, scale: 564.248588 },
        { level: 20, resolution: 0.07464553541190416, scale: 282.124294 },
        { level: 21, resolution: 0.03732276770595208, scale: 141.062147 },
        { level: 22, resolution: 0.01866138385297604, scale: 70.5310735 },
        { level: 23, resolution: 0.0093306919293428040466217365, scale: 35.265536760789715032412079626 }
    ]
};
const presetVectorTileImageInfo = {
    format: "indexedVector",
    compressionQuality: 0,
    antialiasing: false
};
const presetRasterTileImageInfo = {
    format: "PNG32",
    compressionQuality: 0,
    antialiasing: true
};



//# sourceMappingURL=tile-layer-cf04fa97.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-f0f9ef4b.js":
/*!****************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/tile-layer-f0f9ef4b.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ logTileLayerFinish),
/* harmony export */   b: () => (/* binding */ logTileLayerFromOption),
/* harmony export */   l: () => (/* binding */ logTileLayerStart)
/* harmony export */ });
/* harmony import */ var _config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config-75adf962.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/config-75adf962.js");
/* harmony import */ var _add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./add-item-dbbe2f57.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/add-item-dbbe2f57.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */



const TELEMETRY_ID = "create tile layer";
const TELEMETRY_PAGE_NAME = "my content";
const mapTileLayerOptionToTelemetry = (type) => {
    switch (type) {
        case "store":
            return "data store";
        case "existing":
            return "fs";
        case "upload":
            return "upload";
    }
};
const mapTileLayerTypeToTelemetry = (type) => {
    switch (type) {
        case "tiles":
            return "raster";
        case "vectorTiles":
            return "vector";
    }
};
const logTileLayerStart = () => {
    var _a;
    (_a = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__.c.telemetry) === null || _a === void 0 ? void 0 : _a.startWorkflow(TELEMETRY_ID, {
        category: "create tile layer",
        pageName: "my content"
    });
};
const logTileLayerFromOption = () => {
    const telemetry = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__.c.telemetry;
    telemetry === null || telemetry === void 0 ? void 0 : telemetry.stepWorkflow(TELEMETRY_ID, "from option", {
        category: TELEMETRY_ID,
        attribute: mapTileLayerOptionToTelemetry(_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_1__.a.addTileLayerOption),
        details: mapTileLayerTypeToTelemetry(_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_1__.a.tileLayerPublishType),
        pageName: TELEMETRY_PAGE_NAME
    });
};
const logTileLayerFinish = () => {
    const telemetry = _config_75adf962_js__WEBPACK_IMPORTED_MODULE_0__.c.telemetry;
    telemetry === null || telemetry === void 0 ? void 0 : telemetry.endWorkflow(TELEMETRY_ID, {
        category: TELEMETRY_ID,
        attribute: mapTileLayerOptionToTelemetry(_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_1__.a.addTileLayerOption),
        details: mapTileLayerTypeToTelemetry(_add_item_dbbe2f57_js__WEBPACK_IMPORTED_MODULE_1__.a.tileLayerPublishType),
        pageName: TELEMETRY_PAGE_NAME
    });
};



//# sourceMappingURL=tile-layer-f0f9ef4b.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-bca7bcd1.js":
/*!********************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/ui-bca7bcd1.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ uiStore),
/* harmony export */   u: () => (/* binding */ uiStoreState)
/* harmony export */ });
/* harmony import */ var _index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-05956cab.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-05956cab.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const uiStore = (0,_index_05956cab_js__WEBPACK_IMPORTED_MODULE_0__.c)({
    nextText: "next",
    workflow: "content",
    scale: "m",
    disableScroll: false,
    featureFlags: {}
});
const uiStoreState = uiStore.state;



//# sourceMappingURL=ui-bca7bcd1.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,