"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-adedff"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-filtered-argument-editor-4701fe37.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-filtered-argument-editor-4701fe37.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ RfxFilteredArgumentEditor)
/* harmony export */ });
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _functions_f1f2dffd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./functions-f1f2dffd.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/functions-f1f2dffd.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rfx-args-helper-ab401543.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-args-helper-ab401543.js");
/* harmony import */ var _layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./layer-helper-3867eef7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/layer-helper-3867eef7.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");














const HelpClickHandlerKeys = {
    inputArgHelpClickHandler: "inputArgHelpClickHandler"
};

const TRIGGER_ATTRIBUTE_IDENTIFIER = {
    PIXEL_TYPE: "pixelType",
    VALUE: "value"
};
const RfxFilteredArgumentEditor = class {
    constructor(hostRef) {
        (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.rfxArgumentChange = (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "rfxArgumentChange", 7);
        /**
         * Map maintained to keep track of all pixelTypeFilters passed from
         * triggerAttributes.
         */
        this.pixelTypeFilters = {};
        /**
         * Map maintained to keep track of all valueFilters passed from
         * triggerAttributes.
         */
        this.valueFilters = {};
        /**
         * Stores event handlers for help action click, stored in connected callback to avoid
         * fetching function on each render ( to avoid common bad practice )
         */
        this.helpActionClickEventHandlers = new Map();
        this.handleInputChange = (e) => {
            e.stopPropagation();
            const element = e.target;
            const value = this.storeType === "number" ? Number(element.value) : element.value;
            this.inputArg.value = value;
            this.value = value;
            this.rfxArgumentChange.emit({ value });
        };
        this.value = undefined;
        this.widgetArgs = undefined;
        this.store = [];
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    connectedCallback() {
        this.processWidgetArgs(this.widgetArgs);
        this.initializeTriggerAttributes(this.widgetArgs);
    }
    componentWillLoad() {
        // ({ strings: this.strings, dir: this.direction } = await fetchComponentLocaleStrings(
        //   this.hostElement,
        //   getAssetPath(`.`)
        // ));
        this.setInitialState();
    }
    async componentDidLoad() {
        await this.applyTriggerAttributeFilters(this.widgetArgs);
        this.attachTriggerArgsChangeListener(this.widgetArgs);
        this.attachHelpClickEventHandlers();
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    /**
     * All validation logic of widgetArgs -> mainly the inputArgs and triggerAttributes
     * goes here
     */
    processWidgetArgs({ inputArgs }) {
        // should have only one inputArg
        Object.keys(inputArgs).forEach((_inputArg) => {
            const rfxArg = inputArgs[_inputArg];
            this.inputArg = rfxArg;
            rfxArg.input = this.hostElement;
        });
    }
    attachTriggerArgsChangeListener({ triggerArgs }) {
        // Attach change listeners to triggerArgs
        Object.keys(triggerArgs).forEach((triggerArg) => {
            const inputWidget = triggerArgs[triggerArg].input;
            if (inputWidget) {
                inputWidget.addEventListener("rfxArgumentChange", () => {
                    this.applyTriggerAttributeFilters({ triggerArgs });
                });
            }
            else {
                console.error(`input not set on ${triggerArgs[triggerArg].displayName}`);
            }
        });
    }
    attachHelpClickEventHandlers() {
        const inputArgHelpClickHandler = this.widgetArgs.onHelpActionClick({
            heading: this.inputArg.displayName,
            referenceElement: this.widgetContainer,
            helpTextID: this.inputArg?.helpTextID
        });
        this.helpActionClickEventHandlers.set(HelpClickHandlerKeys.inputArgHelpClickHandler, inputArgHelpClickHandler);
    }
    /**
     * Initializes trigger attributes based on the `triggerAttributes` string passed in the `widgetArgs` object.
     *
     * @param {Object} widgetArgs - The widget arguments object.
     * @param {string} widgetArgs.triggerAttributes - The trigger attributes string in the format "pixelType:Raster,float,3|2|5|7|8|9;value:NeighborhoodType,6,3|8|9".
     *
     * `triggerAttributes` format "pixelType:Raster,float,3|2|5|7|8|9;value:NeighborhoodType,6,3|8|9".
     * This means that if the pixel type of the "Raster" argument is floating point,
     * then the domain of this argument is restricted to the values 3, 2, 5, 7, 8, or 9.
     * And, if the value of the "NeighborhoodType" argument is 6, then the domain of this argument is 3, 8, or 9.
     * The final argument domain is the intersection of the filtered domains.
     */
    initializeTriggerAttributes({ triggerAttributes }) {
        const argsList = triggerAttributes.trim().split(";");
        for (const attribute of argsList) {
            const [type, conditionsStr] = attribute.trim().split(":");
            const conditions = conditionsStr.trim().split(",");
            const filterArg = {
                dependFieldName: conditions[0],
                dependFieldValue: conditions[1].trim().split("|"),
                filteredValue: conditions[2].trim().split("|"),
                isApplied: false
            };
            const actions = {
                [TRIGGER_ATTRIBUTE_IDENTIFIER.PIXEL_TYPE]: () => (this.pixelTypeFilters[filterArg.dependFieldName] = filterArg),
                [TRIGGER_ATTRIBUTE_IDENTIFIER.VALUE]: () => (this.valueFilters[filterArg.dependFieldName] = filterArg)
            };
            actions[type]();
        }
    }
    async applyPixelTypeFilters({ triggerArg, inputWidget, triggerArgValue }) {
        const pixelFilter = this.pixelTypeFilters[triggerArg];
        pixelFilter.isApplied = false;
        if (!triggerArgValue) {
            return pixelFilter.isApplied;
        }
        const layer = await inputWidget?.getSelectedLayer?.();
        await layer.load();
        const pixelType = layer.pixelType ?? layer.rasterInfo?.pixelType;
        if ((0,_layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_5__.i)(pixelType)) {
            pixelFilter.isApplied = true;
            return pixelFilter.isApplied;
        }
        return pixelFilter.isApplied;
    }
    async applyValueTypeFilter({ triggerArg, triggerArgValue }) {
        const valueFilter = this.valueFilters[triggerArg];
        valueFilter.isApplied = false;
        if (!valueFilter.dependFieldValue.includes(triggerArgValue.toString())) {
            return Promise.resolve(valueFilter.isApplied);
        }
        valueFilter.isApplied = true;
        return Promise.resolve(valueFilter.isApplied);
    }
    /**
     * Applies trigger attribute filters based on the provided trigger arguments.
     *
     * @param {Object} options.triggerArgs - The trigger arguments.
     * @returns {Promise<void>} - A promise that resolves after the filters have been applied.
     */
    async applyTriggerAttributeFilters({ triggerArgs }) {
        let shouldApplyFilter = false;
        let filterValue;
        // Action functions for different trigger attribute types.
        const actions = {
            [TRIGGER_ATTRIBUTE_IDENTIFIER.PIXEL_TYPE]: this.applyPixelTypeFilters.bind(this),
            [TRIGGER_ATTRIBUTE_IDENTIFIER.VALUE]: this.applyValueTypeFilter.bind(this)
        };
        // Iterate through each trigger argument; Can have 2 Trigger Arguments
        // If two trigger Arguments are present usually both are of different "type", this intentionally gives priority to second triggerArg.
        for (const triggerArg of Object.keys(triggerArgs)) {
            const inputWidget = triggerArgs[triggerArg].input;
            const triggerArgValue = triggerArgs[triggerArg].value ?? inputWidget ? inputWidget.value : undefined;
            // Skip if trigger argument value is empty
            if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(triggerArgValue) === true) {
                continue;
            }
            let type, filterArg;
            // Determine the type and filter argument based on the trigger argument
            if (this.pixelTypeFilters.hasOwnProperty(triggerArg)) {
                filterArg = this.pixelTypeFilters[triggerArg];
                type = TRIGGER_ATTRIBUTE_IDENTIFIER.PIXEL_TYPE;
            }
            else if (this.valueFilters.hasOwnProperty(triggerArg)) {
                filterArg = this.valueFilters[triggerArg];
                type = TRIGGER_ATTRIBUTE_IDENTIFIER.VALUE;
            }
            else {
                console.error("Trigger Arg is not part of triggerAttributes! check schema.");
                return;
            }
            // Apply the filter based on the type
            if (type in actions) {
                const applyFilter = await actions[type]({ inputWidget, triggerArg, triggerArgValue });
                if (applyFilter === true) {
                    shouldApplyFilter = true;
                    filterValue = filterArg.filteredValue;
                }
            }
            else {
                console.error("invalid triggerAttributes! check schema.");
            }
        }
        // Apply or reset the filter based on the conditions
        if (shouldApplyFilter === true) {
            this.applyFilterToStore(filterValue);
        }
        else {
            this.resetStore();
        }
        // Set the default value if the current value is invalid; Done so that select "always" has a value selected
        const value = String(this.value);
        const isvalueValid = this.store.some((storeOption) => storeOption.key === value);
        if (isvalueValid !== true) {
            // Set first option as selected
            const firstOptionKey = this.storeType === "number" ? Number(this.store[0]?.key) : this.store[0]?.key;
            this.value = firstOptionKey;
        }
    }
    applyFilterToStore(filterValue) {
        const getFilteredStore = (store, filterList) => {
            return store.filter((item) => filterList.some((listItem) => item.key === listItem));
        };
        const store = getFilteredStore(this.initialStore, filterValue);
        this.store = store;
    }
    resetStore() {
        this.store = this.initialStore;
    }
    setInitialState() {
        const { rfxArgs, rasterFunctions } = this.widgetArgs;
        const widgetName = (0,_functions_f1f2dffd_js__WEBPACK_IMPORTED_MODULE_1__.e)(rfxArgs);
        const rasterFunction = rasterFunctions[widgetName];
        const rasterFunctionArguments = rasterFunction?.rasterFunctionArguments;
        const inputArgName = this.inputArg.name;
        this.value = this.inputArg.value;
        const inputArgDomain = rasterFunctionArguments?.[inputArgName]?.domain;
        if (inputArgDomain?.type === "list") {
            // const enumData = rfxUtils.coerceEnumDataForCurrentEnv(this.rfxArgs, inputArgDomain.enum, this.portalMode);
            const enumData = inputArgDomain.enum;
            this.store = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_4__.j)(enumData);
        }
        else {
            console.error("Invalid inputArg! Check Schema");
        }
        this.storeType = typeof this.store?.[0]?.key; /* "number" | "string" */
        this.store?.forEach((enumElement) => {
            enumElement.key = enumElement.key.toString();
        });
        this.initialStore = (0,_rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_4__.j)(this.store);
        if ((0,_type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_3__.i)(this.store)) {
            console.error("Domain list Enum not set! Check Schema");
        }
    }
    render() {
        return ((0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { alignment: "start", scale: _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_2__.U.Scale, layout: "default", ref: (e) => {
                this.widgetContainer = e;
            } }, (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-label", { label: this.inputArg.displayName, onRfxLabelHelpActionClick: () => this.helpActionClickEventHandlers?.get(HelpClickHandlerKeys.inputArgHelpClickHandler)() }), (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.h)("rfx-dtex-common-select", { options: this.store, value: String(this.value), onRfxArgumentChange: this.handleInputChange }))));
    }
    static get assetsDirs() { return ["t9n"]; }
    get hostElement() { return (0,_index_da1b7138_js__WEBPACK_IMPORTED_MODULE_0__.a)(this); }
};



//# sourceMappingURL=rfx-cte-filtered-argument-editor-4701fe37.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-filtered-argument-editor.entry.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-filtered-argument-editor.entry.js ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   rfx_cte_filtered_argument_editor: () => (/* reexport safe */ _rfx_cte_filtered_argument_editor_4701fe37_js__WEBPACK_IMPORTED_MODULE_0__.R)
/* harmony export */ });
/* harmony import */ var _rfx_cte_filtered_argument_editor_4701fe37_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rfx-cte-filtered-argument-editor-4701fe37.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-cte-filtered-argument-editor-4701fe37.js");
/* harmony import */ var _index_da1b7138_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-da1b7138.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/index-da1b7138.js");
/* harmony import */ var _functions_f1f2dffd_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./functions-f1f2dffd.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/functions-f1f2dffd.js");
/* harmony import */ var _arcgis_core_core_lang_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @arcgis/core/core/lang.js */ "@arcgis/core/core/lang.js");
/* harmony import */ var _resources_27c66f5c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resources-27c66f5c.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/resources-27c66f5c.js");
/* harmony import */ var _localization_helper_4819b67d_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./localization-helper-4819b67d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/localization-helper-4819b67d.js");
/* harmony import */ var _type_gaurds_1840747f_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./type-gaurds-1840747f.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/type-gaurds-1840747f.js");
/* harmony import */ var _getTag_96af029d_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_getTag-96af029d.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_getTag-96af029d.js");
/* harmony import */ var _ui_utils_928a4096_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ui-utils-928a4096.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js");
/* harmony import */ var _rfx_args_helper_ab401543_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./rfx-args-helper-ab401543.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/rfx-args-helper-ab401543.js");
/* harmony import */ var _interfaces_d0c68944_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./interfaces-d0c68944.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/interfaces-d0c68944.js");
/* harmony import */ var _layer_helper_3867eef7_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./layer-helper-3867eef7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/layer-helper-3867eef7.js");
/* harmony import */ var _arcgis_core_identity_IdentityManager_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @arcgis/core/identity/IdentityManager.js */ "@arcgis/core/identity/IdentityManager.js");
/* harmony import */ var _arcgis_core_core_urlUtils_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @arcgis/core/core/urlUtils.js */ "@arcgis/core/core/urlUtils.js");
/* harmony import */ var _arcgis_core_layers_Layer_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @arcgis/core/layers/Layer.js */ "@arcgis/core/layers/Layer.js");
/* harmony import */ var _arcgis_core_layers_ImageryLayer_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @arcgis/core/layers/ImageryLayer.js */ "@arcgis/core/layers/ImageryLayer.js");
/* harmony import */ var _arcgis_core_smartMapping_raster_renderers_stretch_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @arcgis/core/smartMapping/raster/renderers/stretch.js */ "@arcgis/core/smartMapping/raster/renderers/stretch.js");
/* harmony import */ var _common_fda1462e_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./common-fda1462e.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-fda1462e.js");
/* harmony import */ var _arcgis_core_request_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @arcgis/core/request.js */ "@arcgis/core/request.js");
/* harmony import */ var _Uint8Array_68e1e3f9_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./_Uint8Array-68e1e3f9.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/_Uint8Array-68e1e3f9.js");
/* harmony import */ var _arcgis_core_rest_support_AlgorithmicColorRamp_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @arcgis/core/rest/support/AlgorithmicColorRamp.js */ "@arcgis/core/rest/support/AlgorithmicColorRamp.js");
/* harmony import */ var _arcgis_core_rest_support_MultipartColorRamp_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @arcgis/core/rest/support/MultipartColorRamp.js */ "@arcgis/core/rest/support/MultipartColorRamp.js");
/* harmony import */ var _arcgis_core_Color_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @arcgis/core/Color.js */ "@arcgis/core/Color.js");
/* harmony import */ var _colorRampUtils_8bdd46c5_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./colorRampUtils-8bdd46c5.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/colorRampUtils-8bdd46c5.js");
/* harmony import */ var _arcgis_core_rest_geoprocessor_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @arcgis/core/rest/geoprocessor.js */ "@arcgis/core/rest/geoprocessor.js");
/* harmony import */ var _arcgis_core_portal_PortalItem_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @arcgis/core/portal/PortalItem.js */ "@arcgis/core/portal/PortalItem.js");



























//# sourceMappingURL=rfx-cte-filtered-argument-editor.entry.js.map

/***/ }),

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js":
/*!*****************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/ui-utils-928a4096.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ CalciteScale),
/* harmony export */   U: () => (/* binding */ UIDefaults),
/* harmony export */   a: () => (/* binding */ CalciteOverlayPositioning)
/* harmony export */ });
const UIDefaults = {
    Scale: "s",
    PopoverTimer: 60
};
const CalciteScale = {
    s: "s",
    m: "m"
};
const CalciteOverlayPositioning = {
    absolute: "absolute",
    fixed: "fixed"
};



//# sourceMappingURL=ui-utils-928a4096.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,