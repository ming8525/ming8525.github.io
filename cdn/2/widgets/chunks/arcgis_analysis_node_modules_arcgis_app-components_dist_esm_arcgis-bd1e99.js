"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_app-components_dist_esm_arcgis-bd1e99"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-classification-input-checkbox_6.entry.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/arcgis-item-classification-input-checkbox_6.entry.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   arcgis_item_classification_input_checkbox: () => (/* binding */ ArcgisItemClassificationInputCheckbox),
/* harmony export */   arcgis_item_classification_input_date: () => (/* binding */ ArcgisItemClassificationInputDate),
/* harmony export */   arcgis_item_classification_input_grouped_multiple_selection: () => (/* binding */ ArcgisItemClassificationInputGroupedMultipleSelection),
/* harmony export */   arcgis_item_classification_input_multiple_selection: () => (/* binding */ ArcgisItemClassificationInputMultipleSelection),
/* harmony export */   arcgis_item_classification_input_single_selection: () => (/* binding */ ArcgisItemClassificationInputSingleSelection),
/* harmony export */   arcgis_item_classification_input_textbox: () => (/* binding */ ArcgisItemClassificationInputTextbox)
/* harmony export */ });
/* harmony import */ var _index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-e3bf7da7.js */ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/app-components/dist/esm/index-e3bf7da7.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * v4.0.58
 */


const inputCheckboxCss = ".classification-checkbox{margin:0.25rem}";

const ArcgisItemClassificationInputCheckbox = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.toggleAttributeHandler = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "toggleAttributeHandler", 7);
        this.toggleAttribute = (e) => {
            this.itemClassificationValue[this.attributeId] = e.target.checked;
            this.toggleAttributeHandler.emit(Object.assign({}, this.itemClassificationValue));
        };
        this.isSaving = undefined;
        this.inputData = undefined;
    }
    loadAttributes() {
        var _a, _b, _c;
        this.attributeValue = this.inputData.attributeValue;
        this.itemClassificationValue = this.inputData.itemClassificationValue;
        this.attributeId = this.inputData.attributeId;
        this.labelClass = this.attributeId;
        this.attributeLabel = (_a = this.attributeValue) === null || _a === void 0 ? void 0 : _a.label;
        this.attributeName = (_b = this.attributeValue) === null || _b === void 0 ? void 0 : _b.name;
        this.isChecked = !!((_c = this.itemClassificationValue) === null || _c === void 0 ? void 0 : _c[this.attributeId]);
    }
    render() {
        this.loadAttributes();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "classification-checkbox" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: `trailer-0 flex-1 ${this.labelClass}`, key: this.attributeId, for: this.attributeId, layout: "inline" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-checkbox", { id: this.attributeId, name: this.attributeName, scale: "m", checked: this.isChecked, onCalciteCheckboxChange: this.toggleAttribute.bind(this), disabled: this.isSaving }), this.attributeLabel)));
    }
};
ArcgisItemClassificationInputCheckbox.style = inputCheckboxCss;

const inputDateCss = ".classification-date{margin:0.25rem}";

const ArcgisItemClassificationInputDate = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.toggleAttributeHandler = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "toggleAttributeHandler", 7);
        this.onDateChange = (e) => {
            const value = e.target.value;
            if (!!value) {
                this.itemClassificationValue[this.attributeId] = value;
            }
            else {
                delete this.itemClassificationValue[this.attributeId];
            }
            this.toggleAttributeHandler.emit(Object.assign({}, this.itemClassificationValue));
        };
        this.isSaving = undefined;
        this.inputData = undefined;
    }
    loadAttributes() {
        var _a, _b, _c;
        this.attributeValue = this.inputData.attributeValue;
        this.itemClassificationValue = this.inputData.itemClassificationValue;
        this.attributeId = this.inputData.attributeId;
        this.labelClass = this.attributeId;
        this.attributeLabel = (_a = this.attributeValue) === null || _a === void 0 ? void 0 : _a.label;
        this.attributeName = (_b = this.attributeValue) === null || _b === void 0 ? void 0 : _b.name;
        this.currentInputValue = (_c = this.itemClassificationValue) === null || _c === void 0 ? void 0 : _c[this.attributeId];
    }
    render() {
        this.loadAttributes();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "classification-date" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: `trailer-0 flex-1 ${this.labelClass}`, key: this.attributeId, for: this.attributeId }, this.attributeLabel, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: this.labelClass }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input-date-picker", { id: this.attributeId, name: this.attributeName, value: this.currentInputValue, onCalciteInputDatePickerChange: this.onDateChange.bind(this), disabled: this.isSaving })))));
    }
};
ArcgisItemClassificationInputDate.style = inputDateCss;

const inputGroupedMultipleSelectionCss = ".classification-multiple-group-select{margin:0.25rem}";

const ArcgisItemClassificationInputGroupedMultipleSelection = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.toggleAttributeHandler = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "toggleAttributeHandler", 7);
        this.configureGroupMultiCombobox = () => {
            let groupItemTSXArr = [];
            for (const groupIndex in this.valueExpressionResult) {
                const groupItemArr = this.valueExpressionResult[groupIndex];
                const groupItemTSX = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item-group", { label: groupIndex, key: groupIndex }, groupItemArr.map((groupItem) => {
                    var _a;
                    const label = groupItem.label;
                    const value = groupItem.value;
                    const isSelected = (_a = this.selectedValues) === null || _a === void 0 ? void 0 : _a.includes(value);
                    return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { key: label, textLabel: label, value: value, selected: isSelected }));
                }));
                groupItemTSXArr = [...groupItemTSXArr, structuredClone(groupItemTSX)];
            }
            return groupItemTSXArr;
        };
        this.onAttributesChange = (e) => {
            const selectedItems = e.target.selectedItems;
            const selectedItemsLen = selectedItems.length;
            const value = e.target.value;
            if (selectedItemsLen === 0) {
                delete this.itemClassificationValue[this.attributeId];
            }
            else if (selectedItemsLen === 1) {
                this.itemClassificationValue[this.attributeId] = [...[], value];
            }
            else if (selectedItemsLen > 1) {
                this.itemClassificationValue[this.attributeId] = [...value];
            }
            this.toggleAttributeHandler.emit(Object.assign({}, this.itemClassificationValue));
        };
        this.isSaving = undefined;
        this.inputData = undefined;
    }
    loadAttributes() {
        var _a;
        this.attributeValue = this.inputData.attributeValue;
        this.itemClassificationValue = this.inputData.itemClassificationValue;
        this.attributeId = this.inputData.attributeId;
        this.valueExpressionResult = this.inputData.valueExpressionResult;
        this.attributeLabel = (_a = this.attributeValue) === null || _a === void 0 ? void 0 : _a.label;
        this.selectedValues = this.itemClassificationValue[this.attributeId];
    }
    render() {
        this.loadAttributes();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "classification-multiple-group-select" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { for: this.attributeId, key: this.attributeId, id: `${this.attributeId}_label` }, this.attributeLabel, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox", { id: this.attributeId, label: "groupedMultipleSelection", selectionMode: "multiple", scale: "m", onCalciteComboboxChange: this.onAttributesChange.bind(this), disabled: this.isSaving }, this.configureGroupMultiCombobox()))));
    }
};
ArcgisItemClassificationInputGroupedMultipleSelection.style = inputGroupedMultipleSelectionCss;

const inputMultipleSelectionCss = ".classification-multiple-select{margin:0.25rem}";

const ArcgisItemClassificationInputMultipleSelection = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.toggleAttributeHandler = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "toggleAttributeHandler", 7);
        this.configureCombobox = () => {
            var _a;
            return (_a = this.valueExpressionResult) === null || _a === void 0 ? void 0 : _a.map((comboboxItem) => {
                var _a;
                const label = comboboxItem.label;
                const value = comboboxItem.value;
                const isSelected = !!((_a = this.selectedValues) === null || _a === void 0 ? void 0 : _a.includes(value));
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { id: label, selected: isSelected, key: label, value: value, textLabel: label }));
            });
        };
        this.onAttributesChange = (e) => {
            const selectedItems = e.target.selectedItems;
            const selectedItemsLen = selectedItems.length;
            const value = e.target.value;
            if (selectedItemsLen === 0) {
                delete this.itemClassificationValue[this.attributeId];
            }
            else if (selectedItemsLen === 1) {
                this.itemClassificationValue[this.attributeId] = [...[], value];
            }
            else if (selectedItemsLen > 1) {
                this.itemClassificationValue[this.attributeId] = [...value];
            }
            this.toggleAttributeHandler.emit(Object.assign({}, this.itemClassificationValue));
        };
        this.isSaving = undefined;
        this.inputData = undefined;
    }
    loadAttributes() {
        var _a, _b, _c, _d, _e, _f;
        this.attributeValue = (_a = this.inputData) === null || _a === void 0 ? void 0 : _a.attributeValue;
        this.itemClassificationValue = (_b = this.inputData) === null || _b === void 0 ? void 0 : _b.itemClassificationValue;
        this.attributeId = (_c = this.inputData) === null || _c === void 0 ? void 0 : _c.attributeId;
        this.valueExpressionResult = (_d = this.inputData) === null || _d === void 0 ? void 0 : _d.valueExpressionResult;
        this.attributeLabel = (_e = this.attributeValue) === null || _e === void 0 ? void 0 : _e.label;
        this.selectedValues = (_f = this.itemClassificationValue) === null || _f === void 0 ? void 0 : _f[this.attributeId];
    }
    render() {
        this.loadAttributes();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "classification-multiple-select" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { for: this.attributeId, key: this.attributeId, id: `${this.attributeId}_label` }, this.attributeLabel, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox", { id: this.attributeId, label: "multipleSelection", selectionMode: "multiple", scale: "m", onCalciteComboboxChange: this.onAttributesChange.bind(this), disabled: this.isSaving }, this.configureCombobox()))));
    }
};
ArcgisItemClassificationInputMultipleSelection.style = inputMultipleSelectionCss;

const inputSingleSelectionCss = ".classification-single-select{margin:0.25rem}";

const ArcgisItemClassificationInputSingleSelection = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.toggleAttributeHandler = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "toggleAttributeHandler", 7);
        this.configureCombobox = () => {
            var _a;
            return (_a = this.valueExpressionResult) === null || _a === void 0 ? void 0 : _a.map((comboboxItem) => {
                var _a;
                const label = comboboxItem.label;
                const value = comboboxItem.value;
                const isSelected = !!((_a = this.selectedValues) === null || _a === void 0 ? void 0 : _a.includes(value));
                return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox-item", { id: label, selected: isSelected, key: label, value: value, textLabel: label }));
            });
        };
        this.onAttributeChange = (e) => {
            const value = e.target.value;
            if (!!value) {
                this.itemClassificationValue[this.attributeId] = value;
            }
            else {
                delete this.itemClassificationValue[this.attributeId];
            }
            this.toggleAttributeHandler.emit(Object.assign({}, this.itemClassificationValue));
        };
        this.isSaving = undefined;
        this.inputData = undefined;
    }
    loadAttributes() {
        var _a;
        this.attributeValue = this.inputData.attributeValue;
        this.itemClassificationValue = this.inputData.itemClassificationValue;
        this.attributeId = this.inputData.attributeId;
        this.valueExpressionResult = this.inputData.valueExpressionResult;
        this.attributeLabel = (_a = this.attributeValue) === null || _a === void 0 ? void 0 : _a.label;
        this.selectedValues = this.itemClassificationValue[this.attributeId];
    }
    render() {
        this.loadAttributes();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "classification-single-select" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { for: this.attributeId, key: this.attributeId, id: `${this.attributeId}_label` }, this.attributeLabel, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-combobox", { id: this.attributeId, label: "SingleSelection", selectionMode: "single", scale: "m", onCalciteComboboxChange: this.onAttributeChange.bind(this), disabled: this.isSaving }, this.configureCombobox()))));
    }
};
ArcgisItemClassificationInputSingleSelection.style = inputSingleSelectionCss;

const inputTextboxCss = ".classification-textbox{margin:0.25rem}";

const ArcgisItemClassificationInputTextbox = class {
    constructor(hostRef) {
        (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
        this.toggleAttributeHandler = (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.c)(this, "toggleAttributeHandler", 7);
        this.getAttributeType = (attributeJson) => {
            const type = attributeJson === null || attributeJson === void 0 ? void 0 : attributeJson.type;
            if (type === "string") {
                return "text";
            }
            else if (["integer", "float"].includes(type)) {
                return "number";
            }
            else if (type === "date") {
                return "date";
            }
            return "text";
        };
        this.onAttributeChange = (e) => {
            const value = e.target.value;
            if (!!value) {
                this.itemClassificationValue[this.attributeId] = value;
            }
            else {
                delete this.itemClassificationValue[this.attributeId];
            }
            this.toggleAttributeHandler.emit(Object.assign({}, this.itemClassificationValue));
        };
        this.isSaving = undefined;
        this.inputData = undefined;
    }
    loadAttributes() {
        var _a, _b, _c, _d;
        this.attributeValue = this.inputData.attributeValue;
        this.itemClassificationValue = this.inputData.itemClassificationValue;
        this.attributeId = this.inputData.attributeId;
        this.labelClass = this.attributeId;
        this.attributeLabel = (_a = this.attributeValue) === null || _a === void 0 ? void 0 : _a.label;
        this.attributeName = (_b = this.attributeValue) === null || _b === void 0 ? void 0 : _b.name;
        this.attributeDesc = (_c = this.attributeValue) === null || _c === void 0 ? void 0 : _c.description;
        this.currentInputValue = (_d = this.itemClassificationValue) === null || _d === void 0 ? void 0 : _d[this.attributeId];
        this.attributeType = this.getAttributeType(this.attributeValue);
    }
    render() {
        this.loadAttributes();
        return ((0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: "classification-textbox" }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-label", { class: `trailer-0 flex-1 ${this.labelClass}`, key: this.attributeId, for: this.attributeId, id: `${this.attributeId}_label` }, this.attributeLabel, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { class: this.labelClass }, (0,_index_e3bf7da7_js__WEBPACK_IMPORTED_MODULE_0__.h)("calcite-input", { id: this.attributeId, name: this.attributeName, scale: "m", type: this.attributeType, value: this.currentInputValue, numberButtonType: "vertical", placeholder: this.attributeDesc, onCalciteInputInput: this.onAttributeChange.bind(this), disabled: this.isSaving })))));
    }
};
ArcgisItemClassificationInputTextbox.style = inputTextboxCss;



//# sourceMappingURL=arcgis-item-classification-input-checkbox_6.entry.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,