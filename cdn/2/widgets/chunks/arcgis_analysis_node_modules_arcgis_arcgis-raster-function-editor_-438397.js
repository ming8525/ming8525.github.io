"use strict";
(self["webpackChunkexb_client"] = self["webpackChunkexb_client"] || []).push([["vendors-extensions_widgets_arcgis_analysis_node_modules_arcgis_arcgis-raster-function-editor_-438397"],{

/***/ "./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.sl-ea3a78e6.js":
/*!**************************************************************************************************************************************!*\
  !*** ./extensions/widgets/arcgis/analysis/node_modules/@arcgis/arcgis-raster-function-editor/dist/esm/common-strings.sl-ea3a78e6.js ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addRaster: () => (/* binding */ addRaster),
/* harmony export */   addScalar: () => (/* binding */ addScalar),
/* harmony export */   breadcrumb: () => (/* binding */ breadcrumb),
/* harmony export */   breadcrumbEditor: () => (/* binding */ breadcrumbEditor),
/* harmony export */   cancel: () => (/* binding */ cancel),
/* harmony export */   category: () => (/* binding */ category),
/* harmony export */   categoryNames: () => (/* binding */ categoryNames),
/* harmony export */   close: () => (/* binding */ close),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   defaultModelName: () => (/* binding */ defaultModelName),
/* harmony export */   definitionQuery: () => (/* binding */ definitionQuery),
/* harmony export */   description: () => (/* binding */ description),
/* harmony export */   deselectFunction: () => (/* binding */ deselectFunction),
/* harmony export */   details: () => (/* binding */ details),
/* harmony export */   dialogTitle: () => (/* binding */ dialogTitle),
/* harmony export */   dontSave: () => (/* binding */ dontSave),
/* harmony export */   enterFURL: () => (/* binding */ enterFURL),
/* harmony export */   enterURL: () => (/* binding */ enterURL),
/* harmony export */   error: () => (/* binding */ error),
/* harmony export */   errorTitle: () => (/* binding */ errorTitle),
/* harmony export */   everyone: () => (/* binding */ everyone),
/* harmony export */   f32PixelType: () => (/* binding */ f32PixelType),
/* harmony export */   f64PixelType: () => (/* binding */ f64PixelType),
/* harmony export */   failedToLoadLayer: () => (/* binding */ failedToLoadLayer),
/* harmony export */   folder: () => (/* binding */ folder),
/* harmony export */   general: () => (/* binding */ general),
/* harmony export */   groupFieldName: () => (/* binding */ groupFieldName),
/* harmony export */   groupItemsBy: () => (/* binding */ groupItemsBy),
/* harmony export */   groups: () => (/* binding */ groups),
/* harmony export */   invalidRFTMessage: () => (/* binding */ invalidRFTMessage),
/* harmony export */   isDataset: () => (/* binding */ isDataset),
/* harmony export */   isPublic: () => (/* binding */ isPublic),
/* harmony export */   item: () => (/* binding */ item),
/* harmony export */   itemGroup: () => (/* binding */ itemGroup),
/* harmony export */   loadingLayer: () => (/* binding */ loadingLayer),
/* harmony export */   matchVariables: () => (/* binding */ matchVariables),
/* harmony export */   mosaic: () => (/* binding */ mosaic),
/* harmony export */   multidimensionalRules: () => (/* binding */ multidimensionalRules),
/* harmony export */   name: () => (/* binding */ name),
/* harmony export */   noTagErrorMsg: () => (/* binding */ noTagErrorMsg),
/* harmony export */   noTitleErrorMsg: () => (/* binding */ noTitleErrorMsg),
/* harmony export */   noTitleTagErrorMsg: () => (/* binding */ noTitleTagErrorMsg),
/* harmony export */   ok: () => (/* binding */ ok),
/* harmony export */   organization: () => (/* binding */ organization),
/* harmony export */   outputPixelType: () => (/* binding */ outputPixelType),
/* harmony export */   owner: () => (/* binding */ owner),
/* harmony export */   parameter: () => (/* binding */ parameter),
/* harmony export */   parameters: () => (/* binding */ parameters),
/* harmony export */   properties: () => (/* binding */ properties),
/* harmony export */   raster: () => (/* binding */ raster),
/* harmony export */   rasterFunctionEditor: () => (/* binding */ rasterFunctionEditor),
/* harmony export */   rasterFunctions: () => (/* binding */ rasterFunctions),
/* harmony export */   rfxLicenseInfo: () => (/* binding */ rfxLicenseInfo),
/* harmony export */   s16PixelType: () => (/* binding */ s16PixelType),
/* harmony export */   s32PixelType: () => (/* binding */ s32PixelType),
/* harmony export */   s8PixelType: () => (/* binding */ s8PixelType),
/* harmony export */   save: () => (/* binding */ save),
/* harmony export */   saveAs: () => (/* binding */ saveAs),
/* harmony export */   saveUtils: () => (/* binding */ saveUtils),
/* harmony export */   savingMessage: () => (/* binding */ savingMessage),
/* harmony export */   scalar: () => (/* binding */ scalar),
/* harmony export */   search: () => (/* binding */ search),
/* harmony export */   selectFeature: () => (/* binding */ selectFeature),
/* harmony export */   selectFunction: () => (/* binding */ selectFunction),
/* harmony export */   selectRaster: () => (/* binding */ selectRaster),
/* harmony export */   serviceURL: () => (/* binding */ serviceURL),
/* harmony export */   setGroupSharing: () => (/* binding */ setGroupSharing),
/* harmony export */   setSharingLevel: () => (/* binding */ setSharingLevel),
/* harmony export */   share: () => (/* binding */ share),
/* harmony export */   shareWith: () => (/* binding */ shareWith),
/* harmony export */   success: () => (/* binding */ success),
/* harmony export */   tagFieldName: () => (/* binding */ tagFieldName),
/* harmony export */   tags: () => (/* binding */ tags),
/* harmony export */   title: () => (/* binding */ title),
/* harmony export */   toolDetailsEditor: () => (/* binding */ toolDetailsEditor),
/* harmony export */   toolEditor: () => (/* binding */ toolEditor),
/* harmony export */   toolModeler: () => (/* binding */ toolModeler),
/* harmony export */   tryAgain: () => (/* binding */ tryAgain),
/* harmony export */   type: () => (/* binding */ type),
/* harmony export */   u16PixelType: () => (/* binding */ u16PixelType),
/* harmony export */   u32PixelType: () => (/* binding */ u32PixelType),
/* harmony export */   u8PixelType: () => (/* binding */ u8PixelType),
/* harmony export */   unionDimensions: () => (/* binding */ unionDimensions),
/* harmony export */   unknownPixelType: () => (/* binding */ unknownPixelType),
/* harmony export */   unsavedTitle: () => (/* binding */ unsavedTitle),
/* harmony export */   unsavedWarningExisting: () => (/* binding */ unsavedWarningExisting),
/* harmony export */   unsavedWarningNew: () => (/* binding */ unsavedWarningNew),
/* harmony export */   userStartDirection: () => (/* binding */ userStartDirection),
/* harmony export */   variables: () => (/* binding */ variables),
/* harmony export */   viewerModeMessage: () => (/* binding */ viewerModeMessage),
/* harmony export */   viewerModeTitle: () => (/* binding */ viewerModeTitle),
/* harmony export */   warning: () => (/* binding */ warning)
/* harmony export */ });
const ok = "V redu";
const cancel = "Prekliči";
const enterURL = "Vnesi URL slikovne storitve";
const serviceURL = "URL storitve";
const selectRaster = "Izberi raster";
const failedToLoadLayer = "Nalaganje sloja ni uspelo";
const loadingLayer = "Nalaganje sloja";
const selectFeature = "Izberi geoobjektni sloj";
const enterFURL = "Vnesi URL geoobjektne storitve";
const addRaster = "Dodaj rastrsko spremenljivko";
const addScalar = "Dodaj konstanto";
const raster = "Raster";
const scalar = "Skalar";
const defaultModelName = "Predloga rastrske funkcije";
const general = "Splošno";
const parameters = "Parametri";
const variables = "Spremenljivke";
const name = "Ime";
const description = "Opis";
const parameter = "Parameter";
const isPublic = "Je javno";
const isDataset = "Je sklop podatkov";
const unknownPixelType = "Neznano";
const outputPixelType = "Tip izhodnih pikslov";
const u8PixelType = "8 bit nepodpisano";
const s8PixelType = "8 bit podpisano";
const u16PixelType = "16 bit nepodpisano";
const s16PixelType = "16 bit podpisano";
const u32PixelType = "32 bit nepodpisano";
const s32PixelType = "32 bit podpisano";
const f32PixelType = "32 bit decimalno enojno";
const f64PixelType = "64 bit decimalno dvojno";
const properties = "Lastnosti";
const multidimensionalRules = "Večdimenzionalna pravila";
const matchVariables = "Ujemajoče spremenljivke";
const unionDimensions = "Dimenzije unije";
const rasterFunctionEditor = {
	invalidRFTMessage: "Predloga rastrske funkcije ni veljavna.",
	rfxArgsEditor: {
		outputRaster: "IzhodniRaster",
		raster: "Raster",
		unsupportedDataTypeWarning: "Naslednji argumenti niso prikazani, ker niso trenutno podprti.",
		unsupportedFunction: "Vsebuje trenutno nepodprto/-e rastrsko/-e funkcijo/-e."
	},
	rfxRasterInput: {
		selectLayer: "Izberite sloj",
		browseLayers: "Prebrskaj sloje",
		rfxVariable: "Spremenljivka rastrske funkcije"
	},
	rfxBandCombinationEditor: {
		methodLabel: "Metoda",
		bandLabel: "Pas",
		combinationLabel: "Kombinacija"
	},
	rfxRemapGrid: {
		minimum: "Minimum",
		maximum: "Maksimum",
		output: "Rezultat",
		noData: "Brez podatkov",
		remapValuesLabel: "Preslikaj vrednosti"
	},
	rfxNamedRasterEditor: {
		rasterVariables: "Rastrske spremenljivke",
		deleteSelectedVars: "Odstrani izbrane spremenljivke"
	},
	rfxClippingGeometry: {
		clippingLayer: "Izsečni sloj",
		clippingRaster: "Izsečni raster",
		clippingGeometry: "Izsečna geometrija",
		customExtent: "Obseg po meri",
		outputExtent: "Izhodni obseg",
		currentExtent: "Trenutni obseg karte",
		drawLabel: "Riši"
	},
	rfxCustomExtent: {
		top: "Zgoraj",
		right: "Desno",
		bottom: "Spodaj",
		left: "Levo"
	},
	rfxRasterArrayEditor: {
		moveUp: "Premakni gor",
		moveDown: "Premakni dol",
		remove: "Odstrani"
	},
	rfxStatisticsGrid: {
		stdDev: "St. odk.",
		min: "Min",
		max: "Maks",
		mean: "Srednja vrednost"
	},
	rfxWeightedSumTableEditor: {
		weightedSumTable: "Tabela ponderirane vsote",
		id: "ID",
		layer: "Sloj",
		field: "Polje",
		weight: "Utež",
		value: "Vrednost",
		selectLayer: "Izberite sloj"
	},
	rfxWeightedOverlayTableEditor: {
		weightedOverlayTable: "Tabela obteženega prekrivanja",
		id: "ID",
		layer: "Sloj",
		field: "Polje",
		influence: "Vpliv",
		sumOfInfluence: "Vsota vpliva",
		value: "Vrednost",
		remapTable: "Tabela preslikav",
		scale: "Merilo",
		scales: "Merila",
		selectRaster: "Izberi raster"
	},
	rfxFeatureSelect: {
		addFeatureLayer: "Prebrskaj za geoobjektni sloj",
		addPointLayer: "Prebrskaj za točkovni sloj"
	},
	rfxFieldSelect: {
		value: "Vrednost",
		count: "Število"
	},
	rfxAttributeTable: {
		tableType: "Tip tabele",
		manual: "Ročno",
		external: "Zunanji",
		minVal: "Minimalna vrednost",
		maxVal: "Maksimalna vrednost",
		baseClassName: "Osnovno ime razreda",
		colorScheme: "Barvna shema",
		defaultClassName: "Oznaka_",
		generateTable: "Ustvari tabelo",
		browseTable: "Prebrskaj tabelo",
		value: "Vrednost",
		classname: "Ime razreda",
		color: "Barva"
	},
	rfxFieldNumberSwitchable: {
		number: "Številsko",
		field: "Polje",
		string: "Besedilo",
		linearUnit: "Linearna enota"
	},
	rfxPropertySet: {
		name: "Ime",
		value: "Vrednost"
	},
	rfxConversionGrid: {
		size: "Velikost"
	},
	rfxTransposeBit: {
		bitPattern: "Vzorec bit",
		outputBit: "Izhodni bit",
		inputBit: "Vhodni bit"
	},
	rfxSpatialReference: {
		placeHolder: "Natančno določi s ključno besedo",
		coordinateSystem: "Koordinatni sistem",
		gcs: "Geografski koordinatni sistem",
		pcs: "Projiciran koordinatni sistem",
		vcs: "Vertikalni koordinatni sistem"
	}
};
const rfxLicenseInfo = "Ta predloga rastrske funkcije je lahko uporabljena za obdelavo vašega slikovja z uporabo ArcGIS Image Serverja.";
const rasterFunctions = {
	rfx: {
		aCosHName: "ACosH",
		aCosHSnip: "Izračuna inverzni hiperbolični kosinus celic v rastru.",
		aCosHDesc: "Funkcija izračuna inverzni hiperbolični kosinus pikslov v rastru.",
		aCosName: "ACos",
		aCosSnip: "Izračuna inverzni kosinus pikslov v rastru.",
		aCosDesc: "Ta rastrska funkcija izračuna inverzni kosinus celic v rastru. V matematiki imajo vse trigonometrične funkcije določen razpon veljavnih vhodnih vrednosti, ki se imenujejo domena. Izhodne vrednosti vsake funkcije imajo prav tako določen razpon. Za to orodje je domena [–1, 1], razpon pa [0, π].",
		aSinHName: "ASinH",
		aSinHSnip: "Izračuna inverzni hiperbolični sinus celic v rastru.",
		aSinHDesc: "Funkcija izračuna inverzni hiperbolični sinus pikslov v rastru.",
		aSinName: "ASin",
		aSinSnip: "Izračuna inverzni sinus celic v rastru.",
		aSinDesc: "Funkcija izračuna inverzni sinus pikslov v rastru.",
		aTan2Name: "ATan2",
		aTan2Snip: "Izračuna inverzni tangens (na osnovi x, y) celic v rastru.",
		aTan2Desc: "Funkcija izračuna inverzni tangens (na osnovi x, y) pikslov v rastru.",
		aTanHName: "ATanH",
		aTanHSnip: "Izračuna inverzni hiperbolični tangens celic v rastru.",
		aTanHDesc: "Funkcija izračuna inverzni hiperbolični tangens pikslov v rastru.",
		aTanName: "ATan",
		aTanSnip: "Izračuna inverzni tangens celic v rastru.",
		aTanDesc: "Funkcija izračuna inverzni tangens pikslov v rastru.",
		absName: "Abs",
		absSnip: "Izračuna absolutno vrednost celic v rastru.",
		absDesc: "Funkcija Abs izračuna absolutno vrednost pikslov v rastru.",
		reflectanceName: "Očitna odbojnost",
		reflectanceSnip: "Pretvori neobdelano slikovje v vrednosti Vrh atmosfere, tako da upošteva značilnosti senzorja, položaj sonca in čas pridobitve.",
		reflectanceDesc: "Ta funkcija izravna vrednosti digitalnega števila svetlosti slike za nekatere satelitske senzorje. Izravnave za nastavitev pribitka in odmika za vsak pas temeljijo na višini sonca, datumu pridobitve in lastnostih senzorja. Ta funkcija se uporablja za izravnavo odbojnosti ali svetlosti, vrednosti nekaterega satelitskega slikovja na osnovi nastavitev osvetljenosti 3D-prizora in senzorskega pribitka. Slike so izravnane na teoretično skupne pogoje osvetlitve, da je vedno manj variacije med 3D-prizori z različnih datumov in različnih senzorjev. To je mogoče uporabiti za klasifikacijo slik, ravnovesje barv in izdelavo mozaikov. To funkcijo je mogoče uporabiti samo z določenim slikovjem. Senzorji, ki se uporabljajo, so Landsat MSS, Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, GeoEye-1, RapidEye, DMCii, WorldView-1, WorldView-2, SPOT 6 in Pleiades.<div><br/>Funkcija izvaja dve korekciji. Prva temelji na nastavitvah pribitka. Izvirne vrednosti svetlosti so ponovno ustvarjene iz vrednosti slike z obračanjem enačb pribitka. Druga korekcija je povezana z razlikami med kotom sonca in svetlostjo. Izvirne vrednosti svetlosti se izravnajo s skupnimi pogoji osvetlitve z normalizacijo prizorov, posnetih v pogojih variabilne osvetljenosti. V splošnem – medtem ko je tip izhodnih slikovnih podatkov enak tipu vhodnih slikovnih podatkov, so izhodne vrednosti nižje kot vhodne vrednosti in so pripete veljavnemu datumskemu razponu.</div>",
		argStatisticsName: "ArgStatistics",
		argStatisticsSnip: "Izračuna statistiko argumentov, vključno z Arg Max, Arg Min, Arg Median in Trajanje.",
		argStatisticsDesc: "Funkcija izračuna statistiko argumenta. Obstajajo štiri metode v funkciji ArgStatistics: ArgMax, ArgMin, ArgMedian in Trajanje.",
		arithmeticName: "Aritmetično",
		arithmeticSnip: "Izvede aritmetično operacijo med dvema rastroma ali rastrom in skalarjem.",
		arithmeticDesc: "Aritmetična funkcija izvede aritmetično operacijo med dvema rastroma ali rastrom in skalarjem ter obratno.",
		aspectSlopeName: "Lega neba-Naklon",
		aspectSlopeSnip: "Ustvari raster, ki hkrati prikaže lego neba (smer) in naklon (strmost) neprekinjenega površja, kot sta predstavljena v digitalnem modelu višin.",
		aspectSlopeDesc: "Funkcija Naklon-Lega neba ustvari rastrski sloj, ki hkrati prikaže lego neba in naklon površja. Lega neba določa smer padanja maksimalne stopnje spremembe vrednosti od vsakega piksla do sosednjih. Na lego neba je mogoče gledati kot na smer naklona. Vrednosti izhodnega rastra bodo smeri lege neba, ki jih predstavlja odtenek (barva). Naklon predstavlja stopnjo višinske spremembe za vsak piksel digitalnega modela višin (DMV). Naklon predstavlja strmost površja in je simboliziran v tri razrede, ki so predstavljeni z barvno nasičenostjo (svetlost).<div><br/>Vrednosti pikslov v izhodnem rastru Naklon-Lega neba kažejo kombinacijo naklona in lege neba. Piksli z vrednostmi manj kot 20 veljajo za ravne in so prikazani s sivo barvo. Vrednosti rastra Naklon-Lega neba več od 21 bodo prikazane z različnimi nasičenostmi, kot sledi: 21 do 30 — majhna nasičenost, 31 do 40 — zmerna nasičenost, 41 in več — velika nasičenost</div>",
		aspectName: "Lega neba",
		aspectSnip: "Pokaže, v katero smer je obrnjen piksel, pri čemer je 0 sever, koti pa se večajo v smeri urnega kazalca proti 360.",
		aspectDesc: "Funkcija Lega neba identificira smer padanja maksimalne stopnje spremembe vrednosti od posamezne celice do sosednjih celic. Na lego neba je mogoče gledati kot na smer naklona. Vrednosti izhodnega rastra bodo smeri lege neba.<div><br/>Vhod za to funkcijo je vhodni raster. Funkcija Lega neba se pogosto uporablja za digitalni model višin (DMV). Privzeto je lega neba prikazana kot slika s sivinami. Dodate lahko funkcijo Barvna paleta, da določite posebno barvno shemo ali omogočite osebi, ki si ogleduje mozaik, da spremeni simbologijo z lastno barvno shemo.</div>",
		tableName: "Atributna tabela",
		tableSnip: "Uporabi tabelo za poimenovanje in simboliziranje vrednosti v sklopu podatkov. Stolpci za tabelo so ločeni z vejico: PixelValue, AttributeName, RedValue, GreenValue, BlueValue.",
		tableDesc: "Funkcija Atributna tabela vam omogoča, da določite atributno tabelo za simboliziranje enopasovnega mozaičnega sklopa podatkov ali rastrskega sklopa podatkov. <div><br/>To je uporabno, ko želite predstaviti slikovje, ki je bilo klasificirano po rabi tal, kot so gozdovi, mokrišča, njivske površine in urbana območja. Poleg tega bodo vrednosti iz polj v tabeli, poimenovanih rdeča, zelena in modra, uporabljene kot barvna karta pri upodabljanju slike.</div>",
		bandArithmeticName: "Aritmetika pasov",
		bandArithmeticSnip: "Izračuna indekse z uporabo predhodno določenih formul ali uporabniško določenega izraza.",
		bandArithmeticDesc: "Funkcija Aritmetika pasov izvede aritmetično operacijo na pasovih rastrskega sklopa podatkov. Izberete lahko predhodno določene algoritme ali pa vnesete lastno enovrstično formulo. Podprti operatorji so –, +, /, *, in enojni –.",
		thresholdName: "Binarni prag",
		thresholdSnip: "Organizira zvezne podatke v ospredju in ozadju z minimiziranjem kovariance med dvema razredoma.",
		thresholdDesc: "Ko ima rastrski sklop podatkov bimodalno porazdelitev, ta funkcija ustvari novi raster, ki podatke razdeli v dva ločena razreda. Ustvari razred, ki ima nižje vrednosti, prikazane s črnimi piksli, in razred, ki ima višje vrednosti, prikazane z belimi piksli.",
		bitwiseAndName: "Bitni in",
		bitwiseAndSnip: "Izvede operacijo Bitni in na binarnih vrednostih dveh vhodnih rastrov.",
		bitwiseAndDesc: "Bitni in izvede operacijo Bitni in na binarnih vrednostih dveh vhodnih rastrov",
		bitwiseLeftShiftName: "Bitni pomik v levo",
		bitwiseLeftShiftSnip: "Izvede operacijo bitni pomik levo na binarnih vrednostih dveh vhodnih rastrov.",
		bitwiseLeftShiftDesc: "Bitni pomik v levo izvede operacijo bitni pomik levo na binarnih vrednostih dveh vhodnih rastrov",
		bitwiseNotName: "Bitni ne",
		bitwiseNotSnip: "Izvede operacijo bitni ne (komplement) na binarnih vrednostih dveh vhodnih rastrov.",
		bitwiseNotDesc: "Funkcija izvede operacijo Bitni ne (komplement) na binarnih vrednostih vhodnega rastra.",
		bitwiseOrName: "Bitni ali",
		bitwiseOrSnip: "Izvede operacijo bitni ali na binarnih vrednostih dveh vhodnih rastrov.",
		bitwiseOrDesc: "Funkcija izvede operacijo Bitni ali na binarnih vrednostih dveh vhodnih rastrov. ",
		bitwiseRightShiftName: "Bitni pomik desno",
		bitwiseRightShiftSnip: "Izvede operacijo bitni pomik desno na binarnih vrednostih dveh vhodnih rastrov.",
		bitwiseRightShiftDesc: "Funkcija izvede operacijo Bitni pomik desno na binarnih vrednostih dveh vhodnih rastrov.",
		bitwiseXorName: "Bitwise Xor",
		bitwiseXorSnip: "Izvede operacijo Bitni eXclusive ali na binarnih vrednostih dveh vhodnih rastrov.",
		bitwiseXorDesc: "Funkcija izvede operacijo Bitni eXclusive ali na binarnih vrednostih dveh vhodnih rastrov",
		booleanAndName: "Boolov in",
		booleanAndSnip: "Izvede operacijo Boolov in na vrednostih celic dveh vhodnih rastrov. Če sta obe vhodni vrednosti resnični (nista nič), je izhodna vrednost 1. Če sta ena ali obe vhodni vrednosti neresnični (nič), je rezultat 0.",
		booleanAndDesc: "Funkcija izvede operacijo Boolov in na vrednostih pikslov dveh vnosov. Če sta obe vhodni vrednosti resnični (nista nič), je izhodna vrednost 1. Če sta ena ali obe vhodni vrednosti neresnični (nič), je izhodna vrednost 0. ",
		booleanNotName: "Boolov ne",
		booleanNotSnip: "Izvede operacijo Boolov ne (komplement) na vrednostih celice vhodnega rastra. Če so vhodne vrednosti resnične (niso nič), je izhodna vrednost 0. Če so vhodne vrednosti neresnične (nič), je rezultat 1.",
		booleanNotDesc: "Funkcija izvede operacijo Boolov ne (komplement) na vrednostih pikslov vhodnega rastra. Če so vhodne vrednosti resnične (niso nič), je izhodna vrednost 0. Če so vhodne vrednosti neresnične (niso nič), je izhodna vrednost 1.",
		booleanOrName: "Boolov ali",
		booleanOrSnip: "Izvede operacijo Boolov ali na vrednostih celic dveh vhodnih rastrov. Če sta ena ali obe vhodni vrednosti resnični (nista nič), je izhodna vrednost 1. Če sta obe vhodni vrednosti neresnični (nič), je rezultat 0.",
		booleanOrDesc: "Funkcija izvede operacijo Boolov ali na vrednostih celic dveh vhodnih rastrov. Če sta ena ali obe vhodni vrednosti resnični (nista nič), je izhodna vrednost 1. Če sta obe vhodni vrednosti neresnični (nič), je izhodna vrednost 0.",
		booleanXorName: "Boolov Xor",
		booleanXorSnip: "Izvede operacijo Boolov eXclusive ali na vrednostih celic dveh vhodnih rastrov. Če je ena vhodna vrednost resnična (ni nič) in je druga vrednost neresnična (nič), je rezultat 1. Če sta obe vhodni vrednosti resnični ali sta obe neresnični, je rezultat 0.",
		booleanXorDesc: "Funkcija izvede operacijo Boolov eXclusive ali na vrednostih celic dveh vhodnih rastrov. Če je ena vhodna vrednost resnična (ni nič) in je druga vrednost neresnična (nič), je izhodna vrednost 1. Če sta obe vhodni vrednosti resnični ali sta obe neresnični, je izhodna vrednost 0.",
		bufferedRasterName: "Preneseno v medpolnilnik",
		bufferedRasterSnip: "Predpomnenje zadnjega bloka pikslov, do katerega se je dostopalo.",
		bufferedRasterDesc: "Funkcija Prenosa v medpolnilnik se uporablja za optimiziranje učinkovitosti kompleksnih funkcijskih verig. Shrani rezultat v medpolnilnik dela funkcijske verige pred njim. <div><br/>Vstavi to funkcijo v urejevalnik funkcij, kjer želite shraniti rezultat.</div>",
		rasterCalculatorName: "Kalkulator",
		rasterCalculatorSnip: "Izračuna raster iz matematičnega izraza na podlagi rastra.",
		rasterCalculatorDesc: "Funkcija Kalkulator vam omogoča ustvariti in izvajati izraze in jih vključiti v funkcijsko verigo.",
		cellStatisticsName: "Statistika celic",
		cellStatisticsSnip: "Izračuna statistiko celice iz več rastrov. Razpoložljive statistike so večina, maksimum, srednja vrednost, mediana, minimum, manjšina, precentil, razpon, standardni odklon, vsota in različnost.",
		cellStatisticsDesc: "Ta funkcija izračuna statistiko iz več rastrov piksel po piksel. Razpoložljive statistike so večina, maksimum, srednja vrednost, mediana, minimum, manjšina, razpon, standardni odklon, vsota in različnost.",
		classifyName: "Klasifikacija",
		classifySnip: "Dodeli posamezen piksel razredu. Vključi pomožne podatke, kot je segmentirana slika.",
		classifyDesc: "Ta rastrska funkcija klasificira rastrski sklop podatkov na podlagi datoteke definicije klasifikatorja Esri (.ecd) in vnosov rastrskega sklopa podatkov. Datoteka .ecd, uporabljena v funkciji Klasifikacija, vsebuje vse informacije za specifičen sklop podatkov in klasifikator ter je ustvarjena z orodji za klasifikacijsko šolanje, kot sta orodji Train Support Vector Machine ali Train Random Trees.",
		clipName: "Izsek",
		clipSnip: "Nastavi okvir rastra s koordinatami ali drugim sklopom podatkov.",
		clipDesc: "Ta funkcija izseka raster pravokotne oblike glede na določene okvire ali ga izseka glede na obliko vhodnega poligonskega geoobjektnega razreda. Oblika, ki določi izsek, lahko izseka okvir rastra ali izseka območje znotraj rastra.",
		colorspaceConversionName: "Pretvorba barvnega modela",
		colorspaceConversionSnip: "Pretvori raster iz RGB v HSV in obratno.",
		colorspaceConversionDesc: "Funkcija Pretvorba barvnega modela pretvori barvni model slike iz odtenka, nasičenosti in vrednosti (HSV) barvnega prostora v rdečo, zeleno ali modro (RGB) ali obratno.<div><br/>To funkcijo je mogoče uporabiti v mozaičnem sklopu podatkov.</div>",
		colormapToRGBName: "Barvna paleta v RGB",
		colormapToRGBSnip: "Pretvori enopasovni raster z barvno paleto v tripasovni (rdeča, zelena in modra) raster.",
		colormapToRGBDesc: "Ta funkcija pretvori enopasovni raster z barvno paleto v tripasovni (rdeča, zelena in modra) raster.<div><br/>Ta funkcija je uporabna, če morate ustvariti tripasovni raster iz enopasovnega rastra s povezano barvno karto. Vrednosti iz barvne karte bodo uporabljene, da ustvarite posamezen rdeči, zeleni in modri pas. To funkcijo je mogoče uporabiti v mozaičnem sklopu podatkov.</div>",
		colormapName: "Barvna paleta",
		colormapSnip: "Spremeni vrednosti pikslov za prikaz rastrskih podatkov bodisi kot sivine ali kot rdeča, zelena in modra (RGB) slika na podlagi barvne palete ali barvne lestvice.",
		colormapDesc: "Funkcija Barvna paleta je vrsta upodabljalnika rastrskih podatkov. Transformira vrednosti pikslov za prikaz rastrskih podatkov bodisi kot sivina ali kot RGB-slika na podlagi barvne sheme ali specifičnih barv iz datoteke barvne karte. Barvno karto lahko uporabljate za predstavitev analiziranih podatkov, kot so klasificirane slike ali pri prikazu topografskih kart (ali indeksiranih barvnih slik).<div><br/>Barvne karte vsebujejo niz vrednosti, ki so povezane z barvami, uporabljenimi za konsistenten prikaz enopasovnih rastrov z eno barvo. Posamezna vrednost piksla je povezana z barvo, določeno kot niz vrednosti RGB. Barvne karte lahko podpirajo vse bitne globine razen plavajočih vejic. Prav tako podpirajo pozitivne in negativne vrednosti ter lahko vsebujejo manjkajoče, barvno kartirane vrednosti. Pri prikazu sklopa podatkov z barvno karto, ki vsebuje manjkajoče vrednosti, piksli s temi manjkajočimi vrednostmi ne bodo prikazani.</div>",
		complexName: "Kompleksno",
		complexSnip: "Izvleče magnitudo iz kompleksnih številk.",
		complexDesc: "Ta funkcija izračuna magnitude iz kompleksnih vrednosti.<div><br/>Ta funkcija se običajno uporablja s slikovjem RADAR, ki ima kompleksen tip podatkov. Uporabiti jo je mogoče v mozaičnem sklopu podatkov.</div>",
		compositeBandName: "Kompozitni pasovi",
		compositeBandSnip: "Združi več sklopov podatkov v en večpasovni raster.",
		compositeBandDesc: "Funkcija Kompozitni pasovi vam omogoča združevanje rastrov za oblikovanje večpasovne slike.",
		conName: "Pogojno",
		conSnip: "Izvede pogojno operacijo if, then, else. Če je uporabljen pogojni operator, je treba običajno povezati dve ali več funkcij, pri čemer ena funkcija navaja kriterije, druga funkcija pa je pogojni operator, ki uporablja kriterije in določa, kateri izhodni rezultati so resnični in kateri neresnični.",
		conDesc: "Funkcija Pogojno nastavi piksle izhodnega rastra na podlagi ocene if/else ocene posameznega izhodnega piksla. Vrne vrednosti pikslov iz Resničnega rastra, če je pogojna ocena resnična (1), ali vrne vrednosti pikslov iz Neresničnega rastra, če je pogojna ocena neresnična (0). Ta kriterij je določen z rezultatom logične matematične funkcije, ki bo vhodni raster.",
		constantName: "Konstanta",
		constantSnip: "Ustvari virtualni raster z eno vrednostjo piksla.",
		constantDesc: "Ta funkcija ustvari virtualni raster z enojno vrednostjo piksla, ki jo je mogoče uporabiti v predlogah rastrskih funkcij in za obdelavo mozaičnega sklopa podatkov.<div><br/>Konstantna vrednost se uporabi za vsako vrednost piksla v rastru.</div>",
		contourName: "Plastnica",
		contourSnip: "Ustvari linije plastnic.",
		contourDesc: "Funkcija Plastnica ustvari plastnice tako, da združi točke z isto višino iz rastrskega sklopa podatkov o višinah. Plastnice so izolinije, ustvarjene kot rastri za vizualizacijo. Ta funkcija je zmogljiva zaradi naslednjih ključnih značilnosti: plastnice so ustvarjene hitro in dinamično za zelo velike sklope podatkov, kot so višine sveta; plastnice je mogoče zgladiti, da se ustvari bolj kartografsko prijeten videz, hkrati pa se ohrani natančnost plastnic; zagotovljen je dinamičen nadzor nad razmikom plastnic (ekvidistanca); možnosti rezultata so linije plastnic, plastnice indeksa in poligonske plastnice.<div><br/>Ustvarjanje sloja plastnic kot produkta rastra je dragoceno zaradi širokega razpona uporabe, ker je s plastnicami mogoče prekriti karto in zagotoviti informacije o terenu, ne da se prekrijejo osnovni podatki. Uporabne so recimo pri inženiringu, kmetijstvu in upravljanju voda.</div>",
		contrastBrightnessName: "Kontrast in osvetlitev",
		contrastBrightnessSnip: "Prilagodi kontrast in osvetlitev rastra.",
		contrastBrightnessDesc: "Funkcija Kontrast in osvetlitev izboljša videz rastrskih podatkov tako, da spremeni osvetlitev in kontrast slike. Osvetlitev izboljša splošno osvetlitev slike—, na primer tako, da temne barve posvetli in svetle barve pobeli—, kontrast pa prilagodi razliko med najtemnejšimi in najsvetlejšimi barvami.<div><br/>Uporaba te funkcije spremeni vrednosti pikslov, zato je treba to funkcijo uporabiti, ko želite izboljšati videz podatkov in ne, če nameravate podatke uporabljati kot del analize, ki zahteva neobdelane vrednosti pikslov. Ta funkcija je uporabna za objavo podatkov kot slikovne storitve, ki jo je mogoče uporabiti pri aplikacijah brez možnosti spreminjanja kontrasta in osvetlitve slikovja, ali za zagotavljanje, da prikaz uporablja vaše želene nastavitve.</div>",
		convolutionName: "Konvolucija",
		convolutionSnip: "Uporabi filter, da izostri, zamegli, zazna robove, zgladi ali uporabi gradient po rastru.",
		convolutionDesc: "Funkcija Konvolucija izvede filtriranje vrednosti pikslov v sliki, kar je mogoče uporabiti za ostrenje slike, zameglitev slike, zaznavanje robov znotraj slike ali druge izboljšave na podlagi jedra. Filtri se uporabljajo za izboljšanje kakovosti rastrske slike z odstranjevanjem napačnih podatkov ali izboljšavo geoobjektov v podatkih. Konvolucijski filtri so uporabljeni na premikajočih se, prekrivajočih se jedrih (okno ali okolica), kot je 3 krat 3. Konvolucijski filtri delujejo z izračunavo vrednosti pikslov, ki temelji na utežeh njihovih sosedov.",
		corridorName: "Koridor",
		corridorSnip: "Izračuna vsoto akumuliranih stroškov za dva vhodna akumulirana rastra.",
		corridorDesc: "Funkcija Koridor izračuna vsoto akumuliranih stroškov za dva vhodna rastra akumuliranih stroškov. Medtem ko je za vhodne podatke mogoče uporabiti katerakoli rastra, morata za smiselne rezultate to biti nespremenjena izhodna rastra akumuliranih stroškov. Vrstni red vhodnih podatkov ni relevanten.",
		cosHName: "CosH",
		cosHSnip: "Izračuna hiperboličen kosinus celic v rastru.",
		cosHDesc: "Funkcija izračuna hiperboličen kosinus pikslov v rastru.",
		cosName: "Cos",
		cosSnip: "Izračuna kosinus celic v rastru.",
		cosDesc: "Funkcija izračuna kosinus pikslov v rastru.",
		costAllocationName: "Razmestitev stroškov",
		costAllocationSnip: "Za vsako celico izračuna vir z najmanj stroški na podlagi najmanjšega akumuliranega stroška na stroškovni površini.",
		costAllocationDesc: "Funkcija Razmestitev stroškov za vsako celico izračuna vir z najmanj stroški na podlagi najmanjšega akumuliranega stroška na stroškovni površini.",
		costBackLinkName: "Povratna povezava stroška",
		costBackLinkSnip: "Določi soseda, ki je naslednja celica na poti najmanjšega akumuliranega stroška do vira najmanjšega stroška.",
		costBackLinkDesc: "Funkcija Povratna povezava stroškov določi soseda, ki je naslednja celica na poti najmanjšega akumuliranega stroška do vira najmanjšega stroška.<div><br/>Raster povratne povezave vsebuje vrednosti od nič do osem, ki določajo smer ali identificirajo naslednje sosednje celice (sledeče celice) ob poti najmanjšega akumuliranega stroška iz celice, ki doseže vir najmanjšega stroška. Če pot vodi do pravega soseda, bo celici dodeljena vrednost 1, 2 za spodnjo desno diagonalno celico in naprej v smeri urnega kazalca. Vrednost 0 je rezervirana za izvorne celice.</div>",
		costDistanceName: "Razdalja stroškov",
		costDistanceSnip: "Izračuna razdaljo najmanjšega akumuliranega stroška za vsako celico od ali do vira najmanjšega stroška prek stroškovne površine.",
		costDistanceDesc: "Funkcija Razdalje stroškov izračuna razdaljo najmanjšega akumuliranega stroška za vsako celico od ali do vira najmanjšega stroška prek stroškovni površini.",
		costPathName: "Pot stroškov",
		costPathSnip: "Izračuna pot najmanjšega stroška od vira do cilja.",
		costPathDesc: "Globalna funkcija Pot stroškov izračuna pot najmanjšega stroška od vira do cilja.<div><br/>Ta funkcija izdela izhodni raster, ki zabeleži pot najmanjšega stroška ali poti iz izbranih lokacij do najbližjega vira celic, določenega znotraj površine akumuliranih stroškov v smislu stroškovne razdalje.</div>",
		curvatureName: "Ukrivljenost",
		curvatureSnip: "Izračuna ukrivljenost površine rastra, izbirno lahko vključuje profilno in planformno ukrivljenost profila.",
		curvatureDesc: "Funkcija Ukrivljenost prikaže obliko ali ukrivljenost naklona. Del površja je lahko konkaven ali konveksen, to vidite iz vrednosti ukrivljenosti. Ukrivljenost se izračuna z računanjem drugega odvoda površja.<div><br/>Rezultat funkcije Ukrivljenost je mogoče uporabiti za opis fizičnih značilnosti razvodja za razumevanje erozije in površinskega odtoka. Vrednost ukrivljenosti je mogoče uporabiti za iskanje vzorcev erozije tal ter distribucije vode na površju. Profilna ukrivljenost vpliva na pospešitev ali upočasnitev toka in torej vpliva na erozijo in odlaganje. Planformna ukrivljenost vpliva na konvergenco in divergenco toka.</div>",
		divideName: "Deljenje",
		divideSnip: "Razdeli vrednosti dveh rastrov celico po celico.",
		divideDesc: "Funkcija Deljenje razdeli vrednosti dveh rastrov piksel po piksel.",
		elevationVoidFillName: "Zapolnjevanje praznin pri višinah",
		elevationVoidFillSnip: "Ustvari piksle, kjer v vaših podatkih višin obstajajo luknje.",
		elevationVoidFillDesc: "Funkcija Zapolnitev praznin pri višinah se uporablja za ustvarjanje pikslov, kjer v vašem višinskem rastru obstajajo luknje.<div><br/>Do praznin pride, ko na območju, predstavljenem s piksli v izhodnem rastru, ni zbranih točk. Praznine pogosto povzročajo vodna telesa, izbira tipa razreda ali izločitve. Zapolnitev praznin se najpogosteje uporablja pri ustvarjanju površja.</div>",
		equalToName: "Enako",
		equalToSnip: "Izvede relacijsko operacijo enako kot na dveh vhodnih slojih na podlagi celic. Vrne vrednost 1 za celice, če je prvi raster enak drugemu rastru, in 0 za celice, če nista enaka.",
		equalToDesc: "Funkcija izvede operacijo enako kot na dveh rastrih piksel po piksel. Vrne vrednost 1 za piksle, kjer je prvi raster enak drugemu rastru, in vrednost 0 za piksle, če nista enaka.",
		eucAllocationName: "Dodelitev glede na evklidsko razdaljo",
		eucAllocationSnip: "Za vsako celico dodeli najbližjo izvorno vrednost na podlagi evklidske razdalje.",
		eucAllocationDesc: "Funkcija Dodelitev glede na evklidsko razdaljo za vsako celico dodeli najbližjo izvorno vrednost na podlagi evklidske razdalje.",
		eucDirectionName: "Evklidska smer",
		eucDirectionSnip: "Za vsako celico izračuna smer v stopinjah do najbližje izvorne vrednosti.",
		eucDirectionDesc: "Funkcija Evklidske smeri za vsako celico izračuna smer v stopinjah do najbližje izvorne vrednost. <div><br/>Smer se izračuna od centra vsake celice do najbližjega centra celice z izvorno vrednostjo. Razpon vrednosti je od 0 stopinj do 360 stopinj, pri čemer je 0 rezervirana za celice z izvornimi vrednostmi. Proti vzhodu (desno) je 90 in vrednost se veča v smeri urnega kazalca (180 je proti jugu, 270 je proti zahodu in 360 je proti severu).</div>",
		eucDistanceName: "Evklidska razdalja",
		eucDistanceSnip: "Za vsako celico izračuna evklidsko razdaljo do najbližjega vira.",
		eucDistanceDesc: "Funkcija Evklidska smer za vsako celico izračuna evklidsko razdaljo do najbližje izvorne vrednosti.",
		exp10Name: "Exp10",
		exp10Snip: "Izračuna potenco z osnovo 10 celic v rastru.",
		exp10Desc: "Funkcija Exp 10 izračuna potenco z osnovo 10 pikslov v rastru.",
		exp2Name: "Exp2",
		exp2Snip: "Izračuna potenco z osnovo 2 celic v rastru.",
		exp2Desc: "Ta funkcija izračuna potenco z osnovo 2 pikslov v rastru.",
		expName: "Exp",
		expSnip: "Izračuna potenco z osnovo e celic v rastru.",
		expDesc: "Ta funkcija izračuna potenco z osnovo e pikslov v rastru.",
		extractBandName: "Ekstrakcija pasov",
		extractBandSnip: "Navede, s katerimi pasovi se dela pri uporabi večpasovnih sklopov podatkov.",
		extractBandDesc: " Funkcija Ekstrakcija pasov vam omogoča, da izvlečete enega ali več pasov ali jih preuredite v večpasovnem rastrskem sklopu podatkov.<div><br/>Funkcijo Ekstrakcija pasov lahko uporabite pred drugimi funkcijami, kot je Aritmetika, da imate nadzor nad tem, kateri pasovi so uporabljeni kot vhodni sloj v naslednji funkciji.</div>",
		fillName: "Zapolnitev",
		fillSnip: "Zapolni ponore na rastru površin, da odstrani majhne pomanjkljivosti v podatkih.",
		fillDesc: "Splošna funkcija Zapolnitev najde in zapolni ponore in vrhove v površinskem rastru višin, da se odstranijo majhne pomanjkljivosti v podatkih. Funkcija bo izvajala zapolnitve v ponavljajočem se procesu, dokler ne bodo znotraj navedene omejitve Z-vrednosti zapolnjeni vsi ponori.<div><br/>Ko se z orodji za orto mapiranje ali z drugimi sredstvi ustvari površina višin, v podatkih pogosto ostanejo majhne, vendar pomembne napake v obliki ponorov ali vrhov. V fotogrametriji ponorom ali vrhovom pogosto rečemo luknje in konice. Ker se podatki o površju pogosto uporabljajo za modeliranje, recimo za hidrološko modeliranje, je pomembno popraviti te napake v obliki ponorov in vrhov na način, ki je skladen z okoliškimi podatki.</div>",
		floatName: "Decimalno enojno",
		floatSnip: "Pretvori vsako vrednost celice rastra v zapis s plavajočo vejico.",
		floatDesc: "Funkcija Plavajoča vejica pretvori vsako vrednost piksla rastra v zapis s plavajočo vejico.",
		flowAccumulationName: "Akumulacija toka",
		flowAccumulationSnip: "Ustvari raster akumuliranega toka v vsako celico. Izbirno se lahko uporabi faktor uteži.",
		flowAccumulationDesc: "Splošna funkcija Akumulacija toka ustvari raster akumuliranega toka v vsakem pikslu, kot ga določa akumulacija uteži za vse piksle, ki tečejo v vsak dolvodni piksel. Če ni na voljo rastra uteži, se utež 1 uporabi za vsak piksel, vrednost pikslov v izhodnem rastru pa je število pikslov, ki tečejo v vsak piksel.<div><br/>Izhodni piksli z veliko akumulacijo toka so območja koncentriranega toka, ki jih je mogoče uporabiti za identifikacijo kanalov vodotoka. Izhodni piksli z nično akumulacijo toka so lokalne topografske višine, ki jih je mogoče uporabiti za identifikacijo grebenov.</div>",
		flowDirectionName: "Smer toka",
		flowDirectionSnip: "Ustvari raster smeri toka iz vsake celice do njenega najbolj strmega soseda dolvodno.",
		flowDirectionDesc: "Ena od ključnih stvari pri tvorjenju hidroloških značilnosti površja je zmožnost določitve toka iz vsakega piksla v rastru. Rastrska funkcija Smer toka kot vhodni sloj vzame sloj površja in ustvari raster smeri toka iz vsakega piksla do njegovega najbolj strmega soseda dolvodno. Funkcija Smer toka podpira tri metode modeliranja toka: D8 (osem smeri), Multi-Flow Direction (MFD) in D-Infinity (DINF). ",
		flowDistanceName: "Razdalja toka",
		flowDistanceSnip: "Za vsako celico izračuna minimalno vodoravno ali navpično razdaljo navzdol do celic na potoku ali reki, v katero tečejo.",
		flowDistanceDesc: "Za vsak piksel bo funkcija izračunala minimalno vodoravno ali navpično razdaljo navzdol do pikslov na reki ali potoku, v katerega tečejo. Če je na voljo izbirni raster smeri toka, bodo smeri toka navzdol omejene na tiste, ki so določene z vhodnim rastrom smeri toka. Rezultat je raster razdalje toka.",
		focalName: "Središčna statistika",
		focalSnip: "Izračuna središčno statistiko za vsak piksel slike na osnovi določenih središčnih soseščin.",
		focalDesc: "Funkcija Središčna statistika izračuna središčne statistike za vsak piksel slike na osnovi določenih središčnih soseščin.",
		geometricName: "Geometrično",
		geometricSnip: "Izboljša natančnost položaja sklopa podatkov z upoštevanjem višine.",
		geometricDesc: "Geometrična funkcija izdela ortorektifikacijsko sliko na podlagi definicije senzorja in modela reliefa. Izboljša natančnost položaja sklopa podatkov z upoštevanjem višine.",
		grayscaleName: "Sivine",
		grayscaleSnip: "Pretvori večpasovno sliko v enopasovno sliko sivin.",
		grayscaleDesc: "Ta funkcija pretvori večpasovno sliko v enopasovno sliko sivin.<div><br/>Ta funkcija uporabi določene uteži za vsakega od vhodnih pasov in normalizira izhodno sliko. Uteži se uporabljajo pogosto, ker so pasovi glede na uporabo različno pomembni. Na primer, moder pas pogosto vsebuje več šumov kot drugi pasovi.</div>",
		greaterThanEqualName: "Večje kot ali enako",
		greaterThanEqualSnip: "Izvede relacijsko operacijo večje kot ali enako na dveh vhodnih slojih celico po celico. Vrne 1 za celice, če je prvi raster večji kot ali enak drugemu rastru, in 0, če ni.",
		greaterThanEqualDesc: "Funkcija izvede Relacijsko operacijo večje kot ali enako na dveh vhodnih slojih piksel po piksel. Vrne vrednost 1 za piksle, če je prvi raster večji ali enak drugemu rastru, in vrednost 0 za piksle, če prvi raster ni večji ali enak drugemu rastru.",
		greaterThanName: "Večje kot",
		greaterThanSnip: "Izvede Relacijsko operacijo večje kot na dveh vhodnih slojih celico po celico. Vrne vrednost 1 za celice, kjer je prvi raster večji kot drugi raster, in 0 za celice, če ni.",
		greaterThanDesc: "Funkcija izvede Relacijsko operacijo večje kot na dveh vhodnih slojih piksel po piksel. Vrne vrednost 1 za piksle, kjer je prvi raster večji kot drugi raster, in vrednost 0 za piksle, kjer prvi raster ni večji od drugega rastra.",
		heatIndexName: "Toplotni indeks",
		heatIndexSnip: "Združuje temperaturo zraka okolja in relativno vlažnost, da vrne temperaturo občutka.",
		heatIndexDesc: "Ta funkcija izračuna očitno temperaturo na podlagi temperature okolja in relativne vlažnosti. Temperatura občutka opisuje stanje, kako človeško telo zaznava toploto.<div><br/>Ta indeks je uporaben za izračune nevarnosti, povezanih z zdravstvenimi težavami, kot so mišični krči, dehidracija, vročinska izčrpanost ali resnejšimi težavami, kot je srčni infarkt na vroče in vlažne dni. Ko je relativna vlažnost velika, človekov pot vedno težje hlapi, zato se je težko ohladiti na naraven način. Karte obvestil ali opozoril o vročini so pogosto produkt preklasifikacije toplotnega indeksa v razrede; višja je vrednost indeksa, bolj verjetno je, da bo obvestilo postalo opozorilo.</div>",
		hillshadeName: "Senčenje reliefa",
		hillshadeSnip: "Ustvari 3D-reprezentacijo površja z relativnim položajem sonca, ki se upošteva pri senčenju slike",
		hillshadeDesc: "Funkcija Senčenje reliefa izdela 3D-reprezentacijo sivin reliefa površja z relativnim položajem sonca, ki se upošteva pri senčenju slike. <div><br/>Senčenje reliefa je tehnika za vizualizacijo reliefa, ki jo določa vir svetlobe in naklon ter lega neba rastra višin. Gre za kvalitativno metodo za vizualiziranje topografije, ki ne daje absolutnih vrednosti višin. </div>",
		intName: "Celo število",
		intSnip: "Pretvori vsako vrednost celice rastra v obliko s celim številom.",
		intDesc: "Funkcija Celo število pretvori vsako vrednost piksla rastra v obliko s celim številom.",
		interpolateIrregularDataName: "Interpolacija nepravilnih podatkov",
		interpolateIrregularDataSnip: "Interpolacija iz oblakov točk ali nepravilnih mrež.",
		interpolateIrregularDataDesc: "Nekateri sklopi podatkov netCDF ali HDF shranijo svojo geolokacijo kot nepravilno postavljene matrike pikslov ali točkovnih podatkov. Ko te sklope podatkov dodate mozaičnemu sklopu podatkov, funkcija interpoliranja nepravilnih podatkov vzame nepravilne mrežne podatke in jih prevzorči tako, da je vsak piksel enake velikosti in je kvadraten.<div><br/>Pri dodajanju spremenljivk iz netCDF ali HDP v mozaični sklop podatkov bo samodejno preverjeno, če so podatki pravilno matričeni. Če niso, se lahko uporabi funkcija za interpolacijo nepravilnih podatkov, ki pretvori nepravilne podatke v pravilno matričen raster. Metodo interpolacije in velikost celic, uporabljene v funkciji interpolacije rastra nepravilnih podatkov, lahko spremenite. Za pravilno nameščene rastrske podatke interpolacija ne bo uporabljena, podatki pa bodo prebrani v obstoječi obliki.</div>",
		isNullName: "Je brez vrednosti",
		isNullSnip: "Določi, katere vrednosti iz vhodnih rastrov so brez podatkov celico po celico. Vrne vrednost 1, če so vhodne vrednosti brez podatkov, in 0 za celice, ki niso.",
		isNullDesc: "Funkcija Brez vrednosti določi, katere vrednosti iz vhodnega rastra na podlagi pikslov so brez podatkov. Vrne vrednost 1, če je vhodna vrednost brez podatkov, in vrednost 0 za piksle, ki niso brez podatkov.",
		kernelDensityName: "Gostota jedra",
		kernelDensitySnip: "Izračuna območje magnitude na enoto od točke ali polilinijskega geoobjekta z uporabo funkcije jedra, da ustreza zglajeni stožčasti površini do vsake točke ali polilinije.",
		kernelDensityDesc: "Ta funkcija izračuna območje magnitude na enoto od točke ali polilinijskega geoobjekta z uporabo funkcije jedra, da ustreza zglajeni stožčasti površini do vsake točke ali polilinije.",
		keyMetadataName: "Ključni metapodatki",
		keyMetadataSnip: "Prepiše ali vstavi ključne metapodatke rastra v funkcijsko verigo.",
		keyMetadataDesc: "Ta funkcija vam omogoča vnos ali prepis ključnih metapodatkov rastra.<div><br/>Informacije, pridobljene iz ključnih metapodatkov, se uporabljajo za pomoč aplikaciji pri obdelavi in upodabljanju, vključno z zagotavljanjem uporabnih informacij, kot so imena senzorjev, imena pasov ali oblačnost, povezana s slikovjem.</div>",
		shortestPathName: "Pot najmanjšega stroška",
		shortestPathSnip: "Izvede analizo razdalje stroškov z uporabo izhodiščnih in ciljnih vhodnih podatkov, kar se nato uporabi za določitev poti najmanjšega stroška iz izhodišča do cilja.",
		shortestPathDesc: "Funkcija Pot najmanjšega stroška izračuna pot najmanjšega stroška od izhodišča do cilja. Razdalja najmanjšega akumuliranega stroška se izračuna za vsak piksel prek površine stroška do najbližjega izhodišča. To izdela izhodni raster, ki zabeleži pot najmanjšega stroška ali poti iz izbranih lokacij do najbližjih izhodiščnih pikslov, določenih znotraj površine akumuliranih stroškov v smislu razdalje stroškov.<div><br/>Vsaki poti najmanjšega stroška je dodeljena vrednost, ko se nanjo naleti v procesu optičnega branja. Končni piksel v izvornem rastru poti stroškov prejme vrednost 1. Prva pot prejme vrednost 3, druga 4 in tako naprej. Ko se več poti združi in sledijo preostali razdalji nazaj do vira po isti poti, je segmentu, kjer dve poti tečeta skupaj, dodeljena vrednost 2. Združenemu delu poti ni mogoče dodeliti vrednosti ene od poti, ker združeni del pripada obema potema.</div>",
		lessThanEqualName: "Manjše ali enako kot",
		lessThanEqualSnip: "Izvede Relacijsko operacijo manjše kot ali enako na dveh vhodnih podatkih celico po celico. Vrne 1 za celice, če je prvi raster manjši kot ali enak drugemu rastru, in 0, če ni.",
		lessThanEqualDesc: "Funkcija izvede Relacijsko operacijo manjše kot ali enako na dveh vhodnih slojev piksel po piksel. Vrne vrednost 1 za piksel, če je prvi raster manjši ali enak drugemu rastru, in vrednost 0, če ni manjši ali enak drugemu rastru.",
		lessThanName: "Manjše kot",
		lessThanSnip: "Izvede Relacijsko operacijo manjše kot na dveh vhodnih podatkih celico po celico. Vrne 1 za celice, če je prvi raster manjši kot drugi raster, in 0, če ni.",
		lessThanDesc: "Funkcija izvede Relacijsko operacijo manjše kot na dveh vhodnih podatkih piksel po piksel. Vrne vrednost 1 za piksle, če je prvi raster manjši kot drugi raster, in vrednost 0, če ni manjši kot drugi raster.",
		lnName: "Ln",
		lnSnip: "Izračuna naravni logaritem (osnova e) celic v rastru.",
		lnDesc: "Funkcija Ln izračuna naravni logaritem (z osnovo e) vsakega piksla v rastru.",
		log10Name: "Log10",
		log10Snip: "Izračuna logaritem z osnovo 10 celic v rastru.",
		log10Desc: "Funkcija Log10 izračuna logaritem z osnovo 10 vsakega piksla v rastru.",
		log2Name: "Log2",
		log2Snip: "Izračuna logaritem z osnovo 2 celic v rastru.",
		log2Desc: "Funkcija Log2 izračuna logaritem z osnovo 2 vsakega piksla v rastru.",
		lookupName: "Iskanje",
		lookupSnip: "Ustvari nov raster tako, da poišče vrednosti, najdene v drugem polju v tabeli vhodnega rastra.",
		lookupDesc: "Funkcija ustvari nov raster tako, da poišče vrednosti, najdene v drugem polju v tabeli vhodnega rastra.",
		mlClassifyName: "Klasifikacija ML",
		mlClassifySnip: "Klasificira slikovje s pristopom piksel po piksel. Mešani piksli so dodeljeni geoobjektu, ki ima v tem pikslu največji odstotek.",
		mlClassifyDesc: "Funkcija Klasificiranje ML vam omogoča izvedbo nadzorovane klasifikacije z uporabo algoritma metode največje verjetnosti na rastrskem ali mozaičnem sklopu podatkov. Ta funkcija zahteva datoteko klasifikacije s spektralnim podpisom.",
		maskName: "Maska",
		maskSnip: "Nastavi vrednosti, ki jih ne želite prikazati.",
		maskDesc: "Ta rastrska funkcija nastavi vrednosti, ki jih ne želite prikazati v svojem rastru. Z uporabo funkcije Maska boste določili eno ali več vrednosti brez podatkov ali razpon veljavnih vrednosti pikslov. ",
		minusName: "Odštevanje",
		minusSnip: "Odšteje vrednost drugega vhodnega rastra od vrednosti prvega vhodnega rastra celico po celico.",
		minusDesc: "Funkcija Minus odšteje vrednost drugega vhodnega rastra od vrednosti prvega vhodnega rastra piksel po pikslov.",
		modName: "Mod",
		modSnip: "Poišče ostanek (modulo) prvega rastra pri deljenju z drugim rastrom celico po celico.",
		modDesc: "Funkcija Mod poišče ostanek (modulo) prvega rastra pri deljenju z drugim rastrom piksel po piksel. Vrstni red vnosov je pomemben in vpliva na rezultat.",
		mosaicRastersName: "Mozaični rastri",
		mosaicRastersSnip: "Skupaj sestavi niz rastrskih sklopov podatkov, da ustvari en sklop podatkov.",
		mosaicRastersDesc: "Funkcija Mozaični rastri ustvari mozaično sliko iz več slik. Ko se slike prekrivajo, je na voljo več metod, ki jih lahko izberete, da določite, katere slike so prikazane.",
		ndviColorizedName: "Obarvani NDVI",
		ndviColorizedSnip: "Ustvari večpasovni sklop podatkov, ki predstavlja zdravje vegetacije na podlagi razlike med rdečimi in bližnjimi infrardečimi pasovi.",
		ndviColorizedDesc: "Funkcija Obarvani NDVI uporabi funkcijo NDVI na vhodni sliki in nato uporabi barvno karto ali barvno lestvico za prikaz rezultata.",
		ndviName: "NDVI",
		ndviSnip: "Izračuna normiran direfencialni vegetacijski indeks (NDVI).",
		ndviDesc: "Funkcija NDVI ustvari enopasovni sklop podatkov, ki predstavlja zdravje vegetacije na podlagi razlike med rdečimi in bližnjimi infrardečimi pasovi.<div><br/>NDVI je standardizirani indeks, ki vam omogoča ustvarjanje slike s prikazom zelenja, ki je znano tudi kot relativna biomasa. Ta indeks izkorišča kontrast med značilnostmi dveh pasov iz večspektralnih rastrskih sklopov podatkov: absorpcije klorofila v rdečem pasu in visoke odbojnosti rastlinskega materiala v skoraj infrardečem pasu (NIR). Izjemno nizke ali negativne vrednosti NDVI predstavljajo območja brez vegetacije, kot so oblaki, voda ali sneg. Zelo nizke vrednosti predstavljajo območja z malo ali brez vegetacije, kot so beton, skale ali gola tla. Srednje vrednosti predstavljajo območja z grmičevjem in travo. Visoke vrednosti predstavljajo gozdna območja in bujno vegetacijo.</div>",
		negateName: "Spremeni predznak",
		negateSnip: "Spremeni predznak (množi z –1) vrednosti piksla vhodnega rastra celico po celico",
		negateDesc: "Funkcija Spremeni predznak spremeni predznak (množi z –1) vrednosti piksla vhodnega rastra piksel po piksel ",
		nibbleName: "Nibble",
		nibbleSnip: "Zamenja celice rastra, da ustrezajo maski, z vrednostmi najbližjih sosedov.",
		nibbleDesc: "Splošna funkcija Nibble omogoči, da je izbranim območjem rastra dodeljena vrednost najbližjega soseda. To je uporabno za urejanje območij rastra, kjer so podatki morda napačni.",
		notEqualName: "Ni enako",
		notEqualSnip: "Izvede relacijsko operacijo ni enako kot na dveh vhodnih podatkih celico po celico. Vrne 1 za celice, če prvi raster ni enak drugemu rastru, in 0, če je.",
		notEqualDesc: "Funkcija izvede Relacijsko operacijo ni enako kot na dveh vhodnih podatkih piksel po piksel. Vrne vrednost 1 za piksle, če prvi raster ni enak drugemu rastru, in vrednost 0 za piksle, če je enak drugemu rastru.",
		pansharpeningName: "Izostritev (pansharpening)",
		pansharpeningSnip: "Umetno izboljša prostorsko ločljivost večpasovne slike tako, da jo zlije s pankromatsko sliko večje ločljivosti.",
		pansharpeningDesc: "Funkcija Izostritev (pansharpening) uporablja pankromatsko sliko z večjo ločljivostjo ali pas rastra za zlitje z nižjo ločljivostjo, večpasovni rastrski sklop podatkov za povečanje prostorske ločljivosti večpasovne slike.<div><br/>Namen izostritve (pansharpening) je ustvariti vizualno slike višje kakovosti. Ker tehnike spremenijo radiometrijo in spektralne značilnosti večpasovnega slikovja, je treba slikovje z izostrenjem (pansharpening) uporabljati preudarno za namene analize daljinskega zaznavanja.</div>",
		pathAllocationName: "Razmestitev razdalje poti",
		pathAllocationSnip: "Izračuna najbližje izhodišče za vsako celico na podlagi najmanjšega akumulativnega stroška prek površine stroška z upoštevanjem razdalje po površju in vodoravnih ter navpičnih faktorjev stroška.",
		pathAllocationDesc: "Funkcija Razmestitev razdalje poti izračuna najbližje izhodišče za vsako celico na podlagi najmanjšega akumulativnega stroška prek površine stroška z upoštevanjem razdalje po površju in vodoravnih ter navpičnih faktorjev stroška.",
		pathBackLinkName: "Povratna povezava razdalje poti",
		pathBackLinkSnip: "Določi soseda, ki je naslednja celica na poti najmanjšega akumuliranega stroška do izhodišča najmanjšega stroška ob upoštevanju razdalje po površju in vodoravnih ter navpičnih faktorjev stroška.",
		pathBackLinkDesc: "Funkcija Povratna povezava razdalje poti identificira usmerjenost soseda, ki je naslednja celica na poti najmanjšega akumuliranega stroška do najbližjega izhodišča ob upoštevanju razdalje po površju in vodoravnih ter navpičnih faktorjev stroška.",
		pathDistanceName: "Razdalja poti",
		pathDistanceSnip: "Izračuna za vsako celico razdaljo najmanjšega akumuliranega stroška do izhodišča najmanjšega stroška z upoštevanjem razdalje po površju skupaj z vodoravnimi in navpičnimi faktorji stroška.",
		pathDistanceDesc: "Funkcija Razdalja poti izračuna za vsako celico razdaljo najmanjšega akumuliranega stroška do najbližjega izhodišča z upoštevanjem razdalje površja in vodoravnih ter navpičnih faktorjev stroška.",
		plusName: "Seštevanje",
		plusSnip: "Doda (sešteje) vrednosti dveh rastrov celico po celico.",
		plusDesc: "Funkcija Plus doda (sešteje) vrednosti dveh rastrov piksel po piksel.",
		powerName: "Potenciranje",
		powerSnip: "Poveča vrednosti celic v rastru na potenco vrednosti, najdene v drugem rastru.",
		powerDesc: "Funkcija Potenca poveča vrednosti piksla v rastru na potenco vrednosti, najdene v drugem rastru.",
		radarCalibrationName: "Radarska kalibracija",
		radarCalibrationSnip: "Pretvori povratno sipanje RADARSAT-2.",
		radarCalibrationDesc: "To funkcijo je mogoče uporabiti za kalibriranje slikovja RADARSAT-2 v mozaičnem sklopu podatkov ali kot rastrski produkt. Kalibracija se izvede na radarskem slikovju, tako da so vrednosti pikslov resnična reprezentacija radarskega povratnega sipanja.",
		rasterInfoName: "Informacije o rastru",
		rasterInfoSnip: "Spremeni lastnosti rastra, kot so bitna globina, vrednosti brez podatkov, velikost celice in tako naprej.",
		rasterInfoDesc: "Informacije o rastru odprejo pogovorno okno z lastnostmi rastrskega sklopa podatkov, kot je število stolpcev in vrstic, število pasov, vrsta piksla, obseg in koordinatni sistem. Te lastnosti lahko urejate tako, da izberete rastrski sklop podatkov, ki jih uporabite kot predlogo. ",
		rasterizeAttributesName: "Rasterizacija atributov",
		rasterizeAttributesSnip: "Obogati raster prek dodatnih pasov, ki izvirajo iz vrednosti določenih atributov zunanje tabele ali geoobjektne storitve.",
		rasterizeAttributesDesc: "Funkcija Rasterizacija atributov obogati raster z dodajanjem pasov, ki izvirajo iz vrednosti določenih atributov, zunanje tabele ali geoobjektne storitve. Izbirno lahko določite raste območja in atribut povezanega ID območja, da omogočite iskanje glede na regijo.",
		rasterizeFeatureClassName: "Rasterizira geoobjekte",
		rasterizeFeatureClassSnip: "Pretvori geoobjekte v raster.",
		rasterizeFeatureClassDesc: "Ta funkcija pretvori podatke o razredu poligonskega, polilinijskega in točkovnega geoobjekta v rastrski sloj.<div><br/>Geoobjektom so dodeljene vrednosti pikslov glede na OBJECTID geoobjekta (privzeto). Izbirno lahko vrednosti pikslov temeljijo na uporabniško določenih vrednostih polj v atributni tabeli vhodnega geoobjekta.</div>",
		recastName: "Preoblikovanje",
		recastSnip: "Spremeni parametre funkcijske verige v mozaičnem sklopu podatkov ali slikovni storitvi. To se pogosto uporablja s sklopi podatkov LAS, da se izognemo potrebi po ustvarjanju ločenih mozaičnih sklopov podatkov za druge reprezentacije reliefa.",
		recastDesc: "Funkcija Preoblikovanje se uporablja za dinamično spreminjanje parametrov funkcije, uporabljene v mozaičnem sklopu podatkov ali slikovni storitvi brez fizične ohranitve sprememb.",
		regionGroupName: "Skupina regije",
		regionGroupSnip: "Za vsako celico v izpisu je zabeležena povezana regija, ki ji ta celica pripada. Vsaki regiji je dodeljena enolična številka.",
		regionGroupDesc: "Splošna funkcija Skupina regije za vsako celico beleži rezultat, identificira povezano regijo, ki ji pripada celica. Vsaki regiji je dodeljena enolična številka.<div><br/>Prva optično prebrana regija dobi vrednost ena, druga dve in tako naprej, dokler ni vsem regijam dodeljena vrednost. Optični bralnik se premika iz leve proti desni, od zgoraj navzdol. Vrednosti, dodeljene izhodnim območjem temeljijo na tem, kdaj se nanje naleti med postopkom optičnega branja.</div>",
		regionGrowName: "Rast regij",
		regionGrowSnip: "Rastoče regije iz izvornih točk.",
		regionGrowDesc: "Funkcija Rast regije skupini sosednje piksle glede na določen polmer od izvorne točke. Skupini pikslov ali objektu je dodeljena določena vrednost polnila.",
		remapName: "Preslikava",
		remapSnip: "Spremeni vrednosti pikslov tako, da dodeli nove vrednosti razponom vrednosti pikslov ali z uporabo zunanje tabele.",
		remapDesc: "Funkcija Preslikava omogoča, da spremenite ali preklasificirate vrednosti pikslov rastrskih podatkov. To lahko naredite tako, da določite razpon vrednosti pikslov za preslikavo na izhodno vrednost piksla ali uporabite tabelo za preslikavo vrednosti piksla na izhodno vrednost piksla.",
		reprojectName: "Preprojiciranje",
		reprojectSnip: "Spremeni projekcijo rastrskega sklopa podatkov, mozaičnega sklopa podatkov ali rastrskega elementa v mozaičnem sklopu podatkov. Prav tako lahko prevzorči podatke na novo velikost celic in določi izvor.",
		reprojectDesc: "Funkcija Preprojiciranje spremeni projekcijo rastrskega sklopa podatkov, mozaičnega sklopa podatkov ali rastrskega elementa v mozaičnem sklopu podatkov. Prav tako lahko prevzorči podatke na novo velikost celic in določi izvor.<div><br/>Funkcijo Preprojiciranje je mogoče uporabiti pri ustvarjanju ploščic iz rastrskega ali mozaičnega sklopa podatkov, ki ni v zahtevani projekciji. Na primer, pri ustvarjanju ploščične slikovne storitve, ki je lahko integrirana z aplikacijami z drugimi ploščičnimi storitvami, je pomembno, da so vse v enaki projekciji. To je pogosto projekcija Web Mercator. Ker mozaičnega sklopa podatkov ni mogoče preprojicirati, lahko naredite eno od dvojega:—bodisi ustvarite referenčni mozaični sklop podatkov iz obstoječega mozaičnega sklopa podatkov v zahtevani projekciji, ali pa dodate funkcijo Preprojiciranja funkcijski verigi mozaičnega sklopa podatkov. Drug primer uporablja to funkcijo na rastrskem elementu v mozaičnem sklopu podatkov. Pri uporabi funkcije Ploščičenje rastra boste morda želeli vstaviti funkcijo Preprojiciranje, da bodo ploščice ustvarjene v novi projekciji. Rastrske elemente v mozaičnem sklopu podatkov je mogoče ploščičiti, ko je obdelava intenzivna in poskušate objaviti slikovno storitev, ki je hitra, brez da bi ploščičili celotno slikovno storitev.</div>",
		resampleName: "Prevzorčenje",
		resampleSnip: "Spremeni velikost celice rastra.",
		resampleDesc: "Funkcija Prevzorčenje spremeni velikost celice, vrsto prevzorčenja ali oboje.<div><br/>Funkcijo Prevzorčenje uporabite samo pri posebnih računskih zahtevah; na primer, ko računate veter ali smer trenutne magnitude, ki zahteva prevzorčenje iz vira ločljivosti.</div>",
		roundDownName: "Zaokroži navzdol",
		roundDownSnip: "Vrne naslednje manjše celo število kot vrednost s plavajočo vejico za vsako celico v rastru.",
		roundDownDesc: "Funkcija Zaokroži navzdol vrne naslednje manjše celo število kot vrednost s plavajočo vejico za vsak piksel v rastru.",
		roundUpName: "Zaokroži navzgor",
		roundUpSnip: "Vrne naslednje večje celo število kot vrednost s plavajočo vejico za vsako celico v rastru.",
		roundUpDesc: "Funkcija Zaokroži navzgor vrne naslednje večje celo število kot vrednost s plavajočo vejico za vsak piksel v rastru.",
		segmentMeanShiftName: "Segmentni pomik v sredino",
		segmentMeanShiftSnip: "Združuje sosednje piksle s podobnimi spektralnimi značilnostmi v segmente.",
		segmentMeanShiftDesc: "Ta funkcija identificira objekte, geoobjekte ali segmente v vašem slikovju tako, da skupini sosednje piksle s podobnimi spektralnimi in prostorskimi značilnostmi. Nadzorujete lahko količino prostorskega in spektralnega glajenja, da pomagate priti do interesnih geoobjektov.",
		s1RadiometricCalibrationName: "Radiometrična kalibracija Sentinel-1",
		s1RadiometricCalibrationSnip: "Izvede različne vrste radiometrične kalibracije na podatkih Sentinel-1.",
		s1RadiometricCalibrationDesc: "Ta rastrska funkcija izvede tri različne kalibracije za sklop podatkov Sentinel 1, vključno z beta in gama ničlo, rezultat pa so kalibrirani sklopi podatkov. Cilj kalibracije SAR je zagotoviti slikovje, v katerem je mogoče vrednosti pikslov neposredno povezati z radarskim povratnim sipanjem scene. Čeprav je nekalibrirano slikovje SAR dovolj za kvalitativno uporabo, so kalibrirane slike SAR ključne za kvantitativno uporabo podatkov SAR.<div><br/>Tipična obdelava podatkov SAR, katere rezultat so slike stopnje 1, ne vsebuje radiometričnih popravkov, zato ostane pomemben radiometričen odklon. Pri slikah SAR je torej nujno uporabiti radiometrične popravke, da vrednosti pikslov slik resnično predstavljajo radarsko povratno sipanje odbojne površine. Radiometrični popravki so potrebni tudi za primerjavo slik SAR, pridobljenih z različnimi senzorji ali pridobljenih z istim senzorjem ob različnem času, v različnih načinih ali obdelanimi z različnimi procesorji.</div>",
		s1ThermalNoiseRemovalName: "Odstranitev termalnega šuma Sentinel-1",
		s1ThermalNoiseRemovalSnip: "Odstrani termalni šum iz podatkov Sentinel-1.",
		s1ThermalNoiseRemovalDesc: "Korekcijo termalnega šuma je mogoče uporabiti pri produktih Sentinel-1 Level-1 Single Look Complex (SLC) ter produktih Level-1 Ground Range Detection (GRD), ki še niso bili popravljeni. Operator lahko tudi odstrani to korekcijo na podlagi napisov produkta, da ponovno uvede signal šuma, ki je bil odstranjen, in tako ustvari izviren produkt. Napisi produkta bodo posodobljeni tako, da bodo dovoljevali ponovno uvedbo korekcije. ",
		setNullName: "Nastavi brez vrednosti",
		setNullSnip: "Nastavitev Brez vrednosti nastavi lokacije celic na Brez podatkov glede na določene kriterije. Vrne Brez podatkov, če je pogojna ocena resnična, in vrne vrednost, določeno v drugem rastru, če je neresnična.",
		setNullDesc: "Funkcija Nastavi brez vrednosti nastavi identificirane piksle na Brez podatkov glede na določene kriterije. Vrne Brez podatkov, če je pogojna ocena resnična (1), in vrne vrednost, določeno v Lažnem rastru, če je pogojna ocena neresnična (0). Ta kriterij je določen z rezultatom logične matematične funkcije, ki bo vhodni raster.",
		shadedReliefName: "Senčen relief",
		shadedReliefSnip: "Ustvari večpasovno, barvno kodirano 3D-reprezentacijo površja z relativnim položajem sonca, ki je upoštevan za senčenje slike.",
		shadedReliefDesc: "Funkcija Senčen relief ustvari barvno 3D-reprezentacijo reliefa tako, da združi slike metode kodiranih višin in senčenja reliefa. Ta funkcija uporablja višino nad tlemi in lastnosti azimuta, da določi položaj sonca.<div><br/></div>",
		sinHName: "SinH",
		sinHSnip: "Izračuna hiperboličen sinus celic v rastru.",
		sinHDesc: "Funkcija izračuna hiperboličen sinus pikslov v rastru.",
		sinName: "Sinus",
		sinSnip: "Izračuna sinus celic v rastru.",
		sinDesc: "Funkcija izračuna sinus pikslov v rastru.",
		slopeName: "Naklon",
		slopeSnip: "Izračuna stopnje spremembe od ene vrednosti piksla do njegovega soseda.",
		slopeDesc: "Ta rastrska funkcija izračuna naklon, ki je stopnja spremembe višine za vsako celico digitalnega modela višin (DMV). To je prvi derivat DMV.<div><br/>Ta funkcija uporablja funkcijo pospešeni arkus tangens(). Je šestkrat hitrejša in dopustna napaka je vedno manjša od 0,3 stopinje.</div>",
		speckleName: "Zrnatost",
		speckleSnip: "Zagotovi filtre za odstranitev šumov sklopov podatkov radarjev s sistetično odprtino.",
		speckleDesc: "Zrnatost je visokofrekvenčni šum na radarskih posnetkih. Slike, ki jih ustvarijo sistemi radarjev s sintetično odprtino (SAR) so pogosto tarče učinkov zrnatosti zaradi obdelave razpršenih signalov in interference elektromagnetnih valov, ki se odbijajo od površin ali objektov. Funkcija Zrnatost sklop radarskih posnetkov filtrira zrnatost in zgladi šum ter hkrati ohrani robove ali ostre značilnosti slike.",
		spectralConversionName: "Spektralna pretvorba",
		spectralConversionSnip: "Uporabi matriko za večpasovno sliko.",
		spectralConversionDesc: "Funkcija Spektralna pretvorba se nanaša na matriko večpasovne slike za vplivanje na barvne vrednosti rezultata.<div><br/>Nekateri senzorji na zbirajo modrih pasov zaradi nizkega razmerja med signalom in šumom. To se lahko uporabi, na primer, za pretvorbo lažne infrardeče v psevdonaravno barvo slike.</div>",
		squareRootName: "Kvadratni koren",
		squareRootSnip: "Izračuna kvadratni koren vrednosti celic v rastru.",
		squareRootDesc: "Funkcija kvadratnega korena izračuna kvadratni koren vrednosti pikslov v rastru.",
		squareName: "Kvadrat",
		squareSnip: "Izračuna kvadrat vrednosti celic v rastru.",
		squareDesc: "Kvadrat izračuna kvadrat vrednosti pikslov v rastru.",
		statisticsHistogramName: "Statistika in histogram",
		statisticsHistogramSnip: "Določite ali povežite statistiko in histogram.",
		statisticsHistogramDesc: "Funkcija Statistika in histogram se uporablja za določanje statistike in histograma rastra. To funkcijo lahko vstavite na konec funkcijske verige, da opišete statistiko in histogram predloge rastrskih funkcij (RFT). To je morda potrebno za nadzor privzetega prikaza rezultata obdelave, še posebej pri določitvi funkcijske verige, ki vsebuje mnogo funkcij.<div><br/>Statistiko lahko določite tako, da vpišete vrednosti ali jih uvozite iz rastrskega sklopa podatkov ali datoteke XML. Histograme je mogoče določiti samo z uvozom datoteke.</div>",
		statisticsName: "Statistika",
		statisticsSnip: "Izračuna središčno statistiko za vsak piksel slike na osnovi določenih središčnih soseščin.",
		statisticsDesc: "Funkcija Statistika izračuna središčno statistiko za vsak piksel slike na podlagi določene središčne soseščine.<div><br/>Funkcijo Statistika je mogoče uporabiti za zapolnitev izpuščenih linij v sliki. Spuščene linije pogosto povzročijo težave v senzorjih, ko niso zbrani podatki. To se je zgodilo v senzorjih, kot je Landsat 7's Enhanced Thematic Mapper Plus (ETM+). Ti manjkajoči podatki povzročajo težave pri analizi, pa tudi pri iskanju slikovja. Pri uporabi slikovja za analizo ni mogoče storiti veliko, a če gre za prekrivanje slike, ga je mogoče uporabiti namesto manjkajoče vsebine. Enako je mogoče narediti, če se slikovje uporablja za vizualizacijo. Vendar dodatna slika za zapolnitev vsebine ni vedno na voljo, zato mora izhajati iz obstoječih podatkov.</div>",
		streamLinkName: "Sotočja vodotokov",
		streamLinkSnip: "Dodeli enolične vrednosti odsekom rastrske linearne mreže med preseki.",
		streamLinkDesc: "Globalna funkcija Sotočja odsekov vodotokov dodeli enolične vrednosti odsekom rastrske linearne mreže med preseki.<div><br/>Sotočja so odseki kanala vodotoka, ki povezujeta dve zaporedna spoja, spoj in izliv ali spoj in razvodnica. V hidrologiji tem segmentom vodotoka pravimo odseki. Stekanje se nanaša na izlivno točko in pomaga razdeliti razvodje ali razvodnico porečja.</div>",
		stretchName: "Raztezanje",
		stretchSnip: "Izboljša sliko s prilagoditvijo razpona prikazanih vrednosti. To ne spremeni osnovnih vrednosti pikslov. Če ima piksel vrednosti zunaj določenega razpona, se bo prikazal kot minimalna ali maksimalna vrednost.",
		stretchDesc: "Funkcija Raztezanje izboljša sliko tako, da spremeni lastnosti, kot so osvetlitev, kontrast in gama prek več tipov raztezanja. Ta funkcija uporablja statistiko iz rastrov znotraj mozaičnega sklopa podatkov. Če torej uporabljate to funkcijo, se morate prepričati, da je bila izračunana statistika.<div><br/>Tip raztezanja določi raztezanje histograma, ki bo uporabljeno na rastrih za izboljšanje njihovega videza. Raztezanje izboljša videz podatkov tako, da razporedi vrednosti pikslov po histogramu od minimalnih do maksimalnih vrednosti, določenih z njihovo bitno globino. </div>",
		swathName: "Interpolacija vzorca",
		swathSnip: "Interpolira iz nepravilnih mrež ali vzorčnih podatkov.",
		swathDesc: "Nekateri sklopi podatkov netCDF ali HDF shranijo svojo geolokacijo kot nepravilno postavljene matrike pikslov. Ko te sklope podatkov dodate mozaičnemu sklopu podatkov, funkcija Interpolacija vzorca vzame nepravilno mrežene podatke in jih prevzorči tako, da je vsak piksel enake velikosti in je kvadraten.<div><br/>Pri dodajanju spremenljivk iz netCDF ali HDP v mozaični sklop podatkov bo samodejno preverjeno, če so podatki pravilno matričeni. Če niso, se funkcija Interpolacija vzorca samodejno uporabi za pretvorbo nepravilnega rastra v točke in nato v pravilno mrežen raster. Metodo interpolacije in velikost celice, uporabljeno v rastrski funkciji Interpolacija vzorca lahko spremenite. Za pravilno nameščene rastrske podatke interpolacija ne bo uporabljena, podatki pa bodo prebrani v obstoječi obliki.</div>",
		tanHName: "TanH",
		tanHSnip: "Izračuna hiperbolično tangento celic v rastru.",
		tanHDesc: "Funkcija izračuna hiperbolično tangento pikslov v rastru.",
		tanName: "Tan",
		tanSnip: "Izračuna tangento celic v rastru.",
		tanDesc: "Funkcija izračuna tangento pikslov v rastru. ",
		tasseledCapName: "Tasseled Cap (Kauth-Thomas)",
		tasseledCapSnip: "Izračuna stopnjo vegetacije, vlažnosti in osvetlitve. Ta tehnika se zanaša na koeficiente, ki jih je treba izračunati posebej za senzor.",
		tasseledCapDesc: "Kauth-Thomasova transformacija je namenjena analizi in kartiranju fenomenologije vegetacije in sprememb urbanega razvoja, zaznanih z različnimi sistemi satelitskih senzorjev. Imenuje se tudi transformacija »tasseled cap« zaradi oblike grafične porazdelitve podatkov. Transformacija je zagotovila logiko za vzorce, najdene v podatkih Landsat MSS kmetijskih polj kot funkcijo življenjskega cikla poljščin. Medtem ko poljščine rastejo in dozorevajo, se povečuje bližnji infrardeči učinek in zmanjšuje rdeča odbojnost na podlagi barve tal.<div><br/>Koristi te transformacije so se razširile od monitoringa rasti poljščin do analize in kartiranja vegetacije za podporo različnim uporabam, ko so gozdarstvo, upravljanje industrijske vegetacije, kartiranje in upravljanje ekosistema, zaloga in spremljanje skladiščenja ogljika in kreditov, urbani razvoj in drugo. Razširila so je tudi podpora – iz Landsat MSS do vključenih drugih priljubljenih satelitskih sistemov, kot so Landsat TM, Landsat ETM+, Landsat 8, IKONOS, QuickBird, WorldView-2 in RapidEye večspektralni senzorji.</div>",
		timesName: "Times",
		timesSnip: "Zmnoži vrednosti dveh rastrov celico po celico.",
		timesDesc: "Funkcija Časi razdeli vrednosti dveh rastrov piksel po piksel.",
		transposeBitsName: "Transponiranje bitov",
		transposeBitsSnip: "Odpakira bite vhodnega piksla in jih preslika v specifične bite v izhodnem pikslu. Namen te funkcije je manipulacija bitov iz nekaj vnosov, kot so kakovostni pasovni produkti Landsat 8.",
		transposeBitsDesc: "Funkcija Transponiranje bitov odpakira bite vhodnega piksla in jih preslika v specifične bite v izhodnem pikslu. Namen te funkcije je manipulacija bitov iz nekaj vnosov, kot so kakovostni pasovni produkti Landsat 8.",
		unitConversionName: "Pretvorba enot",
		unitConversionSnip: "Spremeni vrednosti iz ene merske enote v drugo.",
		unitConversionDesc: "Ta funkcija pretvori piksle iz ene enote v drugo. Podpira pretvorbe razdalje, hitrosti in temperature.",
		vectorFieldName: "Vektorsko polje",
		vectorFieldSnip: "Prikaže sklop podatkov z magnitudo (u) in smerjo (v) kot puščicama, pri čemer je magnituda predstavljena z velikostjo, hitrost pa s kotom puščice.",
		vectorFieldDesc: "Funkcija Vektorsko polje se uporabi za sestavo in pretvorbo dveh rastrov v dvopasovni raster, ki je podatkovnega tipa smeri magnitude ali podatkovnega tipa U-V.<div><br/>Vrednost U se včasih navaja kot conska hitrost, vrednost V pa se navaja kot meridionalna hitrost.</div>",
		viewshed2Name: "Območje vidnosti",
		viewshed2Snip: "Določi lokacije površine rastra, vidne nizu geoobjektov opazovalca z uporabo geodetskih metod.",
		viewshed2Desc: "Funkcija območja vidnosti določa lokacije površine rastra, vidne nizu geoobjektov opazovalca z uporabo geodetskih metod <div><br/>Vidljivost vsakega centra piksla se določi s pregledom med ciljem in vsakim opazovalcem. Če opazovalec vidi cilj v centru piksla, piksel velja za vidnega. To orodje pri določanju vidnosti vedno upošteva ukrivljenost zemlje.</div>",
		watershedName: "Razvodje",
		watershedSnip: "Določi prispevno območje nad sklopom celic v rastru",
		watershedDesc: "Splošna funkcija Razvodje določi prispevno območje nad sklopom pikslov v rastru. Razvodja razmejujejo raster smeri toka, ki identificira smer toka iz vsakega piksla.",
		weightedOverlayName: "Obteženo prekrivanje",
		weightedOverlaySnip: "Prekrije več rastrov z uporabo skupnih merskih lestvic in uteži glede na njihov pomen.",
		weightedOverlayDesc: "Ta funkcija vam omogoča prekrivnost več rastrov z uporabo skupnih merskih lestvic in uteži glede na njihov pomen.",
		weightedSumName: "Obtežena vsota",
		weightedSumSnip: "Uteži in dodajanje polj rastrov celico po celico.",
		weightedSumDesc: "Funkcija Obtežena vsota vam omogoča prekrivnost več rastrov, množenje vsakega z njegovo utežjo in seštevanje vseh skupaj.",
		windchillName: "Učinek Wind Chill",
		windchillSnip: "Za izračun Wind Chill efekta se upošteva temperaturo zraka okolice in hitrosti vetra.",
		windchillDesc: "Funkcija Wind Chill je uporabna za identifikacijo nevarnih vetrovnih pogojev ki, odvisno od časov izpostavljenosti elementom, lahko privedejo do ozeblin ali celo podhladitve. Wind chill je način za merjenje, kako močno zebe posameznika ob upoštevanju vetra pri že tako hladnih temperaturah. Večja kot je hitrost vetra, hitreje bo telo izgubljalo toploto in bolj bo človeka zeblo.",
		zonalRemapName: "Conska preslikava",
		zonalRemapSnip: "Preslikava pikslov v rastru na podlagi določenih con v drugem rastru in preslikava vrednosti odvisno od cone, določene v tabeli.",
		zonalRemapDesc: "Ta funkcija vam omogoča preslikavo pikslov v rastru na podlagi določenih con v drugem rastru in preslikavo vrednosti odvisno od cone, določene v tabeli.",
		zonalStatisticsName: "Območna statistika",
		zonalStatisticsSnip: "Izračuna statistiko iz vrednosti rastra znotraj con drugega sklopa podatkov.",
		zonalStatisticsDesc: "Funkcija izračuna statistiko iz vrednost rastra znotraj con drugega sklopa podatkov. Območje je določeno kot vsa območja v vhodu, ki imajo enako vrednost. Ni treba, da so območja sosednja. Ko sta vhodna podatka cone in vrednosti obeh rastrov z enako ločljivostjo, bosta uporabljena neposredno. Če so ločljivosti različne, je notranje prevzorčenje uporabljeno za ujemanje ločljivosti, preden se izvede conska operacija.",
		flowLengthName: "Dolžina toka",
		flowLengthSnip: "Izračuna gorvodno ali dolvodno razdaljo oz. obteženo razdaljo, vzdolž poti toka za vsako celico.",
		flowLengthDesc: "To je globalna rastrska funkcija. Ta funkcija ustvari rastrski sloj gorvodne ali dolvodne razdalje oz. izmerjene razdalje, vzdolž poti toka za vsako celico.<div><br/>Primarna uporaba funkcije Dolžina toka je izračun dolžine najdaljše poti toka znotraj dane kotline. Ta meritev se pogosto uporablja za izračun časa koncentracije kotanje. To se izvede z možnostjo Gorvodno. Funkcija se lahko uporablja tudi za ustvarjanje diagramov razdalje-območja hipotetičnega deževja in odtekanja z uporabo obteženega rastra kot impedanco za dolvodno premikanje.</div>",
		streamOrderName: "Vrstni red toka",
		streamOrderSnip: "Odsekom rastra, ki predstavljajo odcepe linearnega omrežja, dodeli številski vrstni red.",
		streamOrderDesc: "To je globalna rastrska funkcija. Ta funkcija ustvari rastrski sloj, ki odsekom rasterja, ki predstavljajo odcepe linearnega omrežja, dodeli številski vrstni red.<div><br/>Izhodna funkcija Vrstni red toka bo višje kakovosti, če sta vhodna rastrska sloja toka in smeri toka izpeljana iz iste površine. Če je raster toka izpeljan iz sklopa podatkov rasteriziranih tokov, potem izhodni sloj morda ne bo uporaben, saj se na osnovi celice-celice smer ne bo skladala z lokacijo celic toka. Rezultati funkcije Akumulacija toka se lahko uporabijo za ustvarjanje rastra rečne mreže z uveljavitvijo vrednosti praga za izbiro celic z višjim akumuliranim tokom. Na primer, celice, ki imajo več kot 100 celic, ki tečejo v njih, se uporabljajo za določanje rečne mreže. Uporabite funkcijo Con ali Nastavi nič, da ustvarite raster rečne mreže, kjer vrednosti akumulacije toka 100 ali več gredo v eno, preostanek pa je prestavljen v ozadje (Ni podatkov). Končno omrežje toka se lahko uporablja v funkciji Vrstni red toka. Ta funkcija podpira samo rastrski sloj smeri toka D8. Smeri toka D8 lahko ustvarite z uporabo funkcije Smer toka in uporabite s privzeto vrsto smeri toka D8.</div>",
		snapPourPointName: "Privlačnost izlivne točke",
		snapPourPointSnip: "Privlačnost izlivne točke na celico z najvišjo akumulacijo toka znotraj navedene razdalje",
		snapPourPointDesc: "<div><br/>Funkcija Magnetenje izlivne točke se uporablja za zagotavljanje izbora točk z visoko akumulacijo toka, ko razmejevalne kotline odvodnjavanja uporabljajo funkcijo Razvodje. Funkcija Magnetenje izlivne točke na celico z najvišjo akumulacijo toka znotraj navedene razdalje.<div><br/>Funkcija Privlačnost izlivne točke se uporablja za zagotavljanje izbora točk z visoko akumulacijo toka, ko razmejevalne kotline odvodnjavanja uporabljajo funkcijo Razvodje. Orodje Magnetenje izlivne točke bo iskalo znotraj razdalje magnetenja okrog določenih izlivnih točk za celico z najvišjim akumuliranim tokom in izlivno točko premaknila na tisto lokacijo. Izhodni sloj je rastrski sloj s celimi števili, ko so bile izvirne lokacije izlivnih točk namagnetene na lokacije višjega akumuliranega toka.</div>",
		sinkName: "Ponor",
		sinkSnip: "Ustvari raster, ki prepoznava vse ponore ali območja notranjega odvodnjavanja.",
		sinkDesc: "To je globalna rastrska funkcija. Ta funkcija ustvari rastrski sloj, ki prepoznava vse ponore ali območja notranjega odvodnjavanja. Ponor je celica ali niz prostorsko povezanih celic s smerjo toka, ki ji ni mogoče dodeliti ene od osem veljavnih vrednosti v rastru smeri toka. To se lahko zgodi, ko so vse sosednje celice višje od obdelovalne celice oz. ko dve celici tečeta ena v drugo, s čimer nastane dvocelična zanka.<div><br/>Funkcija Ponor podpira samo rastrski sloj smeri toka D8. Smeri toka D8 lahko ustvarite z uporabo funkcije Smer toka in uporabite s privzeto vrsto smeri toka D8. Izhod funkcije Ponor raster s celim številom, pri čemer je vsakemu ponoru dodeljena enolična vrednost. Te enolične vrednosti imajo razpon, ki se nahaja med enim ali skupnim številom ponorov. Na primer, če bi bilo skupno število ponorov 1000, znaša razpon enoličnih vrednosti od 1 do 1000.</div>",
		aggregateName: "Agregiraj",
		aggregateSnip: "Ustvari zmanjšano ločljivost različice rastra.",
		aggregateDesc: "Funkcija Agregiraj opravi vzorčenje vhodnega rastra v grobo ločljivost na podlagi določene strategije agregiranja. Vsaka izhodna celica vsebuje vsoto, minimum, maksimum, sredino ali mediano vhodnih celic, ki jih zajema obseg te celice.<div><br/>Faktor, s katerim se pomnoži velikost celice vhodnega rastra. Na primer, če je vrednost faktorja celice tri, bi to pomenilo velikost izhodne celice, ki je trikrat večja od velikosti vhodnega rastra. Določite lahko, kako ravnati z obsegom izhoda, če število vrstic ali stolpcev v vnosu ni natančno večkratnik faktorja celice. Zgornja in desna meja sta privzeto razširjeni tako, da bosta zajemali večji prostorski obseg kot vhodni raster, da bi zagotovili obdelavo vseh vhodnih celic. Izbirno pa se lahko zgornja in desna meja zmanjšata tako, da pokrijeta manjši obseg, tako da je število obdelanih vrstic in stolpcev natančno večkratnik faktorja celice. Določite lahko, kako naj se med izračunom agregacije ravna s celicami NoData. Privzet mehanizem je nastavljen tako, da se vhodne celice NoData, ki sodijo v prostorski obseg večje celice v izhodnem rastru, pri določanju vrednosti te izhodne celice ne upoštevajo. Izbirno lahko določite tudi, da če obstaja celo ena vhodna celica NoData v prostorskem obsegu izhodne celice, bo ta celica NoData v izhodnem rastru.</div>",
		ccdcName: "CCDC analiza",
		ccdcSnip: "Oceni spremembe vrednosti pikslov skozi čas z algoritmom neprekinjenega zaznavanja in klasifikacije sprememb (CCDC) in ustvari rezultate modela.",
		ccdcDesc: "Funkcija analize CCDC oceni spremembe vrednosti pikslov skozi čas z algoritmom neprekinjenega zaznavanja in klasifikacije sprememb (CCDC) in ustvari rezultate modela. Podprta je le v povezavi z zaznavanjem sprememb s funkcijo analize sprememb v predlogi rastrske funkcije. Če želite ustvariti izhodni rastrski sloj, povežite funkcijo analize CCDC z zaznavo spremembe s funkcijo spremembe analize, shranite kot predlogo rastrske funkcije in zaženite rastrsko analizo s predlogo funkcije.<div><br/>Ta funkcija uporablja algoritem za zaznavo in klasifikacijo kontinuiranih sprememb (CCDC) za oceno sprememb vrednosti pikslov skozi čas za sveženj slik. V časovnem nizu optičnega slikovja ali izsledkov slikovja (na primer NDVI), lahko vrednosti pikslov nihajo iz več razlogov: 1. Sezonske spremembe – spremembe vrednosti pikslov odražajo spremembe vegetacije zaradi sezonske spremenljivosti temperature in padavin. Na severni polobli pričakujemo tako večjo gostoto zelene vegetacije poleti kot pozimi; 2. Postopne spremembe – spremembe vrednosti pikslov odražajo trende v vegetaciji ali površinskih vodah zaradi podnebne spremenljivosti ali dolgoročnih praks upravljanja zemljišč. Tako se na primer obseg golih tal v območju lahko poveča zaradi dolgotrajnega upada padavin; in 3. Nagle spremembe – spremembe vrednosti pikslov odražajo spremembe pokritosti tal, ki se pojavijo nenadoma zaradi krčenja gozdov, urbanega razvoja, naravnih katastrof itn. Algoritem CCDC identificira vse tri vrste sprememb s primarnim namenom prepoznavanja nenadnih sprememb. Harmonični modeli regresije in trendov so vgrajeni v podatke za oceno sezonskih in postopnih sprememb, nenadni odmiki od modelov trendov pa kažejo na nenadno spreminjanje.<div><br/>Algoritem CCDC je bil prvotno zasnovan za podatke Landsat TM, Landsat ETM+ in Landsat OLI o površinski odbojnosti ali temperaturi svetlosti. Vendar pa bo zaznavanje sprememb z uporabo funkcije analize sprememb v povezavi s to funkcijo zaznalo spremembo za večpasovno slikovje iz katerega koli podprtega senzorja in izsledkov enopasovnega slikovja, kot so indeksi pasov. Tako lahko izvajate neprekinjeno odkrivanje sprememb na rastru Normalizirani diferencialni vegetacijski indeks (NDVI), saj lahko nagle spremembe NDVI kažejo na krčenje gozdov.</div>",
		computeChangeName: "Izračunaj spremembo",
		computeChangeSnip: "Izračuna razliko med dvema kategoričnima ali neprekinjenima rastrskima sklopoma podatkov.",
		computeChangeDesc: "Funkcija Izračunaj spremembo se lahko uporablja za naštevanje razlik med dvema razvrščenima rastroma za analizo spremembe prekritosti tal ali za pregled sprememb med dvema neprekinjenima enopasovnima rastroma, kot so višina, temperatura, prekritost krošenj itn.",
		detectChangeName: "Zaznava spremembe z uporabo analize spremembe",
		detectChangeSnip: "Ustvari rastrski sloj, ki vsebuje informacije o spremembi pikslov z uporabo izhodnega rastra analize sprememb.",
		detectChangeDesc: "<div>Funkcija zaznave spremembe z uporabljeno analizo spremembe ustvari rastrski sloj, ki vsebuje informacije o datumu sprememb pikslov z uporabo rastra analize sprememb. Raster analize sprememb mora biti ustvarjen prek analize sprememb z uporabo orodja CCDC ali analize sprememb z uporabo orodja LandTrendr oz. funkcije rastra CCDC Analysis ali funkcije rastra LandTrendr Analysis.</div><br><div>To funkcijo rastra je mogoče kombinirati s funkcijo rastra CCDC Analysis ali funkcijo rastra LandTrendr Analysis v predlogi funkcije rastra. Za ustvarjanje stalnega izhoda rastra izhod funkcije CCDC Analysis ali LandTrendr Analysis povežite s funkcijo Detect Change Using Change Analysis, shranite kot predlogo funkcije rastra in zaženite rastrsko analizo s predlogo.</div><br><div>Parameter <strong>Spremeni tip</strong> označuje informacijo, ki se ustvari. Informacije so izvlečene iz rastra analize sprememb. Ko izvajate to funkcijo na izhodu iz funkcije/orodja CCDC, lahko izberete izmed naslednjih možnosti:</div><ul><li><strong>Čas najnovejše spremembe</strong>--Najnovejši datum in čas, pri katerem je bil piksel označen kot spremenjen.</li><li><strong>Čas najzgodnejše spremembe</strong>--Najzgodnejši datum in čas, pri katerem je bil piksel označen kot spremenjen.</li><li><strong>Čas največje spremembe</strong>--Datum in čas, v katerem je bila izračunana sprememba najpomembnejša za piksel.</li><li> <strong>Število sprememb</strong>--Skupno število sprememb piksla.</li></ul><div>Pri izvajanju te funkcije na izhodu iz funkcij/orodja LandTrendr so na voljo naslednje dodatne možnosti:</div><ul><li><strong>Čas najdaljše spremembe</strong>--Datum, ko je bil piksel označen kot spremenjen, na začetku ali koncu najdaljšega obdobja spremembe.</li><li><strong>Čas najkrajše spremembe</strong>--Datum, ko je bil piksel označen kot spremenjen, na začetku ali koncu najkrajšega obdobja spremembe.</li><li><strong>Čas najhitrejše spremembe</strong>--Datum, ko je bil piksel označen kot spremenjen, na začetku ali koncu najhitrejšega obdobja spremembe.</li><li><strong>Čas najpočasnejše spremembe</strong>--Datum, ko je bil piksel označen kot spremenjen, na začetku ali koncu najpočasnejšega obdobja spremembe.</li></ul><div>Izhodni raster je večpasovni raster, v katerem vsak pas vsebuje informacije o spremembah, odvisno od izbranega tipa spremembe in najvišjega števila navedenih sprememb. Na primer, če je <strong>Tip spremembe</strong> nastavljen na <strong>Čas najzgodnejše spremembe</strong> in je <strong>Najvišje število sprememb</strong> nastavljeno na 2, potem funkcija izračuna dva najzgodnejša datuma, ko je prišlo do spremembe skozi časovni niz za vsak piksel. Rezultat je raster, v katerem prvi pas vsebuje datume najzgodejše spremembe posameznega piksla, drugi pas pa vsebuj datume druge najzgodnejše spremembe posameznega piksla.</div><br><div>Pri uporabi te funkcije na izhodu iz orodij LandTrendr lahko izberete, ali boste izvlekli datum, ki označuje začetek ali konec spremembe z uporabo parametra <strong>Datum segmenta</strong>. Na primer, za razumevanje kako se zažene najnovejša sprememba v časovnem nizu, nastavite <strong>Tip spremembe</strong> na <strong>Čas najnovejše spremembe</strong> in <strong>Datum segmenta</strong> na <strong>Začetek segmenta</strong>.</div><br><div>Uporabite naslednje filtrirne parametre za pridobivanje bolj podrobnih datumov spremembe iz rastra analize spremembe:</div><ul><li><strong>Filtriraj po letu</strong>--Prepoznajte spremembe, ki so se zgodile v določenem časovnem obdobju, na primer, če iščete spremembe, ki so se zgodile na območju v petih letih suše.</li><li><strong>Filtriraj po trajanju</strong>--Prepoznajte spremembe, ki so se zgodile v določenem razponu let, na primer, če iščete samo nenadne spremembe, ki so se zgodile v letu ali dveh. Izračunate lahko trajanje, za katerega se zanimate, z uporabo formule <strong>končno leto - začetno leto +1</strong>. Luknje v časovnem nizu bodo vključene.</li><li><strong>Filtriraj po obsegu</strong>--Prepoznajte spremembe določenega obsega, na primer, če iščete samo največje spremembe v indeksu vegetacije NDVI. Obseg je absolutna vrednost, torej minimalne in maksimalne vrednosti ne morejo biti negativne. Za določanje spremembe smeri morate uporabiti parameter <strong>Spremeni smer</strong>.</li></ul>",
		distanceAccumulationName: "Akumulacija razdalje",
		distanceAccumulationSnip: "Izračuna akumulirano razdaljo vsake celice do virov, pri čemer je mogoče določiti pravokotno razdaljo, stroškovno razdaljo, pravo površinsko razdaljo ter navpične in vodoravne faktorje stroškov.",
		distanceAccumulationDesc: "Akumulacija razdalje izračuna razdaljo do vsake lokacije v območju preiskave do najbližjega ali najmanj stroškovnega vira. Če so za vnos predvideni samo viri, se izračuna razdalja premice do vsake lokacije v študijskemu območju. Če se za vhod uporabljajo tako viri kot tudi ovire, funkcija Akumulacija razdalje izračuna ravno premico okoli ovir. Tako za izvorni kot za mejni raster mora biti vrednost ozadja NoData, viri in ovire pa predstavljeni z veljavnimi vrednostmi celic. Veljavne vrednosti vključujejo ničlo. <div><br/>Kadar se kot vhod poda površinski raster, se izračuna dejanska površinska razdalja med celicami. Za izvedbo analize stroškov z uporabo funkcije Akumulacija daljave je potrebna stroškovna površina. Če je zagotovljena stroškovna površina, je rezultat akumuliran raster stroškovne razdalje. Če so podani vodoravni in navpični faktorji, se šteje, da se usmerjenost akumulira kot strošek. Obstajajo štiri značilnosti vira, ki jih je mogoče uporabiti. Te značilnosti, ki so lahko bodisi od vira bodisi premiki iz vira, so pod nadzorom posebnih parametrov: 1. Začetna akumulacija:  nastavi začetni stroške pred začetkom gibanja. 2. Maksimalna akumulacija:  določi, koliko stroškov lahko vir nabere, preden doseže mejo. 3. Množitelj za stroške:  določi način potovanja ali velikost pri viru. 4. Smer potovanja:  ugotovi, ali se premikač zažene pri viru in se premika na lokacije, ki niso vir, ali pa se zažene na lokacijah, ki niso vir, in se vrne nazaj k viru.<div><br/>Privzeto je rezultat funkcije Akumulacija razdalje en sam pas, kar je razdalja rastra akumulacije. Lahko pa se ustvari tudi drugi pas, pas v smeri nazaj. Ta pas označuje z vsake lokacije v območju preiskave, v katero smer naj bi prišli do najmanj stroškovnega vira. Oba pasova bosta potrebna za določitev optimalnih poti znotraj območja preiskave. Če želite ustvariti pot, najprej uporabite funkcijo Ekstrahiranje pasu, da ekstrahirate raster funkcije Akumulacija daljave in raster v smeri nazaj. Uporabite te sloje kot vhod za funkcijo Pot stroškov. V tej funkciji uporabite raster akumulacije razdalje kot vnos rastra stroškovne razdalje, rater v smeri nazaj pa kot vnos rastra povratne povezave stroškov.</div>",
		distanceAllocationName: "Razporeditev razdalje",
		distanceAllocationSnip: "Izračuna razporeditev razdalje vsake celice do opredeljenih virov, pri čemer je mogoče določiti pravokotno razdaljo, stroškovno razdaljo, pravo površinsko razdaljo ter navpične in vodoravne faktorje stroškov.",
		distanceAllocationDesc: "Razporeditev razdalje izračuna, kateremu viru je dodeljena vsaka lokacija v območju preiskave. Če so za vnos zagotovljeni samo viri, se lokacije razporedijo z ravninsko razdaljo do najbližjega vira. Če se za vhod uporabljajo tako viri kot tudi ovire, funkcija Razporeditev razdalje izračuna ravno premico okoli ovir in določi kateremu viru je lokacija dodeljena. Tako za izvorni kot za mejni raster mora biti vrednost ozadja NoData, viri in ovire pa predstavljeni z veljavnimi vrednostmi celic. Veljavne vrednosti vključujejo ničlo.<div><br/>Za izvedbo analize stroškov z uporabo funkcije Razporeditev razdalje je potrebna stroškovna površina. Če je zagotovljena stroškovna površina, je rezultat raster razporeditve na podlagi akumulacijskih stroškov in ne na ravni razdalji. Če so podani vodoravni in navpični faktorji, se šteje, da se usmerjenost akumulira kot strošek. Kadar se kot vhodni sloj poda površinski raster, se dejanska razdalja površine, ki jo prevozi med prehodom med celicami, izračuna, ko se določi razporeditev. Obstajajo štiri značilnosti vira, ki jih je mogoče uporabiti. Te značilnosti, ki so lahko bodisi od vira bodisi premiki iz vira, so pod nadzorom posebnih parametrov: 1. Začetna akumulacija :  nastavi začetni strošek pred začetkom gibanja. 2. Maksimalna akumulacija:  določi, koliko stroškov lahko vir nabere, preden doseže mejo. 3. Množitelj za stroške:  določi način potovanja ali velikost pri viru. 4. Smer potovanja:  ugotovi, ali se premikač zažene pri viru in se premika na lokacije, ki niso vir, ali pa se zažene na lokacijah, ki niso vir, in se vrne nazaj k viru.<div><br/>Privzeto je rezultat funkcije Razporeditev razdalje en sam pas, kar je razdalja rastra razporeditve. Preverjanje možnosti Boolean Ustvari izvorno vrstico in stolpec kot dodatne pasove v izhodu povzroči večpasovni raster, sestavljen iz treh pasov. Prvi pas je pas razporeditve razdalje, drugi pas vsebuje indeks vrstice in tretji pas vsebuje indeks stolpca. Ti indeksi prepoznavajo lokacijo izvorne celice, ki je oddaljena vsaj za razdaljo akumuliranega stroška. Indeks vrstice vira in indeks stolpca vira se lahko uporabljata skupaj za izvedbo intenzivnosti mapiranja. Če poizvedate katero koli lokacijo vašega območja preiskave v pasovih dva in tri, boste poznali vrstico in stolpec z najmanj viri stroškov za to lokacijo.</div>",
		eucBackDirectionName: "Evklidska obratna smer",
		eucBackDirectionSnip: "Izračuna smer v stopinjah do sosednje celice vzdolž najkrajše poti nazaj do najbližjega vira ob izogibanju oviram.",
		eucBackDirectionDesc: "Funkcija evklidske obratne smeri povzroči neprekinjeni raster s plavajočo vejico, ki predstavlja smer v stopinjah nazaj do najbližjega vira, pri tem pa se izogne oviram, če so prisotne.<div><br/>Vnosi v evklidsko obratno smer so vir, v katerega bo izračunana smer. Neobvezen vhodni sloj je raster, ki predstavlja ovire v študijskem območju. Tako za izvorni kot za mejni raster mora biti vrednost ozadja NoData, viri in ovire pa predstavljeni z veljavnimi vrednostmi. Veljavne vrednosti vključujejo ničlo. Privzeto bo izračun obdelan v kombiniranem obsegu virov in ovir, hkrati pa dodal 2 vrstici in stolpca. Če je analiza potrebna le v določeni razdalji od virov, potem je mogoče uporabiti parameter Maksimalna razdalja. Evklidska obratna smer podpira tako planarno kot geodetsko metodo pri izračunu. Planarna metoda izračuna bo izvedena na projicirani ravni površini s pomočjo 2D kartezijskega koordinatnega sistema. Izračun geodetske metode bo izveden na elipsoidu, kar pomeni, da se rezultati ne glede na vhodno ali izhodno projekcijo ne spremenijo.<div><br/>Rezultat funkcije evklidske obratne smeri lahko uporabite skupaj z rezultatom funkcije evklidske razdalje za določitev najkrajših poti od lokacij v območju preiskave nazaj do vira. Rezultat evklidske obratne smeri in rezultat evklidske razdalje se uporabljata v funkciji stroškovne poti skupaj s cilji za ustvarjanje najkrajših poti.</div>",
		expandName: "Razširi",
		expandSnip: "Razširi izbrana območja rastra za območja za določeno število celic.",
		expandDesc: "Z globalno funkcijo Razširi lahko posplošite ali poenostavite izračune tako, da povečate določene cone. Prav tako lahko nadzorujete količino posploševanja, ki se bo zgodila.<div><br/>Območja, ki jih izberete, se bodo z razširitvijo na druga območja povečala. Konceptualno lahko na izbrane vrednosti cone gledamo kot na osrednje območje, ostale vrednosti pa ostanejo kot ozadja. Osrednja območja se lahko razširijo v območja v ozadju.<div><br/>Količino posploševanja lahko nadzirate s parametrom Število celic. Privzeto je ta vrednost 1, kar pomeni, da se bodo izbrane cone razširile za znesek, ki ustreza velikosti ene celice. Če želite povečati stopnjo posplošitve, lahko za ta parameter določite večjo vrednost. Konceptualno je to kot, da orodje zaženete tolikokrat, kot je določeno število, rezultati prejšnjega izvajanja pa so vnos za naslednje potovanje.</div>",
		trendAnalysisName: "Ustvari trend",
		trendAnalysisSnip: "Oceni trend za vsak piksel vzdolž dimenzije za eno ali več spremenljivk v večdimenzionalnem rasterju.",
		trendAnalysisDesc: "<div>To funkcijo je mogoče uporabiti za usklajevanje podatkov vzdolž linearne, usklajene ali polinomske linije trenda oz. jo je mogoče uporabiti za izvajanje zaznavanja trenda z uporabo testa Mann-Kendall ali Seasonal-Kendall.</div><br><div>Izhodni raster trenda, ustvarjen s to funkcijo, se uporablja kot vhod do funkcije <strong>Predvidevaj z uporabo trenda</strong>.</div><br><div>Testa Mann-Kendall in Seasonal-Kendall se uporabljata za določanje, ali je prisoten monotoni trend v podatkih. So neparametrski, kar pomeni, da ne predvidevajo določeno distribucijo podatkov. Test Mann-Kendall ne smatra serijske korelacije ali sezonskih učinkov. Če so podatki sezonski, je bolj primeren test Seasonal-Kendall.</div><br><div>Če je orodje uporabljeno za izvajanje testa Mann-Kendall ali Seasonal-Kendall, je izhod petpasovni raster kot sledi:</div><ul><li>Pas 1 = naklon Sen</li><li>Pas 2 = p-vrednost</li><li>Pas 3 = rezultat Mann-Kendall (S)</li><li>Pas 4 = varianca S</li><li>Pas 4 = varianca S</li><li>Pas 5 = rezultat Z</li></ul><div>Izhodi iz testov Mann-Kendall ali Seasonal-Kendall se lahko uporabijo za določanje, kateri piksli v vašem večdiomenzionalnem časovnem nizu imajo statistično pomemben trend. To informacijo lahko uporabite v povezavi z linearno, usklajeno ali polinomsko analizo trenda za pridobivanje pomembnih trendov v vašem časovnem nizu. Ustvarite lahko masko, ki vključuje piksle s pomembnimi vrednostmi p, uporabite masko za večdimenzionalni raster in uporabite ta maskirani večdimenzionalni raster kot vhod do orodja za izvedbo linearne, usklajene in polinomske analize trenda.</div><br><div>Na voljo so tri možnosti linije trenda za umestitev trenda v spremenljive vrednosti ob dimenziji: linearna, polinomska in usklajena.</div><br><div>Za linearno analizo trenda je izhod tripasovni raster kot sledi:</div><ul><li>Pas 1 = naklon</li><li>Pas 2 = prestrezanje</li><li>Pas 3 = koren povprečne kvadratne napake (RMSE) ali napaka okrog linije najboljšega prileganja</li></ul><div>Za polinomsko analizo trenda je število pasov v izhodu odvisno od polinomskega zaporedja. Druga polinomska umestitev proizvede štiripasovni raster kot sledi:</div><ul><li>Pas 1 = polinomski_2</li><li>Pas 2 = polinomski_1</li><li>Pas 3 = polinomski_0</li><li>Pas 4 = RMSE</li></ul><div>Tretja polinomska umestitev proizvede petpasovni raster kot sledi:</div><ul><li>Pas 1 = polinomski_3</li><li>Pas 2 = polinomski_2</li><li>Pas 3 = polinomski_1</li><li>Pas 4 = polinomski_0</li><li>Pas 5 = RMSE</li></ul><div>Za usklajeno analizo trenda je število pasov odvisno od usklajene frekvence. Ko je frekvenca nastavljena na 1, je izhod petpasovni raster kot sledi:</div><ul><li>Pas 1 = naklon</li><li>Pas 2 = prestrezanje</li><li>Pas 3 = usklajeni_sin1</li><li>Pas 4 = usklajeni_cos1</li><li>Pas 5 = RMSE</li></ul><div>Ko je frekvenca rastra nastavljena na 2, je izhod sedempasovni raster kot sledi:</div><ul><li>Pas 1 = naklon</li><li>Pas 2 = prestrezanje</li><li>Pas 3 = usklajeno_sin1</li><li>Pas 4 = usklajeno_cos1</li><li>Pas 5 = usklajeno_sin2</li><li>Pas 6 = usklajeno_cos2</li><li>Pas 7 = RMSE</li></ul><div>Parameter <strong>Dolžina cikla</strong> za usklajeno analizo trenda se uporablja za označevanje števila in dolžine ciklov, ki jih pričakujete v vaših podatkih skozi dan ali leto. Na primer, če pričakujte, da bodo vaši podatki šli skozi dva cikla variacij v enem letu, bo dolžina cikla 182,5 dni ali pol leta. Če vsake tri ure zberete podatke temperature in je prisoten en cikel variacij na dan, potem je dolžina cikla en dan.</div><br><div>Parameter <strong>Frekvenca</strong> za usklajeno analizo trenda se uporablja za opisovanje usklajenega modela za umestitev v podatke. Če je frekvenca nastavljena na 1, bo za umestitev modela uporabljena kombinacija linearne in prve usklajene krivulje. Če frekvenca znaša 2, bo za umestitev modela uporabljena kombinacija linearne, prve usklajene krivulje ter druge usklajene krivulje. Če je frekvenca 3, bo za oblikovanje podatkov uporabljena dodatna tretja usklajena krivulja itn.</div><br><div>Statistiko kakovosti prileganja modela je mogoče ustvariti kot dodatne izhode. Koren povprečne kvadratne napake (RMSE), R-kvadrat, in vrednost p naklona trenda je mogoče izračunati in simbolizirati. Sloj izhodnega rastra trenda simbolizirajte z uporabo simbologije <strong>RGB</strong> in statistiko navedite kot rdeče, zelene in modre pasove.</div><br>",
		spectralUnmixingName: "Linearno spektralno mešanje",
		spectralUnmixingSnip: "Izvede podpikselno klasifikacijo in izračuna delno številčnost različnih vrst pokrovnosti tal za posamezne piksle.",
		spectralUnmixingDesc: "Funkcija Linearno spektralno mešanje izračuna frakcijsko pokritost posameznih pikslov, ki vsebujejo več vrst pokrovnosti tal. Ustvari večpasovni sloj, kjer vsak pas ustreza delnemu številu vsakega razreda pokritosti tal. Z njim lahko na primer razvrstite pokritosti tal na večspektralni sliki, da opravite prepoznavanje fotosintetske vegetacije, golih tal in mrtve ali nefosintetične vegetacije.<div><br/>Vrstni red izhodnega večpasovnega rastra sledi zaporedju vhodnega spektralnega profila. Število razredov ne sme presegati števila pasov v vhodnem rastru. Na primer, ne morete izvleči podatkov o več kot 8 razredih iz 8-pasovnega rastra.</div>",
		multidimensionalFilterName: "Večdimenzionalni filter",
		interpolateRasterByDimensionFunctionName: "Interpoliraj rastre po dimenzijah",
		interpolateRasterByDimensionFunctionSnip: "Interpolira večdimenzionalni raster pri določenih vrednostih dimenzij z uporabo sosednjih rezin.",
		interpolateRasterByDimensionFunctionDesc: "<p>Ta funkcija vam omogoča, da ocenite vrednosti slikovnih pik za nedefinirano dimenzijsko rezino v večdimenzionalnem rastru. Na primer, če imate sklop podatkov, ki vsebuje temperaturo oceana na površini in na 100 metrih pod morsko gladino in želite oceniti temperaturo na 50 metrih pod morsko gladino, lahko uporabite to funkcijo, da dobite oceno na tej globini z uporabo definicije dimenzije Po vrednostih.</p><p>Mesečni sklop podatkov lahko tudi zožate na dnevni sklop podatkov z uporabo definicije dimenzije Po intervalu in navedete vrednost parametra koraka kot 1 in vrednost parametra enote kot dnevi.</p><p>Uporabite definicijo dimenzije Po ciljnem rastru, da ocenite vrednost za ciljni raster.</p>",
		multidimensionalFilterSnip: "Ustvari rastrski sloj iz večdimenzionalnega rastrskega sklopa podatkov ali večdimenzionalni rastrski sloj z rezanjem podatkov po določenih spremenljivkah in dimenzijah.",
		multidimensionalFilterDesc: "Večdimenzionalni filter ustvari večdimenzionalni rastrski sloj s filtriranjem in ekstrahiranjem podmnožice spremenljivk iz večdimenzionalnega rastra. Imate, na primer, večdimenzionalni sklop podatkov, ki vsebuje 30 let mesečnih podatkov o padavinah in želite izvleči podatke za vsak januar, da bi videli, kako so se padavine spremenile za ta mesec.<div><br/>Uporabite parameter Definicija dimenzije za rezanje dimenzij z uporabo intervala, vrednosti in obsega vrednosti. Na primer, če imate 10 let podatkov o slanosti oceana, zbranih mesečno in na vsaka 2 metra globine do 500 metrov, lahko uporabite naslednje možnosti določitve dimenzij za naslednje scenarije. Scenarij 1: izvleček podatkov o slanosti za mesec januar v desetletnem obdobju. Izberi po vrednostih, dimenzijo določi na StdTime in nastavi vrednosti na januar. Scenarij 2: podatki o slanosti, rezine v globini od 0 do 150 metrov. Izberite glede na razpon, nastavite dimenzijo na StdZ in minimalno vrednost na -150 in maksimalno vrednost na 0. Scenarij 3: izvleček podatkov o slanosti prvih 10 dni vsakega januarja v desetletnem obdobju. Izberite glede na potovanje, dimenzije nastavite na StdTime, nastavite začetek prvega potovanja in konec prvega potovanja glede na začetek in konec obdobja potovanja, nastavite korak na 1 in enote na leta.</div>",
		multidimensionalRasterName: "Večdimenzionalni raster",
		multidimensionalRasterSnip: "Doda večdimenzionalne podatke za kartiranje kot sloj večdimenzionalega rastra.",
		multidimensionalRasterDesc: "Funkcija večdimenzionalnega rastra doda večdimenzionalne podatke za kartiranje kot sloj večdimenzionalega rastra. Ta funkcija je uporabna pri izvajanju delovnih postopkov rastrske analize z uporabo verižne funkcije.<div><br/>Podprti večdimenzionalni rastrski sklop podatkov vključuje netCDF, GRIB, HDF, in CRF Esrija. Podprti so tudi večdimenzionalni mozaični sklopi podatkov.</div>",
		optimalPathAsRasterName: "Optimalna pot rastra",
		optimalPathAsRasterSnip: "Izračuna pot najmanjšega stroška od vira do cilja.",
		optimalPathAsRasterDesc: "Ta globalna funkcija izdela izhodni raster, ki zabeleži optimalno pot ali poti iz izbranih lokacij do najbližjega izvornih celic, določenih znotraj površine akumuliranih stroškov v smislu stroškovne razdalje.<div><br/>Za zagon funkcije Optimalna pot rastra je treba zagnati eno ali več obteženih stroškovnih funkcij (Akumulacija razdalje ali Razporeditev razdalje), da ustvarite akumulacijo vhodne razdalje in rastrov obratne smeri. To so obvezni vhodni rastrski sloji v funkciji Optimalna pot. Vrednosti na izhodni optimalni poti predstavljajo število poti na določeni lokaciji. V mnogih primerih poti sledijo isti smeri, pri čemer zapustijo vir in se nato odpravijo na različne cilje. Na primer, vrednost ena označuje, da je na določeni lokaciji samo ena optimalna pot, medtem ko vrednost pet pomeni, da je na tej lokaciji pet optimalnih poti, ki gredo skozi to celico v študijskem območju.<div><br/>Vhodni ciljni podatek mora biti rastrski sloj. Nabor ciljnih celic je sestavljen iz vseh celic v vhodnem rastru, ki imajo veljavne vrednosti. Celice, ki vsebujejo vrednosti NoData niso vključene v nabor. Ničelna vrednost velja za zakonito destinacijo. Ciljni raster lahko ustvarite z uporabo orodij za ekstrakcijo. Če imate ciljne ali izvorne geoobjekte, jih lahko pretvorite v raster s funkcijo Rasteriziraj geoobjekte.Pri rastrski funkciji lahko kot vhodni raster uporabite akumulacijo razdalje ali raster obratne smeri. To bo zagotovilo rasteriziranje geoobjekta z enako velikostjo, obsegom in prostorsko referenco celice kot ostali rastri, ki gredo v funkcijo Optimalna pot rastra. Funkcija Optimalna pot rastra se lahko uporablja tudi za izpeljavo poti najmanjšega upora do digitalnega modela višine (DEM). V tem primeru uporabite DEM za raster akumulacije vhodne razdalje in izhod iz funkcije Smer toka za raster obratne smeri.</div>",
		trendName: "Napoved s pomočjo trenda",
		trendSnip: "Izračuna napovedani večdimenzionalni raster s pomočjo izhodnega rastra trenda iz funkcije Ustvari trend ali orodja Ustvari raster trenda.",
		trendDesc: "Funkcija Napoved z uporabo trenda izračuna napovedani večdimenzionalni raster s pomočjo izhodnega rastra trenda iz funkcije Ustvari trend ali orodja Ustvari raster trenda.",
		rasterCollectionName: "Obdelaj rastrsko zbirko",
		rasterCollectionSnip: "Obdela vsako rezino v večdimenzionalnem rastru ali vsak element v mozaičnem rastru. Ta funkcija lahko tudi združi več rezin v eno rezino.",
		rasterCollectionDesc: "Funkcija Obdelava zbiranja rastra obdela vsako rezino v večdimenzionalnem rastru ali vsak element v mozaičnem rastru. Ta funkcija lahko tudi združi več rezin v eno rezino.<div><br/>Ta funkcija obdela vsako rezino v večdimenzionalnem ali mozaičnem rastru s pomočjo predloge rastrske funkcije. Ta funkcija podpira naslednje možnosti: 1 Določite predlogo rastrske funkcije za funkcijo elementa. Na primer, imate mozaični nabor podatkov, ki vsebuje 20 let slikovja Landsat in želite izračunati NDVI za vsak prizor v časovni vrsti. Za funkcijo predmeta določite predlogo rastrske funkcije, ki vsebuje funkcijo NDVI. 2. Določite predlogo rastrske funkcije za funkcijo agregacije. Na primer, imate večdimenzionalni raster, ki vsebuje 10 let dnevnih temperaturnih podatkov in želite izračunati najvišjo temperaturo za vsako leto. V funkciji Agregacija določite predlogo rastrske funkcije, ki vsebuje funkcijo statistike celic, pri čemer je operacija nastavljena na maksimum. V razdelku Definicija agregacije nastavite dimenzije na StdTime, vrsto na Intervalna ključna beseda in interval ključne besede na letno. Če vhodni mozaični sklop podatkov ni večdimenzionalen, funkcija agregacije ne bo upoštevala definicije agregacije. Funkcija agregacije bo agregirala vse elemente ali posamezno skupino v eno enoto, če so definirani v predlogi funkcije agregacije. Za več informacij o uporabi skupin v mozaičnem sklopu podatkov glejte možnost Uporaba elementov mozaičnega podatkovnega niza v predlogah rastrske funkcije: 3. Določite predlogo rastrske funkcije za funkcijo obdelave. Funkcija ali verižna funkcija v tej predlogi je uporabljena za prikaz novo obdelanega rastra. Na primer, določite predlogo rastrske funkcije, ki vsebuje funkcijo Barvna paleta, da spremenite prikaz obdelanega rastrskega sloja.Upoštevajte, da če je vhod večdimenzionalni raster, se funkcija obdelave uporabi za trenutno rezino prikaza. Če je vnos mozaični sloj ali mozaični sklop podatkov, se funkcija obdelave na mozaični raster uporabi s prvo metodo za odpravljanje prekrivanj. 3. Določite predloge za katero koli kombinacijo treh funkcij. Če je vhodni sloj mozaični sloj ali mozaični sklop podatkov, se funkcija obdelave na mozaični raster uporabi s prvo metodo za odpravljanje prekrivanj. Za funkcijo elementa določite predlogo rastrske funkcije, ki vsebuje funkcijo NDVI. V funkciji Agregacija določite predlogo rastrske funkcije, ki vsebuje funkcijo statistike celic, pri čemer je operacija nastavljena na maksimum. Za funkcijo Obdelava določite predlogo rastrske funkcije, ki vsebuje funkcijo Barvna paleta. Upoštevajte, da vrstni red obdelave funkcij sledi vrstnemu redu vhodnih parametrov. Na primer, funkcija elementa bo obdelana prva.</div>",
		randomName: "Naključno",
		randomSnip: "Ustvari raster z naključnimi vrednostmi pikslov, ki se črpajo iz psevdonaključne distribucije. Podprtih je več porazdelitev in generatorjev naključnih števil.",
		randomDesc: "Funkcija Naključno ustvari raster z naključnimi vrednostmi pikslov, ki jih je mogoče uporabiti v predlogih rastrskih funkcij ali mozaičnih sklopih podatkov.<div><br/>Medtem ko številne funkcije delujejo na enem ali več vhodnih rastrih, funkcija Naključno ne potrebuje vhodnega rastra. To pomeni, da se obnaša bolj kot rastrski sklop podatkov kot funkcija, zato morate biti pri dodajanju ali odstranitvi iz funkcijske verige še posebej previdni.</div>",
		shrinkName: "Skrči",
		shrinkSnip: "Izbrane cone skrči za določeno število celic, tako da jih nadomesti z vrednostjo celice, ki je najpogostejša v njeni soseščini.",
		shrinkDesc: "Z globalno funkcijo Skrči lahko posplošite ali poenostavite izračune tako, da zmanjšate določene cone. Prav tako lahko nadzorujete količino posploševanja, ki se bo zgodila.<div><br/>Cone, ki jih izberete, se bodo skrčile ali zmanjšale, tako da se bodo celice iz okoliških con razširile vanje. Konceptualno lahko na izbrane vrednosti cone gledamo kot na osrednje območje, ostale vrednosti pa ostanejo kot ozadja. Celice v ospredju lahko zamenjajo celice v conah ozadja. Tanke otoke znotraj cone, ki jih je mogoče razumeti kot skupne meje z cono, lahko tudi nadomestite.<div><br/>Količino posploševanja lahko nadzirate s parametrom Število celic. Privzeto je ta vrednost 1, kar pomeni, da se bodo izbrane cone skrčile za znesek, ki ustreza velikosti ene celice. Če želite povečati stopnjo posplošitve, lahko za ta parameter določite večjo vrednost. Konceptualno je to kot, da orodje zaženete tolikokrat, kot je določeno število, rezultati prejšnjega izvajanja pa so vnos za naslednje potovanje.</div>",
		trendToRGBName: "Trend v RGB",
		trendToRGBSnip: "Pretvori raster trenda v tripasovni (rdeča, zelena in modra) raster.",
		trendToRGBDesc: "Funkcija Trend v RGB pretvori raster trenda v tripasovni (rdeča, zelena in modra) raster. Raster trenda se ustvari v rastrski funkciji Ustvari trend ali rastrski funkciji Analiza CCDC.<div><br/>Ta funkcija je uporabna za vizualizacijo podatkov o koeficientih modela iz funkcije Ustvari Trend ali Analiza CCDC. Obe funkciji ocenjujeta trende pri spreminjanju vrednosti pikslov, vendar je rezultate funkcij težko razlagati neposredno.<div><br/>Kot številne rastrske funkcije, boste morda morali uporabiti dinamično prilagoditev razpona (Dynamic Range Adjustment (DRA)), da boste bolje prikazali rezultate te funkcije.</div>",
		landTrendrName: "Analiza LandTrendr",
		landTrendrSnip: "Oceni spremembe v vrednostih piksla čez čas s pomočjo metode zaznavanja trendov v motnjah in obnovitvi (LandTrendr), ki temelji na posnetkih Landsat, ter ustvari raster analize spremembe, ki vsebuje rezultate modela.",
		landTrendrDesc: "To rastrsko funkcijo je mogoče uporabiti samo kot vhodni podatek v rastrsko funkcijo zaznavanja sprememb z analizo sprememb. Če želite ustvariti raster, povežite funkcijo analize LandTrendr s funkcijo zaznavanja sprememb z analizo sprememb v predlogi rastrske funkcije ter uporabite predlogo kot vnos v orodje za geoprocesiranje ustvarjanja rastra iz rastrske funkcije. Rezultat je raster, ki vsebuje informacije glede časa ob katerem so bile vrednosti piksla spremenjene.<div><br>Namen te rastrske funkcije je ekstrahirati spremembe v opazovanem geoobjektu, da bi idealno vhodno večdimenzionalno slikovje moglo zajeti dosledno opažanju skozi čas, brez da bi vključilo atmosferske in senzorske interference, oblake ali senčenje oblakov. Dobra praksa je uporaba podatkov, ki so bili normalizirani in jih je mogoče zakriti s pomočjo pasu QA, na primer produktov iz Zbirke 1 odbojnosti površja Landsat z masko oblaka.<div><br>Funkcija izvede analizo na eni sliki letno in število letnih izsekov mora biti enako ali večje od vrednosti, navedene v parametru <strong>Minimalno število opazovanj</strong>. Priporočljivo je, da imate podatke za vsaj šest let.<div><br>Če imate mesečne, tedenske ali dnevne podatke, priporočamo, da izberete več slik iz vsakega leta (po možnosti iz istega letnega časa), odstranite oblake in senčenje oblakov ter združite slike, da ustvarite eno sliko, ki dobro zajame opažanje. Če navedete mesečne, tedenske ali dnevne podatke kot vhodni večdimenzionalni raster, bo funkcija prepoznala en izsek za analizo na podlagi datuma, ki je najbližje navedenemu v parametru <strong>Datum snemanja</strong>.<div><br>Pogosto bo obnovitev objekta v pokrajini trajala nekaj časa po nestalni spremembi, kot je požar v gozdu ali napad insektov. Da bi nadzorovali stopnjo obnovitve, ki jo model prepozna, nastavite parameter Prag obnovitve. Poseben segment ne more imeti stopnje obnovitve, ki je hitrejša od 1/prag obnovitve.<div><br>Obnovitev po spremembi v pokrajini se lahko odvije v pozitivni ali negativni smeri. Na primer, kadar pokrajina utrpi izgubo gozda, prikazuje časovni niz vrednosti vegetacijskega indeksa padec v indeksnih vrednostih in obnovitev prikazuje postopno povečanje vrednosti vegetacijskega indeksa, ali pozitivni trend obnovitve. Določite smer trenda obnovitve s parametrom <strong>Obnovitev ima naraščajoči trend</strong>.",
		aggregateMultidimensionalName: "Agregacija večdimenzionalnega",
		aggregateMultidimensionalSnip: "Združi obstoječe podatke večdimenzionalnih rastrskih spremenljivk vzdolž dimenzije.",
		aggregateMultidimensionalDesc: "Funkcija agregacije večdimenzionalnega ustvari večdimenzionalni rastrski sloj z združevanjem obstoječih podatkov večdimenzionalne rastrske spremenljivke vzdolž dimenzije.<div><br>Uporabite parameter <strong>Opredelitev dimenzije</strong> , da najprej filtrirate vhodne podatke, ki jih želite agregirati. Če imate, na primer, 30 let mesečnih podatkov, a želite ustvariti agregiran sloj samo za prvih 15 let, lahko uporabite parameter <strong>Opredelitev dimenzije</strong> , da določite leta, ki jih želite vključiti v analizo.<div><br><ul><li>Ekstrahirajte podatke o slanosti za mesec januar v 10-letnem obdobju. Izberite <strong>Po vrednostih</strong>, nastavite <strong>Dimenzijo</strong> na <strong>StandardniČas</strong> ter nastavite <strong>Vrednosti</strong> na <strong>Januar</strong>.</li><li>Razdelite podatke o slanosti po razponu globine od 0 do 150 metrov. Izberite <strong>Po razponih</strong>, nastavite <strong>Dimenzijo</strong> na<strong>StdZ</strong> ter nastavite <strong>Minimalno vrednost</strong> na <strong>-150</strong> in <strong>Maksimalno vrednost</strong> na <strong>0</strong>.</li><li>Ekstrahirajte podatke o slanosti za prvih 10 dni vsakega januarja za obdobje 10 let. Izberite <strong>Po ponovitvi</strong>, nastavite <strong>Dimenzijo</strong> na <strong>StandardniČas</strong>, nastavite <strong>Začetek prve ponovitve</strong> in <strong>Konec prve ponovitve</strong> na ustrezen začetek in konec obdobja ponovitve, nastavite <strong>Korak</strong> na<strong>1</strong> in  <strong>Enoto</strong> na <strong>Leta</strong>.</li></ul><div><br>Uporabite parametre <strong>Opredelitev agregacije</strong> , da izberete dimenzijo za oceno in interval agregacije s pomočjo ključne besede, vrednosti ali razpona vrednosti. Če imate, na primer 30 let podatkov o temperaturi morske gladine, zbranih dnevno in na vsakih 5 metrov globine do 100 metrov, lahko uporabite različne možnosti intervala za naslednje scenarije:<div><br><ul><li>Združite podatke dnevnih temperatur v mesečne podatke, kjer je rezultat večdimenzionalni raster z 12 izseki in je vsak izsek agregat posameznega meseca po vseh letih. Izberite <strong>Ključno besedo intervala</strong> in nastavite ključno besedo na <strong>Mesečno ponavljanje</strong>.</li><li>Združite podatke dnevnih temperatur v mesečne podatke, pri čem je rezultat večdimenzionalni raster s 360 izseki ali 12 časovnimi izseki na leto (30 let x 12 mesecev = 360 izsekov). Izberite <strong>Ključno besedo intervala</strong> in nastavite ključno besedno na <strong>Mesečno</strong>.</li><li>Združite mesečne podatke o temperaturi v 4-mesečne intervale. Izberite <strong>Vrednost intervala</strong>, nastavite <strong>Interval vrednosti</strong>  na 4 ter <strong>Enoto</strong> na <strong>Mesecev</strong>.</li><li>Agregirajte podatke o temperaturi od 0 do 25 metrov, nato od 25 do 50 metrov ter od 50 do 100 metrov. Izberite <strong>Razpone intervala</strong> in določite minimalne in maksimalne globine kot <strong>0 25; 25 50; 50 100</strong>.</li></ul>",
		mergeRastersName: "Spoji rastre",
		mergeRastersSnip: "Združi več rastrskih sklopov podatkov prostorsko ali po spremenljivkah in dimenzijah.",
		mergeRastersDesc: "Ta funkcija ustvari spojen raster iz seznama rastrov. Če imate, na primer, mozaični sklop podatkov, ki vsebuje 30 let mesečnih podatkov o padavinah in drug sklop podatkov z 10 leti mesečnih podatkov o temperaturi, jih lahko združite v večdimenzionalni raster z obema spremenljivkama. <br><div>Če vhodni večdimenzionalni raster vsebuje različne spremenljivke, bo izhodni večdimenzionalni raster vseboval vse spremenljivke. <br><div>Če vhodni večdimenzionalni raster vsebuje različne dimenzije in vrednosti dimenzije, bo izhodni večdimenzionalni raster vključeval vse dimenzije in vse vrednosti dimenzije. <br><div>Če vhodni večdimenzionalni raster vsebuje iste dimenzije in spremenljivke, ampak različne prostorske obsege, bo izhodni večdimenzionalni raster vključeval spremenljivke in dimenzije po spojenih prostorskih obsegih.<div><br>To funkcijo je mogoče uporabiti, kadar imate več rastrov, ki jih želite obravnavati kot enojni element, kot je izračunavanje iste statistike za vse ali pri uravnavanju barv, da vam ni treba uravnavati barve vsake slike posebej. To je koristno pri delu s slikovjem, shranjenim kot ločene ploščice zaradi omejitve velikosti datoteke; na ta način bodo ploščice obravavane, kot del iste slike.",
		boundaryCleanName: "Čista meja",
		boundaryCleanSnip: "Zgladi mejo med območji.",
		boundaryCleanDesc: "<p>Funkcija posploši ali poenostavi rastre prek glajenja mej med območji. Ta funkcija zagotavlja možnosti za nadzor načina, kako celica območij v vhodu vpliva na glajenje in količino glajenja, ki bo uporabljeno. Vsaka vhodna celica je ocenjena z uporabo osem neposrednih sosed.</p><p>Postopek glajenja najprej razvrsti sosednje celice glede na določeno prednost. Prednost določa, katero območje od sosednjih celic lahko nadomesti vrednost obdelovalne celice v izhodu.</p><p>Prednost lahko temelji na vrednosti območij ali velikosti območij. Parameter <strong>Tip razvrščanja</strong> določa tip razvrščanja za uporabo. </p><p>Privzeta nastavitev <strong>Brez razvrščanja</strong> oceni prednost na osnovi vrednost območij. Celice iz večjih območij z večjimi vrednostmi bodo imele višjo prednost za razširitev v območja z manjšimi vrednostmi.</p><p>Velikost ali skupno območje con je mogoče uporabiti za razvrstitev prednosti. Z nastavitvijo <strong>Padajoče</strong> so cone razvršene po velikosti v padajočem vrstem redu. Območja z večjimi skupnimi območji bodo imela prednost za razširitev v cone z manjšimi območji. Z nastavitvijo <strong>Naraščajoče</strong> je ravno nasprotno: območja z manjšimi skupnimi območji bodo imela prednost za razširitev v območja z večjimi skupnimi območji.</p><p>Količina glajenja je nadzorovana prek parametra <strong>Zaženi razširitev in dvakrat skrči</strong>, ki določa število izvedenih razširjanj in krčenj.</p><p>Če nastavitev ni izbrana, se razširjanje in krčenje izvede enkrat. Če je nastavitev izbrana, se razširitev in krčenje izvede dvakrat, kar povzroči dodatno stopnjo glajenja mej območja.</p><p>Če so vrednosti vseh osmih sosednjih celic enake kot pri obdelovalni celici, potem bo izhodna celica ohranila vrednost vhodne celice.</p>",
		predictUsingRegressionName: "Napoved s pomočjo regresije",
		predictUsingRegressionSnip: "Izračuna predviden raster na podlagi rastrskih podatkovnih vnosov in regresijskega modela. Regresijski model je izhod rastrskega geoprocesnega orodja <strong>Regresijski model Učenje naključnih dreves</strong>.",
		predictUsingRegressionDesc: "<p>Regresijski model je opredeljen v datoteki regresijske definicije Esri (.ecd). Vsebuje vse informacije za specifični podatkovni sklop ali za sklop podatkovnih sklopov in regresijski model, in je ustvarjen z rastrskim geoprocesnim orodjem <strong>Regresijski model Učenje naključnih dreves</strong>.</p><p>Vhod je lahko enopasovni, večpasovni, ali večdimenzionalni raster ali seznam teh tipov. Tipi vhodnih rasterjev moraji biti enaki tipu rasterja, ki je bil naučen z regresijskim modelom.</p><ul><li>Če je vhod večpasovni raster se vsak pas obravnava kot napovedovalna spremenljivka. Pasovi morajo biti v enakem vrstnem redu kot večpasovni vhod za orodje za učenje regresijskega modela.</li><li>Če je vhod večdimenzionalni raster se vsaka spremenljivka obravnava kot napovedovalna spremenljivka, in spremenljivka mora biti enopasovna in imeti časovno dimenzijo. Vrstni red in imena spremenljivk morajo biti enaki kot za vhod v času, ko je bil naučen regresijski model. Izhod je večdimenzionalni raster.</li><li>Vhod je lahko seznam elementov. Število elementov in vrstni red elementov se mora ujemati z vhodom v času, ko je bil naučen regresijski model.</li></ul>",
		dimensionalMovingStatisticsName: "Dimenzijska premikajoča statistika",
		dimensionalMovingStatisticsSnip: "Izračunana statistika nad premikajočim se oknom na večdimenzionalnih podatkih vzdolž določenih dimenzij.",
		dimensionalMovingStatisticsDesc: "<p>Funkcija dimenzijskega premikanja statistike izračuna različne statistike znotraj vnaprej določenega okna za vse vrednosti dimenzij vzdolž dimenzije. Ta funkcija vzame večdimenzionalni rastrski sloj kot vhod in ustvari večdimenzionalni rastrski sloj kot izhod, ki ima enako dimenzijsko velikost kot vhodni sloj.</p><p>Določite lahko dimenzijo, za katero se vrednosti dimenzije upoštevajo med izračunom. Privzeto izračuna po prvi neprostorski dimenziji. Določite lahko tudi velikost okna z določitvijo parametrov Okno nazaj in naprej.</p><p>Ko je vrsta statistike nastavljena na Percentil, postaneta na voljo parametra Percentilna vrednost in Percentilna vrsta interpolacije. S temi parametri lahko določite percentil za izračun in izberete vrsto interpolacije, ki jo želite uporabiti. Ko je vrsta statistike nastavljena na Krožno srednjo vrednost, postane na voljo parameter Vrednost krožnega preloma. Vrednost krožnega preloma se uporablja za pretvorbo linearne vrednosti v območje dane krožne srednje vrednosti.</p>",
		terrainFlattenFunctionName: "Sploščen teren",
		terrainFlattenFunctionSnip: "Popravi vhodne radarske podatke s sintetično odprtino (SAR) za radiometrična popačenja zaradi topografije.",
		terrainFlattenFunctionDesc: "<p>Rastrska funkcija Terrain Flatten popravi vhodne radarske podatke s sintetično odprtino (SAR) za radiometrična popačenja zaradi topografije.</p><p>Vhodne radarske podatke je treba najprej kalibrirati na beta nič. Uporabite orodje Apply Radiometric Calibration za umerjanje radarskih podatkov na beta nič.</p><p> Če vhodni DEM ne obsega celotnega sklopa podatkov SAR, bo orodje izpisalo vrednosti NoData za slikovne pike zunaj obsega DEM za izhode gama nič, sigma nič, območje sipanja in geometrično popačenje. Za izhod maske geometričnega popačenja bo orodje izpisalo nedoločene vrednosti za slikovne pike zunaj obsega DEM.</p><p> Vhodni DEM mora biti v geografskem koordinatnem sistemu WGS 1984 (EPSG:4326).</p>",
		createColorCompositeFunctionName: "Ustvari barvni kompozit",
		createColorCompositeFunctionSnip: "Ustvari tripasovni raster iz večpasovnega sklopa rastrskih podatkov, v katerem lahko vsak pas uporablja algebraični izračun na podlagi pasovne algebre.",
		createColorCompositeFunctionDesc: "<p>Rastrska funkcija Ustvari barvni kompozit ustvari tripasovni raster iz večpasovnega nabora rastrskih podatkov, v katerem lahko vsak pas uporablja algebrični izračun, ki temelji na algebri pasov.</p><p> Ko definirate pasovni aritmetični algoritem, lahko vnesete enovrstično algebraično formulo za vsak izraz, da ustvarite večpasovni rezultat. Podprti operatorji so unarni, plus (+), minus (-), krat (*) in deljenje (/).</p><p>Ko uporabljate ID pasu v izrazu, identificirajte pas tako, da številki pasu dodate predpono B ali b.</p><p>Pogosta kombinacija pasov, ki se uporablja za radar s sintetično odprtino (SAR) v linearnih enotah, je VV za rdečo, VH za zeleno in VV/VH za modro. Če so vhodni podatki v decibelih, mora biti kombinacija pasov VV za rdečo, VH za zeleno in VV-VH za modro.</p>",
		surfaceParametersName: "Parametri površine",
		surfaceParametersSnip: "Določa parametre rastrske površine, kot so vidik, naklon in več vrst ukrivljenosti z uporabo geodetskih metod.",
		surfaceParametersDesc: "<p>Funkcija Parametri površine določa parametre rastra površine, kot so vidik, naklon in več vrst ukrivljenosti z uporabo geodetskih metod.</p><p>To funkcijo je mogoče uporabiti za naslednje aplikacije:</p><ul><li>Izračunajte vidik in naklon z geodetskimi metodami.</li><li>Izračunajte različne vrste ukrivljenosti iz rastra vhodne površine, na primer <strong>Tangencialna (normalna kontura) ukrivljenost</strong>, ki označuje topografsko konvergenco in divergenco toka po površini.</li></ul>",
		leastCostCorridorName: "Koridor najmanjšega stroška",
		leastCostCorridorSnip: "Izračuna vsoto dveh kumulativnih rastrov stroškov razdalje z možnostjo uporabe praga na podlagi odstotka ali kumulativnega stroška.",
		leastCostCorridorDesc: "<p>Vhodni rastri morajo biti rezultati rastrov akumulacije razdalje in obratne smeri iz funkcije <strong>Akumulacija razdalje</strong> ali <strong>Dodelitev razdalje</strong>. Ti morajo temeljiti na razdalji stroškov, enake nastavitve parametrov pa je treba uporabiti pri ustvarjanju sloja za vsak vir. Pri ustvarjanju teh rastrov se ne sme uporabiti parametrov, ki so odvisni od usmerjenosti (horizontalni faktor, vertikalni faktor in smer potovanja).</p><p>Vrednosti v izhodnem rastru koridorja so vsota kumulativnih stroškov za doseganje dane lokacije z enakimi enotami, kot pri vhodnih rastrih akumulativne razdalje stroškov.</p><p>Če je navedena vrednost <strong>Prag</strong> večja od maksimalnega kumulativnega stroška ob povzemanju dveh rastrov akumulacije razdalje, bo izhodni raster koridorja pokrival enako isto območje, kot vhodni akumulativni rastri.</p><p>Če je navedena vrednost manjša od minimalne vrednosti v rastru koridorja, bo prikazano opozorilno sporočilo in izhodni raster bo prazen.</p><p>Izhodni raster koridorja lahko vsebuje celice z nekoliko večjimi kumulativnimi stroški od vrednosti praga. To izhaja iz rastrov obratne smeri, ki uporabljajo celice, katerim so dodeljeni rahlo višji stroški od praga, da bi se nepovezane celice povezale s koridorjem.</p>",
		geometricMedianName: "Geometrična mediana",
		geometricMedianSnip: "Funkcija Geometrična mediana izračuna geometrično mediano po pikslih v časovnih nizih večpasovnega slikovja.",
		geometricMedianDesc: "<p>Ta funkcija zmanjša šum in osamelce v slikovju časovnih nizov z izračunom piksla geometrične mediane za vsako polje piksla po skladu slik. Algoritem ohranja spektralne relacije med pasovi v spektrih pikslov, zato je rezultat mogoče uporabiti v analizi, kot so indici vegetacije.</p><p>Oblake in sence je potrebno maskirati s pomočjo pasu QA podatkovnega sklopa, preden se ta funkcija uporabi.</p><p>Če je vhodna slika plavajoča vejica, kot je odbojnost površine z vrednostmi med 0 in 1, bi morala epsilon vrednost 0,001 dati kakvostne rezultate.</p>"
	},
	rfxArgs: {
		rasterName: "Raster",
		colorSchemeTypeName: "Tip barvne sheme",
		colormapName: "Barvna paleta",
		colormapNameName: "Ime barvne palete",
		colorRampName: "Barvna lestvica",
		contrastOffsetName: "Odmik kontrasta",
		brightnessOffsetName: "Odmik svetlosti",
		methodName: "Metoda",
		bandNamesName: "Imena pasov",
		bandWavelengthsName: "Valovne dolžine pasov",
		bandIdsName: "ID-ji pasov",
		missingBandActionName: "Dejanje manjkajočega pasu",
		conversionParametersName: "Parametri pretvorbe",
		hillshadeTypeName: "Tip senčenega reliefa",
		azimuthName: "Azimut",
		altitudeName: "Višina nad tlemi",
		slopeTypeName: "Spreminjanje merila",
		zFactorName: "Z-faktor",
		PSPowerName: "Moč velikosti pikslov",
		PSZFactorName: "Faktor velikosti pikslov",
		removeEdgeEffectName: "Onemogoči privzeto interpolacijo piksla roba",
		fromUnitName: "Od enote",
		toUnitName: "Do enote",
		rasterTypeName: "Vrsta",
		minName: "Minimum rezultata",
		maxName: "Maksimum rezultata",
		minPercentName: "Minimum odstotka izseka",
		maxPercentName: "Maksimum odstotka izseka",
		numberOfStandardDeviationName: "Število standardnih odklonov",
		sigmoidStrengthLevelName: "Stopnja sigmoidne moči",
		estimateStatsHistogramName: "Ocena statistike",
		DRAName: "Izravnava dinamičnega razpona",
		statisticsName: "Statistika",
		histogramsName: "Histogrami",
		statisticsHistogramName: "Določi statistiko in histogram",
		computeGammaName: "Samodejni gama",
		useGammaName: "Uporabi gama",
		gammaName: "Gama",
		inputNamesName: "Imena",
		expressionName: "Izraz",
		cellsizeTypeName: "Tip velikosti celice",
		extentTypeName: "Tip obsega",
		classifierDefinitionFileName: "Vhodna definicijska datoteka",
		raster1Name: "Raster1",
		raster2Name: "Raster2",
		raster3Name: "Raster3",
		trueRasterName: "Pravi raster",
		falseRasterName: "Lažni raster",
		noDataInterpretationName: "Interpretacija vrednosti brez podatkov",
		noDataValuesName: "Vrednosti brez podatkov",
		includedRangesName: "Vsebovani razponi",
		curvatureTypeName: "Tip ukrivljenosti",
		rastersName: "Rastri",
		attributeTableName: "Tabela",
		attributeTableTypeName: "Tip tabele",
		rowsName: "Število vrstic",
		columnsName: "Število stolpcev",
		kernelName: "Jedro",
		mirrorEdgesName: "Zrcalni robovi",
		influencesName: "Vplivi",
		fieldsName: "Polja",
		remapsName: "Tabela preslikav",
		evalFromName: "Ocenjevalna lestvica od",
		evalToName: "Ocenjevalna lestvica do",
		weightsName: "Uteži",
		DEMName: "DMV",
		shortRangeIDWRadiusName: "Polmer IDW kratkega razpona",
		maxVoidWidthName: "Maks. širina praznine",
		sigmaGaussianName: "Prilagodljivo glajenje",
		contourTypeName: "Tip plastnice",
		zBaseName: "Z-izhodiščna",
		numberOfContoursName: "Število plastnic",
		contourIntervalName: "Razmik med plastnicami",
		nthContourLineInBoldName: "N-ta poudarjena plastnica",
		featureClassName: "Vhodni geoobjekti",
		classIndexFieldName: "Polje",
		resolveOverlapMethodName: "Razreši metodo prekrivanja",
		resamplingTypeName: "Tip prevzorčenja",
		inputCellsizeName: "Vhodna velikost celic",
		outputCellsizeName: "Izhodna velikost celic",
		pointFeatureClassName: "Izhodiščne točke",
		maxGrowthRadiusFieldName: "Polje polmera največje rasti",
		similarityThresholdFieldName: "Polje praga podobnosti",
		fillValueFieldName: "Polje vrednosti polnila",
		spectralDetailName: "Spektralne podrobnosti [1..20]",
		spatialDetailName: "Prostorske podrobnosti [1..20]",
		minNumPixelsPerSegmentName: "Minimalna velikost segmenta v pikslih",
		boundariesOnlyName: "Samo meje segmentov",
		statisticsTypeName: "Tip statistike",
		fillNoDataOnlyName: "Zapolni samo piksle brez podatkov",
		inputDataTypeName: "Tip vhodnih podatkov",
		angleReferenceSystemName: "Kotne merske enote",
		outputDataTypeName: "Tip izhodnih podatkov",
		inputSamplePointFeatureClassName: "Vhodni vzorci",
		valueFieldName: "Polje vrednosti",
		rasterInfoName: "Informacije o rastru",
		interpolationMethodName: "Metoda interpolacije",
		radiusName: "Polmer",
		radianceGainValuesName: "Pribitek radiance",
		radianceBiasValuesName: "Odmik radiance",
		reflectedGainValuesName: "Pribitek odbojnosti",
		reflectedBiasValuesName: "Odmik odbojnosti",
		sunElevationName: "Višina sonca nad obzorjem (stopinje)",
		albedoName: "Albedo",
		scaleFactorName: "Faktor merila",
		offsetName: "Odmik",
		thresholdTypeName: "Tip praga",
		thresholdsName: "Pragovi",
		undefinedClassName: "Nedoločen razred",
		minValueName: "Min",
		maxValueName: "Maks",
		operationName: "Postopek",
		clippingTypeName: "Tip izsekanja",
		clippingGeometryName: "Izsečna geometrija/raster",
		extentName: "Izhodni obseg",
		useInputFeatureGeometryName: "Uporabi vhodne geoobjekte za izsečno geometrijo",
		remapDefinitionTypeName: "Tip definicije preslikav",
		inputRangeName: "Vhodni razponi",
		outputValuesName: "Izhodne vrednosti",
		noDataRangeName: "Razponi brez podatkov",
		inputFieldName: "Vhodno polje",
		outputFieldName: "Izhodno polje",
		inputMaxFieldName: "Vhodno maksimalno polje (izbirno)",
		remapTableTypeName: "Tip tabele preslikav",
		allowUnmatchedName: "Dovoli neujemajoče vrednosti pikslov",
		changeMissingValuesToNoDataName: "Spremeni manjkajoče vrednosti v vrednosti brez podatkov",
		visibleBandIDName: "ID vidnega pasu",
		infraredBandIDName: "ID infrardečega pasu",
		scientificOutputName: "Znanstveni izhod",
		bandIndexesName: "Indeksi pasu",
		constantName: "Konstanta",
		weightName: "Utež",
		minimumName: "Minimum",
		maximumName: "Maksimum",
		sourceDataName: "Izvorni raster",
		sourceFieldName: "Izvorno polje",
		costRasterName: "Raster stroškov",
		maxDistanceName: "Maksimalna razdalja",
		valueRasterName: "Raster vrednosti",
		costMultiplierName: "Množitelj za uporabo pri stroških",
		startCostName: "Začetni stroški",
		accumCostResistanceRateName: "Kumulativa razmerja stroškov odpornosti",
		capacityName: "Kapaciteta",
		travelDirectionName: "Smer potovanja",
		cellSizeName: "Velikost celice",
		populationFieldName: "Polje Prebivalstvo",
		areaUnitsName: "Enote površin",
		outputValueTypeName: "Izhodne vrednosti celice",
		barriersName: "Vhodne ovire",
		destinationDataName: "Raster cilja",
		destinationFieldName: "Polje cilja",
		pathTypeName: "Tip poti",
		observerFeaturesName: "Geoobjekti opazovalcev",
		analysisMethodName: "Metoda analize",
		analysisTypeName: "Tip analize",
		verticalErrorName: "Vertikalna napaka",
		refractivityCoefficientName: "Koeficient refrakcije",
		surfaceOffsetName: "Površinski odmik",
		observerElevationName: "Višina opazovalca",
		observerOffsetName: "Odmik opazovalca",
		innerRadiusName: "Notranji polmer",
		innerRadiusIs3DDistanceName: "Notranji polmer je 3D razdalja",
		outerRadiusName: "Zunanji polmer",
		outerRadiusIs3DDistanceName: "Zunanji polmer je 3D razdalja",
		horizontalStartAngleName: "Horizontalni začetni kot",
		horizontalEndAngleName: "Horizontalni končni kot",
		verticalUpperAngleName: "Vertikalni zgornji kot",
		verticalLowerAngleName: "Vertikalni spodnji kot",
		zoneDataName: "Raster območja",
		zoneFieldName: "Polje območja",
		ignoreNoDataName: "Prezri vrednosti brez podatkov v izračunih",
		temperatureRasterName: "Raster temperature",
		inTemperatureUnitsName: "Temperaturne enote",
		outHeatIndexTemperatureUnitsName: "Enote toplotnega indeksa",
		relativeHumidityRasterName: "Raster relativne vlažnosti",
		outWindChillTemperatureUnitsName: "Enote Wind Chill efekta",
		windSpeedRasterName: "Raster hitrosti vetra",
		inWindSpeedUnitsName: "Enote hitrosti vetra",
		valueName: "Vrednost",
		propertyName: "Ime lastnosti",
		jsonName: "Metapodatki JSON",
		zoneTableName: "Tabela območnih atributov",
		attributeFieldNames: "Imena polj atributov",
		backgroundName: "Vrednost ozadja",
		whereClauseName: "KJER stavek",
		minimumValueFieldName: "Ime polja minimalne vrednosti",
		maximumValueFieldName: "Ime polja maksimalne vrednosti",
		outValueFieldName: "Ime polja izhodne vrednosti",
		defaultValueName: "Privzeta izhodna vrednost",
		conversionMatrixName: "Matrika za pretvorbo",
		IsPseudoColorOutputName: "Gre za psevdoizhodno barvo",
		unmappedAsRandomColorName: "Naključno dodeli barvo pikslom, ki niso na karti",
		distanceMethodName: "Metoda razdalje",
		flowDirRasterName: "Raster smeri toka",
		pourPointName: "Raster izlivne točke",
		pourPointFieldName: "Polje izlivne točke",
		constantZName: "Konstanta Z",
		zOffsetName: "Odmik Z",
		geoIdName: "Geoid",
		calibrationTypeName: "Tip kalibracije",
		filterTypeName: "Tip filtra",
		filterSizeName: "Velikost filtra",
		noiseModelName: "Model šuma",
		noiseVarianceName: "Varianca šuma",
		additiveNoiseMeanName: "Dodatna srednja vrednost šuma",
		multiplicativeNoiseMeanName: "Multiplikativna srednja vrednost šuma",
		numberofLooksName: "Število pogledov",
		dampingFactorName: "Faktor dušenja",
		maskRasterName: "Maska rastra",
		nibbleValuesName: "Uporabi vrednosti brez podatkov, če so najbližji sosed",
		nibbleNoDataName: "Zmanjšaj celice brez podatkov",
		zLimitName: "Omejitev Z",
		flowDirectionTypeName: "Tip smeri toka",
		weightRasterName: "Raster uteži",
		forceEdgeName: "Vse robne celice naj tečejo navzven",
		streamRasterName: "Raster vodotoka",
		surfaceRasterName: "Raster površine",
		conversionType: "Tip pretvorbe",
		distanceRaster1: "Raster razdalje 1",
		distanceRaster2: "Raster razdalje 2",
		costDistanceRaster: "Raster stroškov razdalje",
		costBacklinkRaster: "Raster povratnih stroškov",
		overridesName: "Preglasi",
		fieldName: "Polje",
		signatureFileOrUrl: "Podpisna datoteka ali URL",
		redName: "Rdeča",
		greenName: "Zelena",
		blueName: "Modra",
		infraredName: "Infrardeče",
		panchromaticName: "Pankromatsko",
		multispectralName: "Multispektralno",
		pansharpeningType: "Tip izostritve posnetka",
		sensorName: "Senzor",
		spatialReferenceName: "Koordinatni sistem",
		xCellsizeName: "Velikost celice X",
		yCellsizeName: "Velikost celice Y",
		xOriginName: "Točka izhodišča X",
		yOriginName: "Točka izhodišča Y",
		percentileName: "Vrednost percentila",
		neighborhoodType: "Sosednji tip",
		widthName: "Širina",
		heightName: "Višina",
		startAngleName: "Začetni kot",
		endAngleName: "Končni kot",
		neighborhoodValues: "Sosednje vrednosti",
		horizontalRaster: "Horizontalni raster",
		horizontalFactor: "Horizontalni faktor",
		verticalRaster: "Vertikalni raster",
		verticalFactor: "Vertikalni faktor",
		streamRaster: "Raster vodotoka",
		flowDirRaster: "Raster smeri toka",
		numberNeighborCells: "Število sosednjih celic",
		zoneConnectivity: "Povezljivost območja",
		addLinkBehavior: "Dodaj povezavo",
		excludedValue: "Izključena vrednost",
		constantFillCheck: "Izvedi Zapolni raster iz konstante",
		fillRaster: "Zapolni raster",
		constantFillValue: "Konstantna vrednost",
		inputBitPositions: "Vhodni bit",
		outputBitPositions: "Izhodni bit",
		distanceTypeName: "Vrsta razdalje",
		barrierDataName: "Rastrske ovire",
		pourPointDataName: "Raster izlivne točke",
		accumulationRasterName: "Raster kopičenja pretoka",
		snapDistanceName: "Razdalja poravnave",
		orderMethodName: "Metoda naročila",
		directionMeasurementName: "Smer meritve",
		processAsMultiband: "Obdelaj kot večpasovno",
		processMultidimensional: "Obdelaj kot večdimenzionalno",
		forceFlowDirectionConvention: "Vsili smer toka za raster povratne povezave",
		initialAccumulation: "Začetna akumulacija",
		maximumAccumulation: "Maksimalna akumulacija",
		sourceLocationBands: "Ustvari izvorno vrstico in stolpec kot dodatna pasova v izhodu",
		backDirectionBand: "Ustvari obratno smer kot dodatni pas v izhodnem podatku",
		numberOfCells: "Število celic",
		zoneValues: "Vrednosti območja",
		shrinkMethod: "Metoda krčenja",
		expandMethod: "Metoda razširitve",
		inputSpectralProfileType: "Vrsta spektralnega profila",
		spectralProfileFileName: "Spektralni profil",
		trainingFeatureFileName: "Učni geoobjekt",
		nonNegative: "Pozitivno",
		sumToOne: "Seštevek na ena",
		randomDistribution: "Distribucija",
		meanName: "Srednja vrednost",
		probabilityName: "Verjetnost",
		alphaName: "Alfa",
		betaName: "Beta",
		rName: "r",
		nName: "S",
		seed: "Seme",
		randomNumberGenerator: "Generator naključnih števil",
		cellFactor: "Faktor celice",
		aggregationType: "Tehnika agregacije",
		extentHandling: "Razširi obseg, če potrebno",
		trendAnalysisDimensionName: "Ime dimenzije",
		trendAnalysisType: "Vrsta trenda",
		harmonicFrequency: "Harmonska pogostost",
		polynomialOrder: "Polinomni vrstni red",
		cycleLengthName: "Dolžina cikla",
		trendAnalysisRMSE: "RMSE",
		trendAnalysisR2: "R-kvadrat",
		trendAnalysisSlopePValue: "P-vrednost koeficienta naklona",
		trendAnalysisSeasonalPeriod: "Sezonsko obdobje",
		cycleUnitName: "Enota cikla",
		predictDimensionValues: "Vrednosti",
		dimensionDefinitionType: "Opredelitev dimenzije",
		predictDimensionStart: "Začni",
		predictDimensionEnd: "Konec",
		predictDimensionInterval: "Interval vrednosti",
		dimensionUnit: "Enota",
		interpolationCellsizeName: "Velikost celice interpolacije",
		variableName: "Spremenljivke",
		dimensionlessName: "Brez dimenzij",
		mdimDefinition: "Opredelitev dimenzije",
		dimensionName: "Dimenzija",
		iterationStart: "Začetek prvega potovanja",
		iterationEnd: "Konec prvega potovanja",
		intervalStart: "Začetek intervala",
		intervalEnd: "Konec intervala",
		stepName: "Korak",
		rangesName: "Razponi",
		minValue: "Minimalna vrednost",
		maxValue: "Maksimalna vrednost",
		changeAnalysisRasterName: "Spremeni raster analize",
		changeTypeName: "Vrsta spremembe",
		segmentDate: "Datum segmenta",
		changeDirectionName: "Spremeni smer",
		maxNumChangesName: "Maksimalno število sprememb",
		filterByYear: "Filtriraj po letu",
		minimumYear: "Najmanjša vrednost",
		maximumYear: "Največja vrednost",
		filterByDuration: "Filtriraj po trajanju",
		minimumDuration: "Minimalno trajanje",
		maximumDuration: "Maksimalno trajanje",
		filterByMagnitude: "Filtriraj po jakosti",
		minimumMagnitude: "Minimalna jakost",
		maximumMagnitude: "Maksimalna jakost",
		filterByStartValue: "Filtriraj po začetni vrednosti",
		minimumStartValue: "Minimalna začetna vrednost",
		maximumStartValue: "Maksimalna začetna vrednost",
		filterByEndValue: "Filtriraj po končni vrednosti",
		minimumEndValue: "Minimalna končna vrednost",
		maximumEndValue: "Maksimalna končna vrednost",
		modelTypeName: "Vrsta modela",
		fromRasterName: "Od rastra",
		toRasterName: "Do rastra",
		computeChangeMethod: "Izračunaj metodo spremembe",
		fromClassValues: "Od vrednosti razreda (primer: 2 5)",
		toClassValues: "Do vrednosti razreda (primer: 2 5)",
		keepMethod: "Metoda filtriranja",
		useColorMethod: "Določi barve prehoda",
		detectChangeBands: "Pasovi za zaznavanje sprememb (začnejo se pri 0)",
		tmaskBands: "Pasovi za časovno maskiranje (začnejo se pri 0)",
		chiSquaredThreshold: "Hi-kvadratni prag za zaznavo spremembe",
		minAnomaly: "Minimalna zaporedna opazovanja anomalije",
		updatingFrequency: "Posodabljanje frekvence prileganja (v letih)",
		distanceAccumulationRasterName: "Raster akumulacije razdalje",
		costBackdirectionRasterName: "Raster obratne smeri ali raster smeri toka",
		rasterCollectionName: "Zbirka rastrov",
		itemFunctionName: "Funkcija elementa",
		aggregationFunctionName: "Agregacijska funkcija",
		processingFunctionName: "Funkcija obdelave",
		aggregationDefinitionName: "Agregacijska definicija",
		queryGeometryName: "Geometrija poizvedbe",
		factorFunctionZeroFactor: "Faktor nič",
		factorFunctionCutAngle: "Kot rezanja",
		factorFunctionSideFactor: "Faktor strani",
		factorFunctionSlope: "Naklon",
		factorFunctionLowCutAngle: "Nizki kot rezanja",
		factorFunctionHighCutAngle: "Visoki kot rezanja",
		factorFunctionCosPower: "Moč kosinusa",
		factorFunctionSecPower: "Moč sekante",
		factorFunctionTablePath: "Pot tabele",
		processingBand: "Pas obdelave",
		processingBandName: "Ime pasu obdelave",
		snappingDate: "Datum snemanja",
		maxNumSegments: "Največje število segmentov",
		vertexCountOvershoot: "Prekoračitev števila lomnih točk",
		spikeThreshold: "Prag za Spike",
		recoveryThreshold: "Prag obnovitve",
		minNumObs: "Najmanjše število opažanj",
		pValueThreshold: "Prag p-vrednosti",
		bestModelProportion: "Delež najboljšega dela",
		preventOneYearRecovery: "Prepreči enoletno obnovitev",
		recoveryIncreaseTrend: "Obnovitev ima naraščajoči trend",
		outputOtherBands: "Izhod drugih pasov",
		sortType: "Razvrsti tip",
		numberOfRuns: "Zaženi razširitev in stisni dvakrat",
		percentileValue: "Vrednost percentila",
		percentileInterpolationType: "Tip interpolacije percentila",
		rasterInfoProperty: "Lastnost",
		rasterInfoValue: "Vrednost",
		rasterInfoColumns: "Stolpci",
		rasterInfoRows: "Vrstice",
		rasterInfoBandCount: "Število pasov",
		rasterInfoPixelSizeX: "Velikost celice X",
		rasterInfoPixelSizeY: "Velikost celice Y",
		rasterInfoPixelType: "Tip piksla",
		rasterExtentTop: "Zgoraj",
		rasterExtentBottom: "Spodaj",
		rasterExtentLeft: "Levo",
		rasterExtentRight: "Desno",
		rasterStatisticsNotCalculated: "Statistika ni bila izračunana.",
		spatialReferenceProjection: "Projekcija",
		spatialReferenceWkid: "WKID",
		spatialReferenceLatestWkid: "Prejšnji WKID",
		spatialReferenceWkt: "WKT",
		spatialReferenceVcsWkid: "VCSWKID",
		spatialReferenceLatestVcsWkid: "Prejšnji VCSWKID",
		spatialReferenceAuthority: "Organ",
		spatialReferenceLinearUnit: "Linearna enota",
		spatialReferenceAngularUnit: "Kotna enota",
		spatialReferenceFalseEasting: "Navidezni pomik proti vzhodu",
		spatialReferenceFalseNorthing: "Navidezni pomik proti severu",
		spatialReferenceCentralMeridian: "Središčni poldnevnik",
		spatialReferencePrimeMeridian: "Izhodiščni poldnevnik",
		spatialReferenceStandardParallel1: "Standardna vzporednica 1",
		spatialReferenceStandardParallel2: "Standardna vzporednica 2",
		spatialReferenceLatitudeOfOrigin: "Geografska širina izhodišča",
		spatialReferenceAuxiliarySphereType: "Pomožna vrsta krogle",
		spatialReferenceDatum: "Datum",
		spatialReferenceSpheroid: "Sferoid",
		spatialReferenceSemimajorAxis: "Velika polos",
		spatialReferenceSemiminorAxis: "Mala polos",
		spatialReferenceInverseFlattening: "Obrnjeno sploščevanje",
		inputDefinitionFileName: "Vhodna definicijska datoteka",
		deleteName: "Izbriši",
		addVariableName: "Dodaj spremenljivko",
		maxNumPixelsPerSegment: "Maksimalna velikost segmenta v pikslih",
		forwardWindowName: "Okno naprej",
		backwardWindowName: "Okno nazaj",
		noDataHandlingName: "Obdelava vrednosti brez podatkov",
		circularWrapValueName: "Vrednost krožnega preloma",
		fromClassNameFieldName: "Ime polja za imena razredov v Od rastra",
		toClassNameFieldName: "Ime polja za imena razredov v Do rastra",
		targetRasterName: "Ciljni raster",
		circularWrapValue: "Vrednost krožnega preloma",
		bandIndexesR: "Rdeči izraz",
		bandIndexesG: "Zeleni izraz",
		bandIndexesB: "Modri izraz",
		exampleName: "Primer",
		inputName: "Vnos",
		outputName: "Izhod",
		optionalName: "Izbirno",
		browseDefinitionFile: "Brskanje po definicijski datoteki",
		selectDefinitionFile: "Izberi vhodno definicijsko datoteko",
		inputDefinitionURL: "Vhodna definicijska datoteka URL",
		enterDefinitionFileURL: "Vnesi URL definicijske datoteke",
		browseXMLFile: "Prebrskaj XML datoteko",
		selectStatsFile: "Izberi datoteko s statistiko in histogrami",
		enterXMLFileURL: "Vnesite URL datoteke XML",
		xmlFileURL: "URL datoteke XML",
		circularCalculation: "Izračunaj krožno statistiko",
		localSurfaceType: "Tip lokalne površine",
		surfaceParameterType: "Tip parametra",
		neighborhoodDistance: "Razdalja soseske",
		useAdaptiveNeighborhood: "Uporabi prilagodljivo sosesko",
		outputSlopeType: "Merjenje izhodnega naklona",
		projectAzimuths: "Projektiraj geodetske azimute",
		useEquatorialAspect: "Uporabi ekvatorialno lego neba",
		zUnit: "Enota Z",
		analysisMask: "Maska analize",
		stdDeviation: "Standardni odklon",
		"true": "Resnično",
		"false": "Neresnično",
		costDistanceRaster1: "Vnos zbranega rastra stroškov razdalje 1",
		costDistanceRaster2: "Vnos zbranega rastra stroškov razdalje 2",
		threshold: "Prag",
		thresholdMethod: "Metoda praga",
		directionRaster1: "Vnos obratnega rastra 1",
		directionRaster2: "Vnos obratnega rastra 2",
		maxIterations: "Največje število ponovitev",
		epsilon: "Epsilon"
	},
	enumLabels: {
		attributeTableTypeManual: "Ročno",
		attributeTableTypeExternal: "Zunanji",
		clrSchemeTypeColormap: "Barvna paleta",
		clrSchemeTypeColorRamp: "Barvna lestvica",
		colormapTypeElevation: "Višina",
		colormapTypeGray: "Siva",
		colormapTypeNDVI: "NDVI",
		colormapTypeNDVI2: "NDVI2",
		colormapTypeNDVI3: "NDVI3",
		colormapTypeRandom: "Naključno",
		none: "Brez",
		slopeTypeAdjusted: "Prilagojeno",
		slopeTypeDegree: "Stopinja",
		slopeTypePercentRise: "Odstotno povečanje",
		slopeTypeScaled: "Skalirano",
		stretchTypeMinMax: "MinMax",
		stretchTypePercentMinMax: "PercentMinMax",
		stretchTypeSigmoid: "Sigmoidno",
		stretchTypeStdDev: "StdOdk",
		hillshadeTypeSimple: "Tradicionalno",
		hillshadeTypeMultidirectional: "Večsmerno",
		bandComboByNames: "Imena pasov",
		bandComboByWavelength: "Valovne dolžine pasov",
		bandComboByIDs: "ID-ji pasov",
		missingBandActionBestMatch: "Najboljše ujemanje",
		missingBandActionFail: "Ni uspelo",
		unitTypeCelsius: "Celzij",
		unitTypeCentimeters: "Centimetri",
		unitTypeDecimeters: "Decimetri",
		unitTypeFahrenheit: "Fahrenheit",
		unitTypeFeet: "Čevlji",
		unitTypeFeetPerSec: "Čevljev na sekundo (čevljev/s)",
		unitTypeInches: "Palci",
		unitTypeKelvin: "Kelvin",
		unitTypeKilometers: "Kilometri",
		unitTypeKmsPerHour: "Kilometrov na uro (km/h)",
		unitTypeKnots: "Vozlov (kn)",
		unitTypeMeters: "Metri",
		unitTypeMetersPerSec: "Metrov na sekundo (m/s)",
		unitTypeMiles: "Milje",
		unitTypeMilesPerHour: "Milj na uro (milj/h)",
		unitTypeMillimeters: "Milimetri",
		unitTypeNauticalMiles: "Navtične milje",
		unitTypeYards: "Jardi",
		unitTypeDecimalDegrees: "Decimalne stopinje",
		unitTypePoints: "Točke",
		unitTypeUnknown: "Neznano",
		unitTypeSqMapUnits: "Kvadratne enote karte",
		unitTypeSqMiles: "Kvadratne milje",
		unitTypeSqKms: "Kvadratni kilometri",
		unitTypeAcres: "Akri",
		unitTypeHectares: "Hektari",
		unitTypeSqYards: "Kvadratni jardi",
		unitTypeSqFt: "Kvadratni čevlji",
		unitTypeSqInches: "Kvadratni palci",
		unitTypeSqMts: "Kvadratni metri",
		unitTypeSqCms: "Kvadratni centimetri",
		unitTypeSqMms: "Kvadratni milimetri",
		cellsizeTypeFirst: "Prvi izmed",
		cellsizeTypeMin: "Min.",
		cellsizeTypeMax: "Maks.",
		cellsizeTypeMean: "Povprečje",
		cellsizeTypeLast: "Zadnji izmed",
		extentTypeFirst: "Prvi izmed",
		extentTypeIntersection: "Presek",
		extentTypeUnion: "Unija",
		extentTypeLast: "Zadnji izmed",
		noDataInterpretAny: "Se ujema s katero koli",
		noDataInterpretAll: "Se ujema z vsemi",
		curvatureTypeStandard: "Standardno",
		curvatureTypeProfile: "Profil",
		curvatureTypePlanform: "Planformno",
		filterTypeLineDetectionHorizontal: "Horizontalno zaznavanje linije",
		filterTypeLineDetectionVertical: "Vertikalno zaznavanje linije",
		filterTypeLineDetectionLeftDiagonal: "Zaznavanje linije po levi diagonali",
		filterTypeLineDetectionRightDiagonal: "Zaznavanje linije po desni diagonali",
		filterTypeGradientNorth: "Gradient sever",
		filterTypeGradientWest: "Gradient zahod",
		filterTypeGradientEast: "Gradient vzhod",
		filterTypeGradientSouth: "Gradient jug",
		filterTypeGradientNorthEast: "Gradient severovzhod",
		filterTypeGradientNorthWest: "Gradient severozahod",
		filterTypeSmoothArithmeticMean: "Gladka aritmetična sredina",
		filterTypeSmoothing3x3: "Glajenje 3 x 3",
		filterTypeSmoothing5x5: "Glajenje 5 x 5",
		filterTypeSharpening3x3: "Izostritev 3 x 3",
		filterTypeSharpening5x5: "Izostritev 5 x 5",
		filterTypeLaplacian3x3: "Laplasian 3 x 3",
		filterTypeLaplacian5x5: "Laplasian 5 x 5",
		filterTypeSobelHorizontal: "Horizontalni Sobel",
		filterTypeSobelVertical: "Vertikalni Sobel",
		filterTypeSharpen: "Izostritev",
		filterTypeSharpen2: "Še večja izostritev",
		filterTypePointSpread: "Razširjanje točk",
		userDefined: "Uporabniško določen",
		ContourTypeLines: "Linija plastnice",
		ContourTypeFill: "Polnilo plastnice",
		ContourTypeSmoothOnly: "Samo gladka površina",
		rasterizeFirst: "Prvi",
		rasterizeLast: "Zadnji",
		rasterizeSmallest: "Najmanjše",
		rasterizeLargest: "Največje",
		resamplingTypeNearest: "Najbližji sosed",
		resamplingTypeBilinear: "Bilinearna interpolacija",
		resamplingTypeCubic: "Kubična konvolucija",
		resamplingTypeMajority: "Večina",
		resamplingTypeBilinearPlus: "Bilinearna interpolacija plus",
		resamplingTypeGauss: "Gaussova zameglitev",
		resamplingTypeGaussPlus: "Gaussova zameglitev plus",
		resamplingTypeAverage: "Povprečno",
		resamplingTypeMinimum: "Minimum",
		resamplingTypeMaximum: "Maksimum",
		resamplingTypeVectorAvg: "Vektorsko povprečje",
		minimum: "Minimum",
		maximum: "Maksimum",
		mean: "Srednja vrednost",
		stdDeviation: "Standardni odklon",
		uvMagDirTypeUV: "U-V",
		uvMagDirTypeMagDir: "Jakost-smer",
		unknown: "Neznano",
		angleRefSysGeographic: "Geografsko",
		angleRefSysArithmetic: "Aritmetično",
		interpolateIrregularDataNearest: "Najbližji sosed",
		interpolateIrregularDataBilinear: "Bilinearen",
		interpolateIrregularDataTinningLinear: "Linearno redčenje",
		interpolateIrregularDataTinningNaturalNeighbor: "Naravni sosedi",
		interpolateIrregularDataTinningIDW: "Utež obrnjene razdalje",
		esriRasterThresholdTypeConstant: "Konstanta",
		esriRasterThresholdTypeOtsu: "Otsu",
		esriRasterThresholdTypeTsai: "Tsai",
		esriRasterThresholdTypeKapur: "Kapur",
		esriRasterThresholdTypeKittler: "Kittler",
		esriRasterThresholdTypeRosin: "Rosin",
		argStatsTypeMax: "Arg Maks",
		argStatsTypeMin: "Arg Min",
		argStatsTypeMedian: "Arg Mediana",
		argStatsTypeDuration: "Trajanje",
		arithmeticOpPlus: "Plus",
		arithmeticOpMinus: "Minus",
		arithmeticOpMultiply: "Pomnoži",
		arithmeticOpDivide: "Deli",
		arithmeticOpPower: "Power",
		arithmeticOpMode: "Način",
		clipTypeOutside: "Izsekaj izven",
		clipTypeInside: "Izsekaj znotraj",
		yes: "Da",
		no: "Ne",
		densities: "Gostote",
		expectedCounts: "Pričakovana števila",
		planar: "Planarno",
		geodesic: "Geodetsko",
		eachCell: "Vsaka celica",
		eachZone: "Vsako območje",
		bestSingle: "Najboljše enojno",
		allSightlines: "Vse linije vidnosti",
		perimeterSightlines: "Obseg linij vidnosti",
		frequency: "Pogostost",
		observers: "Opazovalci",
		majority: "Večina",
		median: "Mediana",
		minority: "Manjšina",
		percentile: "Percentil",
		range: "Razpon",
		sum: "Vsota",
		variety: "Raznolikost",
		ndvi: "NDVI",
		savi: "SAVI",
		bandArithmeticMethodTSAVI: "Transformiran SAVI",
		bandArithmeticMethodMSAVI: "Spremenjen SAVI",
		bandArithmeticMethodSultan: "Sultanova formula",
		gemi: "GEMI",
		pvi: "PVI",
		gvi: "GVI (Landsat TM)",
		vari: "VARI",
		sr: "SR",
		gndvi: "GNDVI",
		ndvire: "NDVIre",
		srre: "SRre",
		mtvi2: "MTVI2",
		rtviCore: "RTVICore",
		cire: "CIre",
		cig: "CIg",
		ndwi: "NDWI",
		evi: "EVI",
		ironOxide: "Železov oksid",
		ferrousMinerals: "Kovinski minerali",
		clayMinerals: "Glineni minerali",
		wndwi: "WNDWI",
		bai: "BAI",
		mndwi: "MNDWI",
		nbr: "NBR",
		ndbi: "NDBI",
		ndmi: "NDMI",
		ndsi: "NDSI",
		localSquareRoot: "Kvadratni koren",
		localACos: "ACos",
		localASin: "ASin",
		localATan: "ATan",
		localATanH: "ATanH",
		localAbs: "Abs",
		localBitwiseNot: "Bitni ne",
		localBooleanNot: "Boolov ne",
		localCos: "Cos",
		localCosH: "CosH",
		localExp: "Exp",
		localExp10: "Exp10",
		localExp2: "Exp2",
		localInt: "Celo število",
		localIsNull: "Je brez vrednosti",
		localFloat: "Decimalno enojno",
		localLn: "Ln",
		localLog10: "Log10",
		localLog2: "Log2",
		localNegate: "Negate",
		localRoundDown: "Zaokroži navzdol",
		localRoundUp: "Zaokroži navzgor",
		localSin: "Sin",
		localSinH: "SinH",
		localTan: "Tan",
		localTanH: "TanH",
		localACosH: "ACosH",
		localASinH: "ASinH",
		localPlus: "Plus",
		localMinus: "Minus",
		localTimes: "Times",
		localPower: "Power",
		localBitwiseAnd: "Bitni in",
		localBitwiseLeftShift: "Bitni pomik v levo",
		localBitwiseOr: "Bitni ali",
		localBitwiseRightShift: "Bitni pomik desno",
		localBitwiseXor: "Bitwise Xor",
		localBooleanAnd: "Boolov in",
		localBooleanOr: "Boolov ali",
		localBooleanXor: "Boolov Xor",
		localDivide: "Deli",
		localEqualTo: "Enako",
		localGreaterThan: "Večje kot",
		localGreaterThanEqual: "Večje ali enako kot",
		localLessThan: "Manjše kot",
		localLessThanEqual: "Manjše ali enako kot",
		localMod: "Mod",
		localNotEqual: "Ni enako",
		localATan2: "ATan2",
		localSquare: "Kvadrat",
		localSetNull: "Nastavi brez vrednosti",
		remapDefTypeList: "Seznam",
		remapDefTypeTable: "Tabela",
		remapTableTypeSimple: "Enostavno",
		remapTableTypeDynamic: "Dinamično",
		remapTableTypeReassignment: "Prerazporeditev",
		geomCorrectionByConstZ: "Uporabi konstanto Z",
		geomCorrectionByDEM: "Uporabi DMV",
		radarCalibBetaNought: "Beta ničla",
		radarCalibSigmaNought: "Sigma ničla",
		radarCalibGammaNought: "Gama ničla",
		speckleFilterTypeLee: "Filter Lee",
		speckleFilterTypeEnhancedLee: "Izboljšan filter Lee",
		speckleFilterTypeFrost: "Filter Frost",
		speckleFilterTypeKuan: "Filter Kuan",
		speckleNoiseModelMul: "Multiplikativni šum",
		speckleNoiseModelAdd: "Dodaten šum",
		speckleNoiseModelAddnMul: "Dodaten in multiplikativen šum",
		mosaicOpTypeFirst: "Prvi",
		mosaicOpTypeLast: "Zadnji",
		mosaicOpTypeMin: "Min",
		mosaicOpTypeMax: "Maks",
		mosaicOpTypeMean: "Srednja vrednost",
		mosaicOpTypeBlend: "Zlitje",
		mosaicOpTypeSum: "Vsota",
		integer: "Celo število",
		rfxD8: "D8",
		rfxMFD: "MFD",
		dinf: "Dinf",
		vertical: "Vertikalno",
		horizontal: "Horizontalno",
		localCellStatisticsMajority: "Večina",
		localCellStatisticsMax: "Maksimum",
		localCellStatisticsMean: "Srednja vrednost",
		localCellStatisticsMedian: "Mediana",
		localCellStatisticsMin: "Minimum",
		localCellStatisticsMinority: "Manjšina",
		localCellStatisticsRange: "Razpon",
		localCellStatisticsStdDev: "Standardni odklon",
		localCellStatisticsSum: "Vsota",
		localCellStatisticsVariety: "Raznolikost",
		localCellStatisticsMajorityIgnoreND: "Večina (prezri Brez podatkov)",
		localCellStatisticsMaxIgnoreND: "Maksimum (prezri Brez podatkov)",
		localCellStatisticsMeanIgnoreND: "Srednja vrednost (prezri Brez podatkov)",
		localCellStatisticsMedianIgnoreND: "Mediana (prezri Brez podatkov)",
		localCellStatisticsMinIgnoreND: "Minimum (prezri Brez podatkov)",
		localCellStatisticsMinorityIgnoreND: "Manjšina (prezri Brez podatkov)",
		localCellStatisticsRangeIgnoreND: "Razpon (prezri Brez podatkov)",
		localCellStatisticsStdDevIgnoreND: "Standardni odklon (prezri Brez podatkov)",
		localCellStatisticsSumIgnoreND: "Vsota (prezri Brez podatkov)",
		localCellStatisticsVarietyIgnoreND: "Raznolikost (prezri Brez podatkov)",
		localCellStatisticsTypePercentileIgnoreND: "Percentil (prezri Brez podatkov)",
		fromSource: "Iz vira",
		toSource: "V vir",
		colorspaceConversionRgbToHsv: "RGB v HSV",
		colorspaceConversionHsvToRgb: "HSV v RGB",
		pansharpenTypeIHS: "IHS",
		pansharpenTypeBrovey: "Brovey",
		pansharpenTypeEsri: "Esri",
		pansharpenTypeMean: "Srednja vrednost",
		pansharpenTypeGramSchmidt: "Gram-Schmidt",
		rectangleNeighborhood: "Pravokotnik",
		circleNeighborhood: "Krog",
		annulusNeighborhood: "Annulus",
		wedgeNeighborhood: "Izsek kroga",
		irregularNeighborhood: "Nepravilno",
		weightNeighborhood: "Utež",
		four: "Štiri",
		eight: "Osem",
		within: "Znotraj",
		cross: "Križ",
		addLink: "Dodaj povezavo",
		noLink: "Brez povezave",
		weightedMean: "Ponderirano povprečje",
		ls8QCBitPatternCirrus: "Landsat 8 Cirrus",
		ls8QCBitPatternCloud: "Landsat 8 Oblak",
		ls8QCBitPatternCloudShadow: "Landsat 8 Senčenje oblaka",
		ls8QCBitPatternDesignatedFill: "Landsat 8 Dodeljeno polnilo",
		ls8QCBitPatternDroppedFrame: "Landsat 8 Padel okvir",
		ls8QCBitPatternSnowIce: "Landsat 8 Sneg/led",
		ls8QCBitPatternTerrainOcclusion: "Landsat 8 Okluzija površja",
		ls8QCBitPatternVegetation: "Landsat 8 Vegetacija",
		ls8QCBitPatternWater: "Landsat 8 Voda",
		downStream: "Dolvodno",
		upStream: "Gorvodno",
		strahler: "STRAHLER",
		shreve: "SHREVE",
		currentSlice: "Trenutni izsek",
		allSlices: "Vsi izseki",
		expandDistance: "RAZDALJA",
		expandMorphological: "MORFOLOŠKO",
		spectralProfileFile: "Spektralni profil",
		trainingFeatureFile: "Učni geoobjekt",
		randomDistributionTypeUniform: "Enotno",
		randomDistributionTypeUniformInteger: "Celo število",
		randomDistributionTypeNormal: "Normalna",
		randomDistributionTypeExponential: "Eksponentno",
		randomDistributionTypePoisson: "Poissonovo",
		randomDistributionTypeGamma: "Gama",
		randomDistributionTypeBinomial: "Binomsko",
		randomDistributionTypeGeometric: "Geometrično",
		randomDistributionTypeNegativeBinomial: "Negativno binomsko",
		randomGeneratorTypeStandardCRand: "Standardni C rand",
		randomGeneratorTypeAlgorithmACM599: "ACM zbrani algoritmi 599",
		randomGeneratorTypeMersenneTwister: "Mersenne Twister",
		sumName: "Vsota",
		medainName: "Mediana",
		trendLinear: "Linearno",
		trendHarmonic: "Harmonsko",
		trendPolynomial: "Polinomno",
		trendMannKendall: "Mann-Kendall test",
		trendSeasonalKendall: "Seasonal-Kendall test",
		dimensionByValue: "Po vrednosti",
		dimensionByInterval: "Po intervalu",
		mdimDefTypeAll: "Vsi",
		mdimDefTypeByValues: "Po vrednostih",
		mdimDefTypeByRanges: "Po razponih",
		mdimDefTypeByIteration: "Po ponovitvah",
		mdimDefTypeByInterval: "Po intervalu",
		mdimDefTypeByTargetRaster: "S ciljnim rastrom",
		esriTimeUnitsHours: "Ure",
		esriTimeUnitsDays: "Dni",
		esriTimeUnitsWeeks: "Tedni",
		esriTimeUnitsMonths: "Meseci",
		esriTimeUnitsYears: "Leta",
		esriTimeIntervalKeywordHourly: "Vsako uro",
		esriTimeIntervalKeywordDaily: "Dnevno",
		esriTimeIntervalKeywordWeekly: "Tedensko",
		esriTimeIntervalKeywordDekadly: "Desetmesečno",
		esriTimeIntervalKeywordPentadly: "Petmesečno",
		esriTimeIntervalKeywordMonthly: "Mesečno",
		esriTimeIntervalKeywordQuarterly: "Trimesečno",
		esriTimeIntervalKeywordYearly: "Letno",
		esriTimeIntervalKeywordRecurringDaily: "Dnevno ponavljanje",
		esriTimeIntervalKeywordRecurringWeekly: "Tedensko ponavljanje",
		esriTimeIntervalKeywordRecurringMonthly: "Mesečno ponavljanje",
		esriTimeIntervalKeywordRecurringQuarterly: "Trimesečno ponavljanje",
		aggDefTypeAll: "Vse",
		aggDefTypeIntervalKeyword: "Ključna beseda intervala",
		aggDefTypeIntervalValue: "Vrednost intervala",
		aggDefTypeIntervalRanges: "Razponi intervala",
		latestChange: "Čas zadnje spremembe",
		earliestChange: "Čas prve spremembe",
		largestChange: "Čas največje spremembe",
		numberOfChanges: "Število sprememb",
		longestChange: "Čas najdaljše spremembe",
		shortestChange: "Čas najkrajše spremembe",
		fastestChange: "Čas najhitrejše spremembe",
		slowestChange: "Čas najpočasnejše spremembe",
		allChanges: "Vse",
		increaseChanges: "Povečaj",
		decreaseChanges: "Zmanjšaj",
		segmentBeginning: "Začetek segmenta",
		segmentEnd: "Konec segmenta",
		esriComputeChangeMethodDifference: "Razlika",
		esriComputeChangeMethodRelativeDifference: "Relativna razlika",
		esriComputeChangeMethodCategorical: "Kategorična razlika",
		esriComputeChangeMethodMultispectralEuclideanDistance: "Spektralna evklidska razdalja",
		esriComputeChangeMethodMultispectralAngularDifference: "Spektralna razlika v kotu",
		esriComputeChangeMethodMultispectralAxisWithBiggestChange: "Pas z največ spremembami",
		esriComputeChangeKeepAll: "Obdrži vse",
		esriComputeChangeKeepChangedOnly: "Obdrži samo spremenjene piksle",
		esriComputeChangeKeepUnchangedOnly: "Obdrži samo nespremenjene piksle",
		esriComputeChangeUseColorAverage: "Povprečje od in do barv",
		esriComputeChangeUseColorFrom: "Uporabi iz barv",
		esriComputeChangeUseColorTo: "Uporabi v barve",
		factorFunctionBinary: "Binarno",
		factorFunctionForward: "Naprej",
		factorFunctionLinear: "Linearno",
		factorFunctionInvLinear: "Obratno linearno",
		factorFunctionTable: "Tabela",
		factorFunctionSymLinear: "Simetrično linearno",
		factorFunctionSymInvLinear: "Simetrično obratno linearno",
		factorFunctionCos: "Kosinus",
		factorFunctionSec: "Sekanta",
		factorFunctionCosSec: "Kosinusna sekanta",
		factorFunctionSecCos: "Kosinus sekante",
		noSort: "Ne razvrsti",
		ascend: "Naraščajoče",
		descend: "Padajoče",
		autoDetect: "Samodejno zaznavanje",
		nearest: "Najbližji",
		linear: "Linearno",
		esriMonthJanuary: "Januar",
		esriMonthFebruary: "Februar",
		esriMonthMarch: "Marec",
		esriMonthApril: "April",
		esriMonthMay: "Maj",
		esriMonthJune: "Junij",
		esriMonthJuly: "Julij",
		esriMonthAugust: "Avgust",
		esriMonthSeptember: "September",
		esriMonthOctober: "Oktober",
		esriMonthNovember: "November",
		esriMonthDecember: "December",
		dimensionalMovingIgnoreNoData: "Podatki",
		dimensionalMovingPropagateNoData: "brez podatkov",
		dimensionalMovingFillOnlyNoData: "Zapolni Brez podatkov",
		circularMean: "Krožna srednja vrednost",
		circularName: "Krožna",
		arithmeticName: "Aritmetično",
		slopeName: "Naklon",
		aspectName: "Lega neba",
		meanCurvature: "Srednja ukrivljenost",
		profileCurvature: "Ukrivljenost profila (normalna naklonska linija).",
		tangentialCurvature: "Tangencialna (normalna kontura) ukrivljenost",
		planCurvature: "Ukrivljenost načrta (projicirana kontura)",
		contourGeodesicTorsion: "Konturna geodetska torzija",
		gaussianCurvature: "Gaussova ukrivljenost",
		casoratiCurvature: "Casoratijeva ukrivljenost",
		localSurfaceTypeQuadratic: "Kvadraten",
		localSurfaceTypeBiquadratic: "Bikvadraten",
		thresholdNoThreshold: "Brez praga",
		thresholdPercentLeastCost: "Odstotek najmanjšega stroška",
		thresholdAccumulativeCost: "Zbrani strošek",
		clrmapTypeHillshade: "Senčenje reliefa"
	},
	categoryLabels: {
		sourceCharacteristics: "Značilnosti vira",
		neighborhoodSettings: "Okoliške nastavitve",
		statistics: "Statistika",
		gamma: "Gama",
		viewshedParameters: "Parametri Viewshed",
		observerParameters: "Parametri opazovalca",
		irregularDataInterpolation: "Interpolacija nepravilnih podatkov",
		modelStatistics: "Statistika modela",
		aggregationDef: "Agregacijska definicija",
		filterByAttributes: "Filtriraj po atributih",
		percentileName: "Percentil",
		rasterInfo: "Rastrske informacije",
		extent: "Razpon",
		spatialReference: "Koordinatni sistem"
	},
	outputRasterHelpTexts: {
		outputName: "<p>Ime sloja, ki bo ustvarjen in dodan na karto.</p>",
		resultType: "<p>Vrsta rezultata, ki bo ustvarjen. Rezultati so lahko ploščični slikovni sloji ali dinamični slikovni sloji.</p>",
		saveResultIn: "<p>Ime mape v <b>Moja vsebina</b>, kjer bo shranjen rezultat.</p>"
	},
	analysisEnvironmentsHelpTexts: {
		description: "<p>Nastavitve okolja za analizo v Map Viewer. </p>",
		outSR: "<p>Določa koordinatni sistem za analizo in sloj z rezultati.</p>",
		extent: "<p>Določa območje, ki bo uporabljeno za analizo.</p>",
		snapRaster: "<p>Prilagodi obseg izhoda, tako da se ujema s poravnavo celic določenega sloja privlačnosti rastra.</p>",
		cellSize: "<p>Določi velikost ali ločljivost celice, ki bo uporabljena za analizo in ustvarjanje izhodnega rastrskega sloja.</p>",
		mask: "<p>Določi sloj maske, v katerem bodo za analizo uporabljene samo celice, ki padejo v območje maske.</p>",
		resamplingMethod: "<p>Določi, kako interpolirati vrednosti piksla, kadar se vhodni in izhodni raster ne skladata.</p>"
	},
	mainGenStrings: {
		unsupportedDataType: "Nepodprt tip",
		currentlyUnsupported: " Privzeti urejevalnik za ${missingType} trenutno je na čakanju, a prihaja kmalu. Polje z začasnim nadomestnim besedilom za določanje vnosov na podlagi nizov.",
		unsupportedOverrideWarning: "Komponenta urejevalnika prepisov, ki zagotavlja boljši uporabniški vmesnik za delo z naslednjim(-i) parametrom(-i), je v pripravi, vendar bo kmalu na voljo:",
		overrideWidgetMissing: "Komponenta urejevalnika prepisov manjka.",
		uiIncomplete: "Oddaja opravila ni uspela. Funkcije ni mogoče zagnati, saj nekatera obvezna polja v uporabniškem vmesniku niso dokončana ali pa manjkajo.",
		count: "Število",
		selectVariables: "Izberi spremenljivke",
		selectFeature: "Izberi geoobjektni sloj",
		greaterThanErrorMessage: "Vhodna številka mora biti večja od ${min}",
		lesserThanErrorMessage: "Vhodna številka mora biti manjša od ${max}",
		greaterThanOrEqualErrorMessage: "Vhodna številka mora biti večja ali enaka ${min}",
		lesserThanOrEqualErrorMessage: "Vhodna številka mora biti manjša ali enaka ${max}",
		allowScalar: "Izberi sloj ali vnesi konstanto",
		selectField: "Izberi polje",
		parameterRequired: "Ta parameter je obvezen.",
		enterAValue: "Vnesi vrednost ...",
		invalidInput: "Vnesena vrednost ni veljavna.",
		itemNotFound: "Element ne obstaja ali do njega ni mogoče dostopati.",
		itemPermissionDenied: "Nimate dovoljenja za dostop do tega elementa.",
		layerNotAvailable: "Nalaganje sloja ni uspelo ${layerName}.",
		multipleLayersNotAvailable: "Nalaganje sloja ${layerName} in drugih ni uspelo.",
		learnMoreLabel: "Več o",
		fieldNotAvailable: "Nalaganje polja ni uspelo.",
		allowAnalysis: "Analiza ni dovoljena na slikovni storitvi.",
		allowAnalysisReason: "Enega ali več slojev karte tukaj ni navedenih, ker ne dovoljujejo analize.",
		learnMoreText: "Več",
		atLeastOneRasterInput: "Vsaj en vhodni sloj mora biti rastrski sloj.",
		browseAnalysisLayers: "Prebrskaj sloje",
		activeMapViewExtent: "Uporabi trenutni obseg karte",
		chooseRaster: "Izberi izsečni raster",
		chooseGeometry: "Izberi izsečno geometrijo",
		resultType: "Tip rezultata",
		saveInFolder: "Shrani v mapo",
		outputName: "Izhodno ime",
		outputLayerType: "Tip izhodnega sloja",
		dynamicImageryLayer: "Dinamični slikovni sloj",
		tiledImageryLayer: "Ploščičen slikovni sloj",
		custom: "Po meri",
		loading: "Nalaganje...",
		layerMissing: "Enega ali več slojev karte tukaj ni navedenih, ker ne dovoljujejo analize. Več o tem.",
		browseCoordinateSystems: "Prebrskaj po koordinatnih sistemih",
		unableToRepopulateOutSR: "Izhodnega koordinatnega sistema ni mogoče popolniti.",
		defaultTitle: "Prikaži več",
		"ARC (equal arc-second)": "ARC (enako ločni sekundi)",
		Africa: "Afrika",
		Antarctica: "Antarktika",
		Argentina: "Argentina",
		Asia: "Azija",
		"Asteroid Belt": "Asteroidni pas",
		"Atlantic Ocean": "Atlantski ocean",
		Australia: "Avstralija",
		"Australia and New Zealand": "Avstralija in Nova Zelandija",
		Austria: "Avstrija",
		"BLM (US Feet)": "BLM (US Feet)",
		Bangladesh: "Bangladeš",
		"Beijing 1954": "Peking 1954",
		Bhutan: "Butan",
		CGCS2000: "CGCS2000",
		Canada: "Kanada",
		Caribbean: "Karibi",
		"Caribbean Sea": "Karibsko morje",
		"Central America": "Srednja Amerika",
		"Central and North America": "Osrednja in Severna Amerika",
		Colombia: "Kolumbija",
		Continental: "Kontinentalno",
		"County Systems": "Okrajni sistemi",
		"Democratic Republic of the Congo": "Demokratična republika Kongo",
		"EPSG Arctic": "EPSG Arctic",
		Earth: "Zemlja",
		"Ellipsoidal-based": "Na osnovi elipsoidov",
		Europe: "Evropa",
		Finland: "Finska",
		France: "Francija",
		"GSK 2011": "GSK 2011",
		"Gauss Kruger": "Gauss-Kruger",
		"Geographic Coordinate Systems": "Geografski koordinatni sistemi",
		Germany: "Nemčija",
		"Gravity-related": "Povezano z gravitacijo",
		"Greenwich-based": "S sedežem v Greenwichu",
		"Highways England": "Avtoceste v Angliji",
		Illinois: "Illinois",
		"Indian Ocean": "Indijski ocean",
		"Indian Subcontinent": "Indijska podcelina",
		Indiana: "Indiana",
		Indonesia: "Indonezija",
		Iowa: "Iowa",
		"Ireland and United Kingdom": "Irska in Združeno kraljestvo",
		Italy: "Italija",
		Japan: "Japonska",
		Jupiter: "Jupiter",
		Kansas: "Kansas",
		"Las Vegas": "Las Vegas",
		Libya: "Libija",
		Malaysia: "Malezija",
		"Malaysia and Singapore": "Malezija in Singapur",
		Mars: "Mars",
		Mercury: "Merkur",
		Minnesota: "Minnesota",
		Montana: "Montana",
		"NAD 1927": "NAD 1927",
		"NAD 1927 (US Feet)": "NAD 1927 (US Feet)",
		"NAD 1983": "NAD 1983",
		"NAD 1983 (2011)": "NAD 1983 (2011)",
		"NAD 1983 (2011) (Intl Feet)": "NAD 1983 (2011) (Intl Feet)",
		"NAD 1983 (2011) (Meters)": "NAD 1983 (2011) (Metri)",
		"NAD 1983 (2011) (US Feet)": "NAD 1983 (2011) (US Feet)",
		"NAD 1983 (CORS96) (Intl Feet)": "NAD 1983 (CORS96) (Intl Feet)",
		"NAD 1983 (CORS96) (Meters)": "NAD 1983 (CORS96) (Metri)",
		"NAD 1983 (CORS96) (US Feet)": "NAD 1983 (CORS96) (US Feet)",
		"NAD 1983 (Intl Feet)": "NAD 1983 (Intl Feet)",
		"NAD 1983 (Meters)": "NAD 1983 (Metri)",
		"NAD 1983 (PA11) (Meters)": "NAD 1983 (PA11) (Metri)",
		"NAD 1983 (PA11) (US Feet)": "NAD 1983 (PA11) (US Feet)",
		"NAD 1983 (US Feet)": "NAD 1983 (US Feet)",
		"NAD 1983 HARN (Intl Feet)": "NAD 1983 HARN (Intl Feet)",
		"NAD 1983 HARN (Meters)": "NAD 1983 HARN (Metri)",
		"NAD 1983 HARN (US Feet)": "NAD 1983 HARN (US Feet)",
		"NAD 1983 NSRS2007 (Intl Feet)": "NAD 1983 NSRS2007 (Intl Feet)",
		"NAD 1983 NSRS2007 (Meters)": "NAD 1983 NSRS2007 (Metri)",
		"NAD 1983 NSRS2007 (US Feet)": "NAD 1983 NSRS2007 (US Feet)",
		"National Grids": "Nacionalna mreža",
		Navajo: "Navajo",
		Neptune: "Neptun",
		"New Beijing": "Novi Peking",
		"New Zealand": "Nova Zelandija",
		"North America": "Severna Amerika",
		"Northern Hemisphere": "Severna hemisfera",
		Norway: "Norveška",
		Oceans: "Oceani",
		Oregon: "Oregon",
		"Other GCS": "Drugi GCS",
		"Pacific Ocean": "Tihi ocean",
		Pluto: "Pluton",
		Polar: "Polarno",
		Portugal: "Portugalska",
		"Projected Coordinate Systems": "Projicirani koordinatni sistemi",
		"Pulkovo 1942": "Pulkovo 1942",
		"Pulkovo 1995": "Pulkovo 1995",
		Replaced: "Zamenjano",
		"SAD 1969": "SAD 1969",
		SIRGAS: "SIRGAS",
		"SIRGAS 2000": "SIRGAS 2000",
		Saturn: "Saturn",
		"Solar System": "Solarni sistem",
		"South Africa": "Južna Afrika",
		"South America": "Južna Amerika",
		"South Korea": "Južna Koreja",
		"Southern Hemisphere": "Južna hemisfera",
		"Spheroid-based": "Na osnovi sferoidov",
		"State Plane": "Državno letalo",
		"State Systems": "Državni sistemi",
		Sweden: "Švedska",
		"Switzerland and Liechtenstein": "Švica in Lihtenštajn",
		Texas: "Teksas",
		Tribal: "Plemensko",
		Turkey: "Turčija",
		"US Feet": "US Feet",
		"USA and territories": "ZDA in ozemlja",
		UTM: "UTM",
		Ukraine: "Ukrajina",
		"Unknown Height Systems": "Neznani višinski sistemi",
		Uranus: "Uran",
		Venus: "Venera",
		"Vertical Coordinate Systems": "Vertikalni koordinatni sistemi",
		Vietnam: "Vietnam",
		"WGS 1972": "WGS 1972",
		"WGS 1984": "WGS 1984",
		Wisconsin: "Wisconsin",
		"Wisconsin CRS": "Wisconsin CRS",
		World: "Svet",
		"World (Sphere-based)": "Svet (na osnovi sfer)",
		Wyoming: "Wyoming",
		"Xian 1980": "Xian 1980",
		done: "Končano",
		noResults: "Najden ni bil noben rezultat",
		searchPlaceholder: "Ime ali WKID",
		browseTemplate: "Prebrskaj po predlogah rastrskih funkcij",
		saveTemplate: "Predloga funkcije shranjevanja rastra",
		preview: "Predogled",
		previewDescription: "Predogled rezultata pred izvedbo analize.",
		showPreview: "Prikaži predogled",
		previewLayer: "Predogled sloja ${number}",
		newPreview: "Novi predogled",
		previewPopup: "Omogoči predogled rezultatov analize na podlagi vhodnih parametrov.",
		updatePreviewLayer: "Posodobi izbrani predogled sloja",
		createPreviewLayer: "Ustvari novi predogleda sloja",
		maximumPreviewAllowed: "Največje dovoljeno število predogledov sloja: ${maxCount}",
		previewFailure: "Ta predogled sloja ni na voljo. Preverite vhodne parametre in ponovno posodobite ta predogled sloja.",
		header: "Izberi element",
		content: "V ${rftTitle} imate neshranjene spremembe. Če pričnete ponovno z novo predlogo, bodo tiste spremembe izgubljene.",
		dontSave: "Ne shrani",
		"continue": "Nadaljuj",
		stretch: "Prilagodi oknu",
		pan: "Premik",
		newTemplate: "Ustvari novo predlogo",
		openTemplate: "Odpri predlogo",
		addFunction: "Dodaj rastrske funkcije",
		addConstant: "Dodaj konstanto",
		addRaster: "Dodaj rastrsko spremenljivko",
		move: "Premakni",
		zoom: "Povečava",
		saveAs: "Shrani kot",
		clear: "Počisti",
		addRasterFunctionTitle: "Dodaj rastrske funkcije",
		templatePropertiesTitle: "Lastnosti predloge",
		browseRFT: "Prebrskaj po predlogah rastrskih funkcij",
		defaultToolDescription: "${toolTitle} orodje za analizo.",
		openToolText: "Odpri orodje",
		toolDropdownText: "Spustni meni orodij",
		addToMap: "Potrdi in dodaj na karto",
		confirm: "Potrdi",
		select: "Izberi",
		selectTask: "Izberi opravilo",
		unsupportedLayer: "Ta parameter ne podpira naslednjih slojev: ${layerName}.",
		viewDetails: "Ogled vseh podrobnosti elementa",
		rename: "Preimenuj",
		duplicate: "Podvoji",
		launch: "Odpri za izvedbo",
		templateEditor: "Urejevalnik predloge",
		createItem: "Predloga funkcije shranjevanja rastra",
		actionLabel: "Filter",
		filterPopoverHeading: "Filtriranje funkcij",
		defaultSearchPlaceholder: "Išči po imenu",
		settings: "Nastavitve",
		summary: "Povzetek",
		definitionQuery: "Določitev poizvedbe",
		matchVariables: "Spremenljivke ujemanja",
		unionDimension: "Dimenzije unije",
		nameEditorPlaceholder: "Vnesi ime",
		summaryEditorPlaceholder: "Vnesite kratek opis.",
		definitionQueryPlaceholder: "Vnos ...",
		upload: "Naloži",
		chooseImage: "Kliknite za izbor datoteke",
		update: "Posodobi",
		thumbnailErrors: {
			wrongImageType: "Izbran je napačen tip slike",
			notAvailable: "Sličica ni na voljo",
			loadError: "Slike ni bilo mogoče naložiti",
			chooseFile: "Kliknite za izbor datoteke"
		}
	}
};
const copy = "Kopiraj";
const save = "Shrani";
const title = "Ime";
const folder = "Mapa";
const tags = "Oznake";
const savingMessage = "Shranjevanje elementa v";
const shareWith = "Deli s/z";
const share = "Deli";
const setSharingLevel = "Nastavi stopnjo deljenja";
const setGroupSharing = "Nastavi skupno rabo v skupini";
const owner = "Lastnik";
const organization = "Organizacija";
const everyone = "Vsi (javno)";
const groups = "Skupine:";
const type = "Vrsta";
const mosaic = "Mozaik";
const itemGroup = "Skupina elementa";
const item = "Element";
const definitionQuery = "Določitev poizvedbe";
const groupItemsBy = "Skupini elemente po";
const groupFieldName = "Ime polja skupine";
const tagFieldName = "Ime polja oznake";
const noTitleTagErrorMsg = "Zagotoviti morate ime svojega elementa in oznak, da omogočite, da bo vaša karta najdena s pomočjo iskanja.";
const noTitleErrorMsg = "Za svoj element morate navesti ime.";
const noTagErrorMsg = "Navesti morate najmanj eno oznako, s pomočjo katere bodo ljudje z iskanjem lažje našli vaš element.";
const error = "Napaka";
const warning = "Opozorilo";
const success = "Uspešno";
const details = "Podrobnosti:";
const tryAgain = "Poskusite znova";
const toolModeler = {
	save: "Shrani",
	editProperties: "Uredi lastnosti",
	saveAs: "Shrani kot",
	savingNotification: "Shranjevanje sprememb v element ...",
	savingTitle: "Shranjevanje",
	saveFailedMessage: "Sprememb ni bilo mogoče shraniti.",
	saveWithErrorsMessage: "Spremembe so bile shranjene z naslednjimi napakami.",
	viewItemMessage: "Oglej si shranjeni element",
	here: "tukaj.",
	itemCreatedMessage: "Ustvarjen je bil nov element.",
	clickToViewItemMessage: "Kliknite V redu za ogled strani s podrobnostmi elementa; za nadaljevanje kliknite Prekliči.",
	readingFailed: "Izbrane predloge rastrske funkcije ni bilo mogoče naložiti.",
	failedToLoadXML: "Izbrane predloge rastrske funkcije v obliki XML ni bilo mogoče naložiti.",
	learnMore: "Več",
	overwriteTitle: "Potrdi prepis",
	overwriteMessage: "Želite prepisati obstoječi element?",
	overwriteSuccessMessage: "Element je bil posodobljen."
};
const toolEditor = {
	run: "Zaženi",
	save: "Shrani",
	deleteSelected: "Izbriši izbrane elemente",
	addRaster: "Dodaj raster",
	addScalar: "Dodaj skalar",
	layout: "Samodejna postavitev",
	errorTitle: "Napaka",
	invalidToolMessage: "Predloga rastrske funkcije ni veljavna.",
	out: "Ven",
	zoomIn: "Povečaj",
	zoomOut: "Pomanjšaj",
	zoomToFit: "Prilagodi oknu",
	panOn: "Preklopi v način pomika",
	panOff: "Izklopi način pomika",
	defaultModelName: "Model orodja",
	defaultRasterName: "Raster"
};
const toolDetailsEditor = {
	defaultToolName: "Predloga rastrske funkcije",
	defaultToolDescription: "Dodajte kratek povzetek o rastrski funkciji.",
	defaultHelpText: "Kliknite na ikono za pomoč za urejanje besedila pomoči.",
	editHelpTitle: "Uredi pomoč",
	saveLabel: "Shrani",
	cancelLabel: "Prekliči",
	thumbnail: {
		wrongImageType: "Izbran je napačen tip slike.",
		notAvailable: "Sličica ni na voljo",
		loadError: "Slike ni bilo mogoče naložiti.",
		chooseFile: "Kliknite za izbor datoteke."
	}
};
const saveUtils = {
	thumbnail: "Sličica",
	sharing: "Deljenje"
};
const close = "Zapri";
const unsavedWarningExisting = "Želite shraniti spremembe v element <b>${itemTitle}</b>?";
const unsavedWarningNew = "Želite shraniti svoje spremembe?";
const saveAs = "Shrani kot";
const dontSave = "Ne shrani";
const unsavedTitle = "Neshranjene spremembe";
const invalidRFTMessage = "Ustvarjena predloga rastrske funkcije ni veljavna.";
const errorTitle = "Napaka";
const breadcrumb = "Urejevalnik rastrske funkcije";
const breadcrumbEditor = "Vsebina > Urejevalnik rastrske funkcije";
const viewerModeTitle = "Samo za branje";
const viewerModeMessage = "Element predloge rastrske funkcije je samo za branje. Spremembe ni mogoče shraniti.";
const userStartDirection = "Izberite funkcijo za izdelavo predloge rastrske funkcije.";
const selectFunction = "Dodaj funkcijo";
const deselectFunction = "Odstrani funkcijo";
const dialogTitle = "Sistem";
const category = "Kategorije";
const search = "Iskanje rastrskih funkcij";
const categoryNames = {
	analysis: "Analize",
	appearance: "Videz",
	classification: "Klasificikacija",
	conversion: "Pretvorba",
	correction: "Popravki",
	dataManagement: "Upravljanje podatkov",
	distance: "Razdalja",
	distanceLegacy: "Razdalja (zastarelo)",
	hydrology: "Hidrologija",
	math: "Matematika",
	mathConditional: "Matematika: Pogojno",
	mathLogical: "Matematika: Logično",
	mathTrigonometric: "Matematika: Trigonometrično",
	reclass: "Preklasifikacija",
	statistical: "Statistično",
	surface: "Površje"
};
const commonStrings_sl = {
	ok: ok,
	cancel: cancel,
	enterURL: enterURL,
	serviceURL: serviceURL,
	selectRaster: selectRaster,
	failedToLoadLayer: failedToLoadLayer,
	loadingLayer: loadingLayer,
	selectFeature: selectFeature,
	enterFURL: enterFURL,
	addRaster: addRaster,
	addScalar: addScalar,
	raster: raster,
	scalar: scalar,
	defaultModelName: defaultModelName,
	general: general,
	parameters: parameters,
	variables: variables,
	name: name,
	description: description,
	parameter: parameter,
	isPublic: isPublic,
	isDataset: isDataset,
	unknownPixelType: unknownPixelType,
	outputPixelType: outputPixelType,
	u8PixelType: u8PixelType,
	s8PixelType: s8PixelType,
	u16PixelType: u16PixelType,
	s16PixelType: s16PixelType,
	u32PixelType: u32PixelType,
	s32PixelType: s32PixelType,
	f32PixelType: f32PixelType,
	f64PixelType: f64PixelType,
	properties: properties,
	multidimensionalRules: multidimensionalRules,
	matchVariables: matchVariables,
	unionDimensions: unionDimensions,
	rasterFunctionEditor: rasterFunctionEditor,
	rfxLicenseInfo: rfxLicenseInfo,
	rasterFunctions: rasterFunctions,
	copy: copy,
	save: save,
	title: title,
	folder: folder,
	tags: tags,
	savingMessage: savingMessage,
	shareWith: shareWith,
	share: share,
	setSharingLevel: setSharingLevel,
	setGroupSharing: setGroupSharing,
	owner: owner,
	organization: organization,
	everyone: everyone,
	groups: groups,
	type: type,
	mosaic: mosaic,
	itemGroup: itemGroup,
	item: item,
	definitionQuery: definitionQuery,
	groupItemsBy: groupItemsBy,
	groupFieldName: groupFieldName,
	tagFieldName: tagFieldName,
	noTitleTagErrorMsg: noTitleTagErrorMsg,
	noTitleErrorMsg: noTitleErrorMsg,
	noTagErrorMsg: noTagErrorMsg,
	error: error,
	warning: warning,
	success: success,
	details: details,
	tryAgain: tryAgain,
	toolModeler: toolModeler,
	toolEditor: toolEditor,
	toolDetailsEditor: toolDetailsEditor,
	saveUtils: saveUtils,
	close: close,
	unsavedWarningExisting: unsavedWarningExisting,
	unsavedWarningNew: unsavedWarningNew,
	saveAs: saveAs,
	dontSave: dontSave,
	unsavedTitle: unsavedTitle,
	invalidRFTMessage: invalidRFTMessage,
	errorTitle: errorTitle,
	breadcrumb: breadcrumb,
	breadcrumbEditor: breadcrumbEditor,
	viewerModeTitle: viewerModeTitle,
	viewerModeMessage: viewerModeMessage,
	userStartDirection: userStartDirection,
	selectFunction: selectFunction,
	deselectFunction: deselectFunction,
	dialogTitle: dialogTitle,
	category: category,
	search: search,
	categoryNames: categoryNames
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (commonStrings_sl);


//# sourceMappingURL=common-strings.sl-ea3a78e6.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,